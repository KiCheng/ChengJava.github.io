<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://kicheng.github.io/atom.xml" rel="self"/>
  
  <link href="https://kicheng.github.io/"/>
  <updated>2024-01-06T12:07:44.000Z</updated>
  <id>https://kicheng.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springcloud03</title>
    <link href="https://kicheng.github.io/2024/01/06/springcloud03/"/>
    <id>https://kicheng.github.io/2024/01/06/springcloud03/</id>
    <published>2024-01-06T12:07:44.000Z</published>
    <updated>2024-01-06T12:07:44.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>springcloud02</title>
    <link href="https://kicheng.github.io/2023/12/19/springcloud02/"/>
    <id>https://kicheng.github.io/2023/12/19/springcloud02/</id>
    <published>2023-12-19T12:07:44.000Z</published>
    <updated>2024-01-06T12:11:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式02"><a href="#分布式02" class="headerlink" title="分布式02"></a>分布式02</h1><p>springcloud.</p><span id="more"></span><h2 id="1、Nacos配置管理"><a href="#1、Nacos配置管理" class="headerlink" title="1、Nacos配置管理"></a>1、Nacos配置管理</h2><p>Nacos除了可以做注册中心，还可以进行配置管理。</p><h3 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h3><p>当微服务部署的实例越来越多时，逐个修改微服务实例的配置太过繁琐，所以我们需要一种统一配置管理的方案，可以集中管理所有实例的配置。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231127102521377.png"                      alt="image-20231127102521377" style="zoom:50%;"                 ><p>Nacos一方面可以做配置的集中管理，另一方面可以在配置变更时及时通知微服务进行配置的热更新。</p><h4 id="在nacos中添加配置文件"><a href="#在nacos中添加配置文件" class="headerlink" title="在nacos中添加配置文件"></a>在nacos中添加配置文件</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231127103043283.png"                      alt="image-20231127103043283"                ></p><p>在弹出的表单中填写配置信息：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231127103445612.png"                      alt="image-20231127103445612"                ></p><blockquote><p>项目的核心配置，需要<strong>热更新的配置</strong>才有放到nacos配置中心管理的必要；基本不会变更的基础配置还是要保存在微服务本地。</p></blockquote><h4 id="从微服务中拉取配置"><a href="#从微服务中拉取配置" class="headerlink" title="从微服务中拉取配置"></a>从微服务中拉取配置</h4><p>微服务需要拉取nacos中管理的配置，并且与本地application配置文件中的配置合并，才能完成项目的启动。</p><p>从微服务拉取配置我们需要先访问nacos再读取本地配置，但是nacos的地址是配置在本地application.yml配置文件中的：</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>    </span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">nacos:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos服务地址</span></span><br></pre></td></tr></table></figure></div><p>尚未读取application.yml配置，无法知道nacos的地址，因此spring引入了一种新的配置文件：<code>bootstrap.yaml</code>文件，会在application.yml之前被读取：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231127104303113.png"                      alt="image-20231127104303113"                ></p><ul><li><p>引入nacos-config依赖</p><p>首先在user-service服务中，引入nacos-config的客户端依赖：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos配置管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>添加bootstrap.yaml文件</p><p>这里会根据<code>spring.cloud.nacos.server-addr</code>获取nacos地址，再根据<code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;. $&#123;spring.cloud.nacos.config.file-extension&#125;</code>作为文件id来读取配置。</p><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span>  <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 开发环境，这里是dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span>  <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure></div></li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231127111629380.png"                      alt="image-20231127111629380" style="zoom: 67%;"                 ><ul><li><p>读取nacos配置</p><p>在user-service中的Controller层中添加业务逻辑，读取nacos配置中心的配置：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路径： /user/110</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/time&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在页面访问可以看到效果：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231127164135719.png"                      alt="image-20231127164135719"                ></p></li></ul><h3 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h3><p>配置热更新是指修改nacos的配置后，微服务中无需重启即可让配置生效。</p><p>要实现配置的热更新，有两种方式：</p><h4 id="方式一（不推荐）"><a href="#方式一（不推荐）" class="headerlink" title="方式一（不推荐）"></a>方式一（不推荐）</h4><p>在<code>@Value</code>注入的变量所在类上添加注释<code>@RefreshScope</code>：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span>  <span class="comment">// 在新版springcloud应该已经不支持了，而且本身就不推荐使用 -- 改用config配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><ul><li><p>步骤一</p><p>使用<code>@ConfigurationProperties</code>注释代替<code>@Value</code>注释：在user-service服务中，添加一个类来读取<code>pattern.dateformat</code>属性：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span>  <span class="comment">// pattern.dateformat的pattern前缀</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>步骤二</p><p>在Controller层使用<code>PatternProperties</code>类代替<code>@Value</code>：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    @Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line"><span class="comment">//    private String dateformat;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PatternProperties patternProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/time&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 从@Value的变量值改为：patternProperties.getDateformat() </span></span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(patternProperties.getDateformat()));  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div></li></ul><p>​    <img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231127170830419.png"                      alt="image-20231127170830419"                ></p><h3 id="配置共享"><a href="#配置共享" class="headerlink" title="配置共享"></a>配置共享</h3><p>微服务在启动时，会从nacos中读取多个配置文件如：</p><ul><li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：<code>userservice-dev.yaml</code>；</p></li><li><p><code>[spring.application.name].yaml</code>，例如：<code>userservice.yaml</code>，像这个配置文件不包含环境，因此可以被多个环境所共享。</p></li></ul><p>通过案例来实现配置共享：</p><ul><li><p>添加一个环境共享配置</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231127171406884.png"                      alt="image-20231127171406884" style="zoom:50%;"                 ></li><li><p>在微服务中读取共享配置</p><ul><li><p>在user-service服务中，在<code>PatternProperties</code>配置类中添加读取新的属性：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String envSharedValue;  <span class="comment">// 新添加的属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>在Controller层中添加新的mapping方法：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取共享配置</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/prop&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PatternProperties <span class="title function_">properties</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> patternProperties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul></li></ul><p>UserServiceApplication(8081)使用的profiles是<code>dev</code>（在<code>bootstrap.yaml</code>文件中定义了dev环境），UserServiceApplication(8082)使用的profiles是<code>test</code>：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231127172329802.png"                      alt="image-20231127172329802" style="zoom:67%;"                 ><p>所以从8082端口进行访问是无法得到<code>userservice-dev.yaml</code>配置文件中的配置信息的：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231127172534020.png"                      alt="image-20231127172534020" style="zoom:67%;"                 ><p>尽管如此，在<code>userservice.yaml</code>中的配置是共享的，无论在dev还是在test环境中都可以读取到：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231127173139114.png"                      alt="image-20231127173139114" style="zoom:67%;"                 ><p><strong>配置共享的优先级</strong></p><p>当nacos、服务本地出现相同属性时，优先级：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231127174022871.png"                      alt="image-20231127174022871" style="zoom:67%;"                 ><h2 id="2、Feign远程调用"><a href="#2、Feign远程调用" class="headerlink" title="2、Feign远程调用"></a>2、Feign远程调用</h2><p>先前我们在服务消费者（order-service）中利用<code>RestTemplate</code>发起远程调用：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.1 url地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://userservice/user/&quot;</span> + order.getUserId();</span><br><span class="line"><span class="comment">// 2.2 通过restTemplate发起调用</span></span><br><span class="line"><span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br></pre></td></tr></table></figure></div><p>缺点：① 代码可读性差； ② 参数复杂URL难以维护.</p><blockquote><p>比如我在搜索引擎搜索“java”，就有很复杂的URL参数。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231128085844270.png"                      alt="image-20231128085844270"                ></p></blockquote><p>Feign是一个<strong>声明式的http客户端</strong>，官方地址：<a class="link"   href="https://github.com/OpenFeign/feign%EF%BC%8C%E4%BD%9C%E7%94%A8%E6%98%AF%E5%B8%AE%E5%8A%A9%E6%88%91%E4%BB%AC%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E6%97%B6%E5%AE%9E%E7%8E%B0HTTP%E8%AF%B7%E6%B1%82%E3%80%82" >https://github.com/OpenFeign/feign，作用是帮助我们远程调用时实现HTTP请求。<i class="fa-solid fa-up-right-from-square"></i></a></p><h3 id="Feign代替RestTemplate"><a href="#Feign代替RestTemplate" class="headerlink" title="Feign代替RestTemplate"></a>Feign代替RestTemplate</h3><ul><li><p>步骤1：引入依赖</p><p>在服务消费者（order-service）中引入Feign依赖：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>步骤2：启动类添加注解开启功能</p><p>在服务消费者（order-service）的启动类添加注解开启Feign功能：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.lijiacheng.order.dao&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>  <span class="comment">// 开启Feign</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>步骤3：编写Feign客户端</p><p>在服务消费者（order-service）中新建一个接口（客户端），基于SpringMVC注解来声明远程调用的信息：</p><ul><li>服务名称：userservice</li><li>请求方式：GET</li><li>请求路径：<code>/user/&#123;id&#125;</code></li><li>请求参数：Long id</li><li>返回值类型：User</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>步骤4：利用 Feign远程调用</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserClient userClient;  <span class="comment">// Feign的客户端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderDao.findById(orderId);</span><br><span class="line">    <span class="comment">// 2.Feign远程调用</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> userClient.findById(order.getUserId());</span><br><span class="line">    <span class="comment">// 3.存入order</span></span><br><span class="line">    order.setUser(u);</span><br><span class="line">    <span class="comment">// 4.返回</span></span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。有两种方式进行Feign配置的自定义：</p><h4 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h4><p>基于配置文件的方式修改Feign配置可以针对单个服务或针对所有服务：</p><ul><li><p>单个服务</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"><span class="attr">openfeign:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">userservice:</span>  <span class="comment"># 针对某个微服务的配置</span></span><br><span class="line">            <span class="attr">logger-level:</span> <span class="string">full</span>  <span class="comment"># 日志级别</span></span><br></pre></td></tr></table></figure></div></li><li><p>所有服务</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"><span class="attr">openfeign:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">default:</span>  <span class="comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">            <span class="attr">logger-level:</span> <span class="string">full</span>  <span class="comment"># 日志级别</span></span><br></pre></td></tr></table></figure></div></li></ul><blockquote><p>而日志的级别分为四种：</p><ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul></blockquote><h4 id="java代码方式"><a href="#java代码方式" class="headerlink" title="java代码方式"></a>java代码方式</h4><p>声明一个配置类，再在配置类里声明一个<code>Logger.Level</code>的对象：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC;  <span class="comment">// 日志级别为BASIC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如果是<strong>局部生效</strong>，则把它放到对应的<code>@FeignClient</code>这个注解中：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231128150240572.png"                      alt="image-20231128150240572" style="zoom:67%;"                 ><p>如果是<strong>全局生效</strong>，则把它放到启动类的<code>@EnableFeignClients</code>注解中：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231128150457749.png"                      alt="image-20231128150457749" style="zoom: 67%;"                 ><h3 id="Feign使用优化"><a href="#Feign使用优化" class="headerlink" title="Feign使用优化"></a>Feign使用优化</h3><p>Feign底层发起http请求依赖于其他的框架，其底层客户端实现包括：</p><ul><li>URLConnection：默认实现，不支持连接池</li><li>Apache HttpClient：支持连接池</li><li>OKHttp：支持连接池</li></ul><p>因此提高Feign性能的主要手段就是使用连接池代替默认的URLConnection，这里使用Apache的HttpClient来展示：</p><p>1）引入HttpClient依赖</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>2）配置连接池</p><p>在服务消费者order-service的application.yml配置文件中添加配置：</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">openfeign:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">userservice:</span>  <span class="comment"># 针对某个微服务的配置</span></span><br><span class="line">            <span class="attr">logger-level:</span> <span class="string">full</span>  <span class="comment"># 日志级别</span></span><br><span class="line">      <span class="attr">httpclient:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 开启feign对于HttpClient的支持</span></span><br><span class="line">        <span class="attr">max-connections:</span> <span class="number">200</span>  <span class="comment"># 最大的连接数</span></span><br><span class="line">        <span class="attr">max-connections-per-route:</span> <span class="number">50</span>  <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure></div><blockquote><p>Feign的优化总结：</p><p>1、日志级别尽量用basic</p><p>2、使用HttpClient或OKHttp代替URLConnection框架</p><p>①  引入feign-httpClient依赖</p><p>②  配置文件开启httpClient功能，设置连接池参数</p></blockquote><h3 id="Feign的最佳实践"><a href="#Feign的最佳实践" class="headerlink" title="Feign的最佳实践"></a>Feign的最佳实践</h3><p>Feign的客户端与服务提供者的controller代码非常相似：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="继承方式（不常用）"><a href="#继承方式（不常用）" class="headerlink" title="继承方式（不常用）"></a>继承方式（不常用）</h4><p>1）定义一个API接口，利用定义方法，并基于SpringMVC注解做声明。</p><p>2）Feign客户端和Controller都集成改接口</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231128152458984.png"                      alt="image-20231128152458984" style="zoom: 67%;"                 ><ul><li>优缺点<ul><li>优点：简单、实现了代码共享</li><li>缺点：服务提供方、服务消费方紧密耦合；参数列表中的注解映射（上图是<code>id</code>）不会继承，因此在Controller层必须再次声明方法、参数列表和注解。</li></ul></li></ul><h4 id="抽取方式"><a href="#抽取方式" class="headerlink" title="抽取方式"></a>抽取方式</h4><p>将Feign的Cilent抽取为独立的模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用。例如，将UserClient、User、Feign的默认配置都抽取到一个<code>feign-api</code>包中，所有微服务引用该依赖包，即可直接使用。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231128152852645.png"                      alt="image-20231128152852645" style="zoom:50%;"                 ><h4 id="实现基于抽取的最佳实践"><a href="#实现基于抽取的最佳实践" class="headerlink" title="实现基于抽取的最佳实践"></a>实现基于抽取的最佳实践</h4><ul><li>抽取</li></ul><p>在feign-api中然后引入feign的starter依赖：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>在order-service中编写的UserClient、User、DefaultFeignConfiguration都移到feign-api项目中：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231128153729213.png"                      alt="image-20231128153729213" style="zoom:67%;"                 ><ul><li>在order-service中使用feign-api</li></ul><p>在order-service中引入feign-api的依赖：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lijiacheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包。</p><ul><li>启动测试</li></ul><p>服务出现报错：意思是bean没有注册到Spring容器当中。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231128154751428.png"                      alt="image-20231128154751428"                ></p><p>这是因为<code>UserClient</code>现在在com.lijiacheng.feign.clients包下，而order-service的<code>@EnableFeignClients</code>注解是在com.lijiacheng.order包下，不在同一个包无法扫描到<code>UserClient</code>。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231128155324183.png"                      alt="image-20231128155324183"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231128155433928.png"                      alt="image-20231128155433928"                ></p><p><strong>解决包扫描的问题：</strong></p><ul><li><p>方式一：指定Feign应该扫描的包</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.lijiacheng.feign.client&quot;)</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231128155717559.png"                      alt="image-20231128155717559"                ></p></li><li><p>方式二：指定需要加载的cilents端口<strong>（精准）</strong></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231128155925781.png"                      alt="image-20231128155925781"                ></p></li></ul><h2 id="3、Gateway服务网关"><a href="#3、Gateway服务网关" class="headerlink" title="3、Gateway服务网关"></a>3、Gateway服务网关</h2><h3 id="网关是什么"><a href="#网关是什么" class="headerlink" title="网关是什么"></a>网关是什么</h3><p>Gateway网关是所有微服务的统一入口。</p><p>网关的<strong>核心功能特性</strong>：</p><ul><li><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</li><li><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由（路由的目标服务有多个时，还需要做负载均衡）。</li><li><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231129195513315.png"                      alt="image-20231129195513315" style="zoom: 50%;"                 ><blockquote><p>SpringCloud中网关的实现有gateway和Zuul两种，Zuul是基于Servlet的实现，gateway是基于Spring5提供的WebFlux，具备更好的性能。</p></blockquote><h3 id="gateway快速入门"><a href="#gateway快速入门" class="headerlink" title="gateway快速入门"></a>gateway快速入门</h3><p>测试一下gateway最主要的路由功能。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231129203831263.png"                      alt="image-20231129203831263" style="zoom: 50%;"                 ><ul><li><p>创建gateway服务，引入依赖</p><p><font color="red">如果不导入loadbalancer负载均衡依赖网关会无法使用<code>lb://服务名称</code>.</font></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos服务发现依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--高版本的SpringCloud需要导入负载均衡依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>编写启动类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>编写基础配置和路由规则</p><p>创建application.yml配置文件，内容如下：</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span>  <span class="comment"># 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span>  <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">    <span class="comment"># ===============网关路由配置===============</span></span><br><span class="line">      <span class="attr">routes:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span>  <span class="comment"># 路由id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span>  <span class="comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称 </span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span><br><span class="line">          <span class="attr">predicates:</span>  <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span>  <span class="comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br></pre></td></tr></table></figure></div></li></ul><p>​        将符合断言<code>Path</code>的一切请求，都代理到<code>uri</code>参数指定的地址。本例就是将<code>/user/**</code>开头的请求，代理到userservice服务并根据服务名拉取服务实现负载均衡。</p><ul><li><p>重启测试</p><p>访问<a class="link"   href="http://localhost:10010/user/1%E6%97%B6%EF%BC%8C%E7%AC%A6%E5%90%88%60/user/**%60%E8%A7%84%E5%88%99%EF%BC%8C%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%88%B0uri%EF%BC%9Ahttp://userservice/user/1%EF%BC%9A" >http://localhost:10010/user/1时，符合`/user/**`规则，请求转发到uri：http://userservice/user/1：<i class="fa-solid fa-up-right-from-square"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231129203544994.png"                      alt="image-20231129203544994"                ></p></li></ul><h3 id="断言工厂"><a href="#断言工厂" class="headerlink" title="断言工厂"></a>断言工厂</h3><p><code>Predicate Factory</code>读取并处理，转变为路由判断的条件，例如Path=/user/**是按照路径匹配，这个规则是由PathRoutePredicateFactory类来处理的，像这样的断言工厂在SpringCloudGateway还有十几个，我们只需要掌握Path这种路由断言就可以：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>-  After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>-  Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>-  Between=2037-01-20T17:42:47.789-07:00[America/Denver],  2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header=X-Request-Id, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>-  Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method=GET,POST</td></tr><tr><td><strong>Path</strong></td><td>请求路径必须符合指定规则</td><td>- Path=/red/{segment},/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack或者-  Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><h3 id="过滤器工厂"><a href="#过滤器工厂" class="headerlink" title="过滤器工厂"></a>过滤器工厂</h3><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231129204438690.png"                      alt="image-20231129204438690" style="zoom:50%;"                 ><h4 id="路由过滤器的种类"><a href="#路由过滤器的种类" class="headerlink" title="路由过滤器的种类"></a>路由过滤器的种类</h4><p>Spring提供了31种不同的路由过滤器工厂，例如：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table><h4 id="请求头过滤器"><a href="#请求头过滤器" class="headerlink" title="请求头过滤器"></a>请求头过滤器</h4><p>以AddRequestHeader 为例，需求是：给所有进入userservice的请求添加一个请求头：Truth, ljc is a good coder!（“键, 值”形式）</p><p>只需要在gateway服务的application配置文件中配置路由过滤即可：</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span>  <span class="comment"># 路由id</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://userservice</span>  </span><br><span class="line">  <span class="attr">predicates:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/user/**</span>  </span><br><span class="line">  <span class="attr">filters:</span>  <span class="comment"># 过滤器</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">ljc</span> <span class="string">is</span> <span class="string">a</span> <span class="string">good</span> <span class="string">coder!</span> <span class="comment"># 添加请求头</span></span><br></pre></td></tr></table></figure></div><p>当前过滤器写在userservice路由下，所以仅对访问userservice的请求有效。</p><p>在user-service的contoller层加入添加请求头的验证功能：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加过滤器添加请求头验证功能</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="meta">@RequestHeader(value = &quot;Truth&quot;, required = false)</span> String header)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Truth:&quot;</span> + header);</span><br><span class="line">    <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p><code>@RequestHeader</code>表示获取请求头信息，<code>value</code>是获取相应键的请求头信息，<code>required</code>是false允许无此请求头信息，在控制台打印出来。</p></blockquote><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231130100027536.png"                      alt="image-20231130100027536" style="zoom:67%;"                 ><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231130095800873.png"                      alt="image-20231130095800873"                ></p><h4 id="默认过滤器"><a href="#默认过滤器" class="headerlink" title="默认过滤器"></a>默认过滤器</h4><p>如果要对<strong>所有的路由都生效</strong>，则可以将过滤器工厂写到default下：</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gateway:</span></span><br><span class="line">  <span class="attr">routes:</span>  <span class="comment"># 网关路由配置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span>  </span><br><span class="line">      <span class="attr">uri:</span> <span class="string">lb://userservice</span>  </span><br><span class="line">          <span class="attr">predicates:</span>  </span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span>  </span><br><span class="line">  <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">ljc</span> <span class="string">is</span> <span class="string">a</span> <span class="string">good</span> <span class="string">coder!</span> </span><br></pre></td></tr></table></figure></div><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><p>网关提供了31种过滤器，但每一种过滤器的作用都是固定的。如果我们希望拦截请求做特定的业务逻辑则没办法实现。全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。<strong>区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</strong></p><p>在filter中通过实现<code>GloabalFilter</code>接口编写自定义逻辑，可以实现下列功能：</p><ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(-1)</span>  <span class="comment">// 定义过滤器的优先级</span></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;  <span class="comment">// 定义方式是实现GlobalFilter接口</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange  请求上下文，里面可以获取Request、Response等信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain  用来把请求委托给下一个过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1、获取请求参数</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        MultiValueMap&lt;String, String&gt; requestQueryParams = request.getQueryParams();</span><br><span class="line">        <span class="comment">// 2、获取authorization请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> requestQueryParams.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3、校验</span></span><br><span class="line">        <span class="keyword">if</span>(author.equals(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4、拦截</span></span><br><span class="line">        <span class="comment">// 禁止访问，设置状态码</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);  <span class="comment">// 401</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231130101732232.png"                      alt="image-20231130101732232" style="zoom: 67%;"                 ><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231130101748204.png"                      alt="image-20231130101748204"                ></p><p>在加入正确的请求参数后，过滤器放行，user-service微服务访问生效：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231130101904495.png"                      alt="image-20231130101904495" style="zoom:67%;"                 ><h3 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h3><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter。请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231130102155750.png"                      alt="image-20231130102155750" style="zoom: 50%;"                 ><p>排序的规则：</p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定。</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是<strong>按照声明顺序</strong>从1递增。</li><li>当过滤器的order值一样时，会按照 <strong>defaultFilter &gt; 路由过滤器 &gt; GlobalFilter</strong>的顺序执行（想让GlobalFilter先执行将order值调到负数即可）。</li></ul><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>跨域：域名不一致就是跨域，主要包括：</p><ul><li><p>域名不同： <a class="link"   href="http://www.taobao.com/" >www.taobao.com<i class="fa-solid fa-up-right-from-square"></i></a> 和 <a class="link"   href="http://www.taobao.org/" >www.taobao.org<i class="fa-solid fa-up-right-from-square"></i></a> 和 <a class="link"   href="http://www.jd.com/" >www.jd.com<i class="fa-solid fa-up-right-from-square"></i></a> 和 miaosha.jd.com</p></li><li><p>域名相同，端口不同：localhost:8080和localhost:8081</p></li></ul><p>跨域问题：<strong>浏览器禁止</strong>请求的发起者与服务端发生跨域<strong>ajax请求</strong>，请求被浏览器拦截的问题；解决方案：CORS。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;分布式02&quot;&gt;&lt;a href=&quot;#分布式02&quot; class=&quot;headerlink&quot; title=&quot;分布式02&quot;&gt;&lt;/a&gt;分布式02&lt;/h1&gt;&lt;p&gt;springcloud.&lt;/p&gt;</summary>
    
    
    
    <category term="SpingCloud" scheme="https://kicheng.github.io/categories/SpingCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>springcloud02</title>
    <link href="https://kicheng.github.io/2023/12/06/springcloud01/"/>
    <id>https://kicheng.github.io/2023/12/06/springcloud01/</id>
    <published>2023-12-06T12:07:44.000Z</published>
    <updated>2024-01-06T12:10:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式01"><a href="#分布式01" class="headerlink" title="分布式01"></a>分布式01</h1><p>springcloud.</p><span id="more"></span><h2 id="1、微服务"><a href="#1、微服务" class="headerlink" title="1、微服务"></a>1、微服务</h2><h4 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h4><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030145916724.png"                      alt="image-20231030145916724" style="zoom: 43%;"                 ><p><strong>优点：</strong></p><ul><li>架构简单</li><li>部署成本低</li></ul><p><strong>缺点：</strong></p><ul><li>耦合度高（维护困难、升级困难）</li></ul><h3 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h3><p>根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030150020111.png"                      alt="image-20231030150020111" style="zoom: 50%;"                 ><p><strong>优点：</strong></p><ul><li>降低服务耦合</li><li>有利于服务升级和拓展</li></ul><p><strong>缺点：</strong></p><ul><li>服务调用关系错综复杂</li></ul><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p>微服务的架构特征：</p><ul><li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</li><li>自治：团队独立、技术独立、数据独立，独立部署和交付</li><li>面向服务：服务提供统一标准的接口，与语言和技术无关</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li></ul><p>微服务是一种经过良好架构设计的分布式架构方案，在分布式架构的基础上进一步降低了服务之间的耦合性，做到了高内聚、低耦合。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030150216934.png"                      alt="image-20231030150216934" style="zoom:67%;"                 ><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><p>SpringCloud是目前国内使用最广泛的微服务框架，SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030150415817.png"                      alt="image-20231030150415817" style="zoom:50%;"                 ><p><font color="red"><strong>注意SpringCloud和Springboot的版本之间有一定的兼容关系：</strong></font></p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030150615075.png"                      alt="image-20231030150615075" style="zoom:67%;"                 ><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- version管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2022.0.3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="2、服务拆分和远程调用"><a href="#2、服务拆分和远程调用" class="headerlink" title="2、服务拆分和远程调用"></a>2、服务拆分和远程调用</h2><h3 id="服务拆分原则"><a href="#服务拆分原则" class="headerlink" title="服务拆分原则"></a>服务拆分原则</h3><ul><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其它微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030150745297.png"                      alt="image-20231030150745297" style="zoom:33%;"                 ><h3 id="服务拆分案例"><a href="#服务拆分案例" class="headerlink" title="服务拆分案例"></a>服务拆分案例</h3><p>数据库中<code>cloud-user</code>和<code>cloud-order</code>表：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030151209448.png"                      alt="image-20231030151209448" style="zoom:67%;"                 ><p>在<code>OrderController</code>层有根据<code>id</code>查询的接口：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;orderId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderByUserId</span><span class="params">(<span class="meta">@PathVariable(&quot;orderId&quot;)</span> Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据id查询订单并返回</span></span><br><span class="line">    <span class="keyword">return</span> orderService.queryOrderById(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>查询结果：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030152721464.png"                      alt="image-20231030152721464"                ></p><p>同样在<code>UserController</code>曾有根据<code>id</code>查询的接口：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>查询结果：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030153319794.png"                      alt="image-20231030153319794"                ></p><h3 id="远程调用案例"><a href="#远程调用案例" class="headerlink" title="远程调用案例"></a>远程调用案例</h3><p>每个业务模块对应着自己业务的数据库，不可跨业务访问。</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/cloud_order?useSSL=false</span>  <span class="comment"># order-service中连接的是本地的cloud_order数据库</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/cloud_user?useSSL=false</span>  <span class="comment"># user-service中连接的是本地的cloud-user数据库</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030152721464.png"                      alt="image-20231030152721464"                ></p><p>在<code>order-service</code>模块中查询订单信息时 <code>user == null</code>，而我们希望在<code>order-service</code>的接口中可以根据<code>id</code>查询订单的同时，根据订单中包含的<code>userId</code>查询出用户信息一起返回。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030154105602.png"                      alt="image-20231030154105602" style="zoom: 50%;"                 ><p>因此，我们需要在<code>order-service</code>中向<code>user-service</code>发送一个http请求，调用<code>user-service</code>的<code>http://localhost:8081/user/&#123;userId&#125;</code>接口来查询<code>cloud-user</code>数据库的内容。</p><p><strong>远程调用步骤：</strong></p><ul><li><p>注册一个<code>RestTemplate</code>实例到Spring容器中（在启动类中注册<code>Bean</code>）</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.lijiacheng.order.dao&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>修改<code>order-service</code>中的接口方法，通过<code>Order</code>对象的<code>userId</code>来查询<code>User</code></p></li><li><p>将<code>User</code>对象填充到<code>Order</code>对象一同返回</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderDao.findById(orderId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.远程查询user</span></span><br><span class="line">        <span class="comment">// 2.1 url地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8081/user/&quot;</span> + order.getUserId();</span><br><span class="line">        <span class="comment">// 2.2 通过restTemplate发起调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.存入order</span></span><br><span class="line">        order.setUser(u);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030155118802.png"                      alt="image-20231030155118802"                ></p><h3 id="提供者和消费者"><a href="#提供者和消费者" class="headerlink" title="提供者和消费者"></a>提供者和消费者</h3><p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务（提供接口给其它微服务）</p><p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务（调用其它微服务提供的接口）</p><blockquote><p>服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言。</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030155844415.png"                      alt="image-20231030155844415"                ></p><h2 id="3、Eureka注册中心"><a href="#3、Eureka注册中心" class="headerlink" title="3、Eureka注册中心"></a>3、Eureka注册中心</h2><p>假设服务提供者<code>user-service</code>部署了多个实例供服务消费者调用：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030160201998.png"                      alt="image-20231030160201998" style="zoom:33%;"                 ><p>那么我们会好奇几个问题：<code>order-service</code>是如何得到<code>user-service</code>实例的ip地址和端口的？有多个消费者时如何选择？服务消费者如何知道提供者实例是否仍然健康？</p><h3 id="Eureka的结构和作用"><a href="#Eureka的结构和作用" class="headerlink" title="Eureka的结构和作用"></a>Eureka的结构和作用</h3><p>Eureka是SpringCloud中的一个注册中心，来解决上述问题。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030160626368.png"                      alt="image-20231030160626368" style="zoom: 50%;"                 ><p><strong>Eureka原理</strong></p><ul><li><p>服务注册：<code>user-service</code>服务实例启动后，将自己的信息注册到<code>eureka-server</code>（Eureka服务端）</p></li><li><p><code>eureka-server</code>保存服务名称到服务实例地址列表的映射关系</p></li><li><p>服务拉取（服务发现）：<code>order-service</code>根据服务名称，拉取实例地址列表</p></li><li><p>通过负载均衡算法挑选一个提供者服务，实现远程调用</p></li><li><p>心跳：<code>user-service</code>会每隔一段时间<strong>（默认30秒）</strong>向<code>eureka-server</code>发起请求，报告自己状态</p></li></ul><blockquote><p>一个微服务，既可以是服务提供者，又可以是服务消费者，因此<font color="blue">eureka将服务注册、服务发现等功能统一封装到了<code>eureka-client</code>端</font>。</p></blockquote><h3 id="搭建eureka-server"><a href="#搭建eureka-server" class="headerlink" title="搭建eureka-server"></a>搭建eureka-server</h3><p>注册中心服务端：<strong>eureka-server</strong>，这必须是一个独立的微服务。</p><ul><li><p>创建module，引入服务端依赖</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>修改启动类：<code>@EnableEurekaServer</code>注解用来开启注册中心功能</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>编写配置文件</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="comment"># eureka的客户端配置</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure></div></li><li><p>启动服务</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030162051513.png"                      alt="image-20231030162051513"                ></p></li></ul><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>接下来将服务提供者<code>user-service</code>注册到<code>eureka-service</code>中。</p><ul><li><p>在服务提供者<code>user-service</code>中引入<code>eureka-client</code>依赖（注意这里是client端）：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>在服务提供者<code>user-service</code>中，修改配置文件，添加服务名称、eureka地址：</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure></div></li><li><p>启动多个服务提供者<code>user-service</code>实例</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030162818082.png"                      alt="image-20231030162818082"                ></p></li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030163102118.png"                      alt="image-20231030163102118" style="zoom:50%;"                 ><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030164507443.png"                      alt="image-20231030164507443"                ></p><h3 id="服务拉取"><a href="#服务拉取" class="headerlink" title="服务拉取"></a>服务拉取</h3><p>将<code>order-service</code>的逻辑修改，向<code>eureka-server</code>拉取<code>user-service</code>的信息，实现服务拉取（服务发现）。</p><ul><li><p>在服务消费者<code>order-service</code>中引入依赖</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>服务发现、服务注册统一都封装在eureka-client依赖，因此这一步与服务注册一致。</p></blockquote></li><li><p>在服务消费者<code>order-service</code>中配置文件</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure></div></li><li><p>服务拉取和负载均衡</p><p>到<code>eureka-server</code>中拉取服务提供者<code>user-service</code>服务的实例列表，并且实现负载均衡。</p><ul><li>在<code>RestTemplate</code>（实现远程调用的Bean）中加入表示客户端负载均衡的注释<code>@LoadBalanced</code></li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LoadBalanced</span> <span class="comment">// 标注此注解后，RestTemplate就具有了客户端负载均衡能力</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>修改服务消费者<code>order-service</code>的调用接口中的url路径，用<strong>服务名</strong>代替ip、端口：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030170324318.png"                      alt="image-20231030170324318" style="zoom:80%;"                 ><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030170046438.png"                      alt="image-20231030170046438"                ></p></li></ul><p>向<code>order-service</code>的查询业务重复发送请求（2次）——实现了<strong>负载均衡</strong>。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030170633134.png"                      alt="image-20231030170633134"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231030170657000.png"                      alt="image-20231030170657000"                ></p><blockquote><p><font color="red">注意：Springcloud的新版本已经没有ribbon组件（实现负载均衡）了，需要导入以下两个pom依赖：</font></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.ribbon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></blockquote><h2 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><p>上一章节，我们在<code>RestTemplate</code>这个Bean中添加注释<code>@LoadBalanced</code>即可实现负载均衡。</p><h3 id="负载均衡原理"><a href="#负载均衡原理" class="headerlink" title="负载均衡原理"></a>负载均衡原理</h3><p>SpringCloud底层利用一个名为Ribbon的组件来实现负载均衡：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031083402421.png"                      alt="image-20231031083402421" style="zoom: 50%;"                 ><h3 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h3><p>我们只输入了service名称，就获取到了服务实例的ip和端口——就是<code>LoadBalancerInterceptor</code>，这个类会在对<code>RestTemplate</code>远程调用的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p><p><strong>负载均衡原理：</strong>首先通过<code>LoadBalancerInterceptor</code>拦截了用户的http请求，获取用户请求的URL和服务id，交给<code>LoadBalancerClient</code>；<code>LoadBalancerClient</code>利用内置的负载均衡算法（默认是轮询）选择服务列表中的端口号用于服务。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031084059739.png"                      alt="image-20231031084059739"                ></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Ribbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031084956806.png"                      alt="image-20231031084956806" style="zoom:67%;"                 ><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031090129412.png"                      alt="image-20231031090129412" style="zoom: 50%;"                 ><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon<strong>默认</strong>的负载均衡规则</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略：（1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择</td></tr><tr><td>ZoneAvoidanceRule</td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><h3 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h3><blockquote><p><strong>注意</strong>：一般用默认的负载均衡规则，不做修改。</p></blockquote><ul><li><p>方法一：代码方式——在服务消费者<code>order-service</code>中的启动类中，定义一个新的(Bean)<code>IRule</code>：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>方法二：配置文件方式——在服务消费者<code>order-service</code>的yml文件中，添加新的配置：</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span> <span class="comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure></div></li></ul><h3 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h3><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 饥饿加载</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">userservice</span></span><br></pre></td></tr></table></figure></div><h2 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h2><p>SpringCloud Alibaba也推出了一个名为Nacos的注册中心。</p><h3 id="安装Nacos"><a href="#安装Nacos" class="headerlink" title="安装Nacos"></a>安装Nacos</h3><blockquote><p>Windows版</p></blockquote><p>1、下载安装包</p><p>GitHub主页：<a class="link"   href="https://github.com/alibaba/nacos" >https://github.com/alibaba/nacos<i class="fa-solid fa-up-right-from-square"></i></a></p><p>2、目录说明</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031092058493.png"                      alt="image-20231031092058493" style="zoom:50%;"                 ><p>3、端口配置</p><p>Nacos的默认端口是8848，如果你电脑上的其它进程占用了8848端口，请先尝试关闭该进程。<strong>如果无法关闭占用8848端口的进程</strong>，也可以进入nacos的conf目录，修改配置文件中的端口：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031092212309.png"                      alt="image-20231031092212309" style="zoom: 50%;"                 ><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031092254476.png"                      alt="image-20231031092254476" style="zoom:50%;"                 ><p>4、启动</p><p>进行bin目录，执行：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031092335416.png"                      alt="image-20231031092335416" style="zoom:50%;"                 ><p>5、访问</p><p>默认的账号和密码都是nacos。</p><h3 id="服务注册到Nacos"><a href="#服务注册到Nacos" class="headerlink" title="服务注册到Nacos"></a>服务注册到Nacos</h3><p>Nacos和Eureka对于微服务来说没有什么区别，主要差异在：① 依赖不同；② 服务地址不同。</p><ul><li><p> 引入依赖</p></li><li><p>父依赖</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos的管理依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2022.0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>在服务的消费者和提供者<code>order-service</code>和<code>user-service</code>中引入discovery依赖：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>配置nacos地址</p><p>在yml文件中配置nacos地址：</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">nacos:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos服务地址</span></span><br></pre></td></tr></table></figure></div></li><li><p>启动微服务</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031140453859.png"                      alt="image-20231031140453859"                ></p></li></ul><h3 id="服务分级存储模型"><a href="#服务分级存储模型" class="headerlink" title="服务分级存储模型"></a>服务分级存储模型</h3><p>举例来说，<code>user-service</code>是服务，一个服务可以包含多个集群（如杭州、上海），每个集群下可以有多个实例，形成分级模型：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031140714932.png"                      alt="image-20231031140714932" style="zoom: 50%;"                 ><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031140833581.png"                      alt="image-20231031140833581" style="zoom: 50%;"                 ><h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><p>修改<code>user-service</code>的application.yml文件，添加集群配置：</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">nacos:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment"># nacos服务地址</span></span><br><span class="line">        <span class="attr">discovery:</span></span><br><span class="line">          <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031141156542.png"                      alt="image-20231031141156542" style="zoom:50%;"                 ><p>再次复制一个<code>user-service</code>启动配置，添加属性：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031141248389.png"                      alt="image-20231031141248389" style="zoom:67%;"                 ><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031141418717.png"                      alt="image-20231031141418717" style="zoom:33%;"                 ><h4 id="同集群优先的负载均衡"><a href="#同集群优先的负载均衡" class="headerlink" title="同集群优先的负载均衡"></a>同集群优先的负载均衡</h4><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡；因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例：</p><p>因为作为服务消费者的<code>order-service</code>要远程调用服务提供者<code>user-service</code>，所以要在<code>order-service</code>中配置Nacos负载均衡的设置：</p><ul><li><p>将<code>order-service</code>的服务也加入到前面的HZ集群</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos服务地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure></div></li><li><p>在服务消费者<code>order-service</code>中加入负载均衡设置</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负载均衡的配置规则</span></span><br><span class="line"><span class="attr">userservice:</span>  <span class="comment"># 要做配置的微服务名称</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则</span></span><br></pre></td></tr></table></figure></div></li></ul><blockquote><p><font color="red"><strong>出现了问题：Nacos注册中心，访问不了order-service服务：</strong></font></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231101084020891.png"                      alt="image-20231101084020891"                ></p><p>【解决方案】在新版本的springcloud（我用的是2022.0.0）中已经没有默认的ribbon负载均衡组件了，需要手动导入这个<strong>负载均衡依赖</strong>（不用导入ribbon依赖了）：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></blockquote><h3 id="负载均衡的权重配置"><a href="#负载均衡的权重配置" class="headerlink" title="负载均衡的权重配置"></a>负载均衡的权重配置</h3><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031203443346.png"                      alt="image-20231031203443346" style="zoom:50%;"                 ><h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><ul><li>nacos中可以有多个<code>namespace</code>；</li><li><code>namespace</code>下可以有<code>group、service</code>等；</li><li>不同<code>namespace</code>之间相互隔离，例如不同<code>namespace</code>的服务互相不可见；</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231031203554894.png"                      alt="image-20231031203554894" style="zoom: 25%;"                 ><ul><li>创建namespace</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231101084151523.png"                      alt="image-20231101084151523" style="zoom:50%;"                 ><ul><li><p>给微服务配置namespace</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> </span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> </span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">6adbcdc1-bb2e-460c-a447-e100eae322d2</span> <span class="comment"># 命名空间配置</span></span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231101084555881.png"                      alt="image-20231101084555881" style="zoom:67%;"                 ></li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20231101084614439.png"                      alt="image-20231101084614439" style="zoom:67%;"                 ><p>这时候访问<code>order-service</code>会导致远程调用<code>user-service</code>时找不到<code>userservice</code>的实例，这是因为它们的namespace不同！</p><h3 id="Nacos和Eureka的比较"><a href="#Nacos和Eureka的比较" class="headerlink" title="Nacos和Eureka的比较"></a>Nacos和Eureka的比较</h3><p>Nacos的服务实例分为两种类型：</p><ul><li>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</li><li>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</li></ul><p>将一个服务设置为永久实例：</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置为非临时实例</span></span><br></pre></td></tr></table></figure></div><p>Nacos与eureka的共同点：</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul><p>Nacos与Eureka的区别：</p><ul><li><p>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</p></li><li><p>临时实例心跳不正常会被剔除，非临时实例则不会被剔除（等待重新恢复健康）</p></li><li><p>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</p></li><li><p>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</p><blockquote><p><strong>AP（可用性和分区容忍性）</strong>：</p><ul><li>AP模型强调在面对网络分区或节点故障时保持系统的可用性。</li><li>在AP模型下，系统会允许数据在不同部分之间存在短暂的不一致性，以保证系统的可用性。这意味着在某些情况下，系统可能会返回陈旧或部分不一致的数据，但不会拒绝请求。</li><li>AP系统通常用于需要高可用性和容忍分区故障的场景，例如，社交媒体应用或内容分发网络（CDN）。</li></ul><p><strong>CP（一致性和分区容忍性）</strong>：</p><ul><li><p>CP模型强调在面对网络分区或节点故障时保持数据的一致性。</p></li><li><p>在CP模型下，系统会确保数据的一致性，即使这可能导致一些部分的系统不可用。系统会拒绝写入或读取请求，直到数据一致性得到满足。</p></li><li><p>CP系统通常用于需要数据一致性和容忍分区故障的场景，例如，金融交易系统或医疗记录系统。</p><p>​                                                                                                                                                                                                   ——ChatGPT</p></li></ul></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;分布式01&quot;&gt;&lt;a href=&quot;#分布式01&quot; class=&quot;headerlink&quot; title=&quot;分布式01&quot;&gt;&lt;/a&gt;分布式01&lt;/h1&gt;&lt;p&gt;springcloud.&lt;/p&gt;</summary>
    
    
    
    <category term="SpingCloud" scheme="https://kicheng.github.io/categories/SpingCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>algorithm08-dp之子序列</title>
    <link href="https://kicheng.github.io/2023/08/11/algorithm08-dp%E4%B9%8B%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://kicheng.github.io/2023/08/11/algorithm08-dp%E4%B9%8B%E5%AD%90%E5%BA%8F%E5%88%97/</id>
    <published>2023-08-11T02:32:09.000Z</published>
    <updated>2023-08-12T14:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm08-dp之子序列/68747470733a2f2f636f64652d7468696e6b696e672e63646e2e626365626f732e636f6d2f706963732fe58aa8e68081e8a784e588922de5ad90e5ba8fe58897e997aee9a298e680bbe7bb932e6a7067.jpeg"                      alt="img" style="zoom: 50%;"                 ><h2 id="不连续子序列"><a href="#不连续子序列" class="headerlink" title="不连续子序列"></a>不连续子序列</h2><h3 id="300-最长递增子序列"><a href="#300-最长递增子序列" class="headerlink" title="300. 最长递增子序列"></a><a class="link"   href="https://leetcode.cn/problems/longest-increasing-subsequence/" >300. 最长递增子序列<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm08-dp%E4%B9%8B%E5%AD%90%E5%BA%8F%E5%88%97/image-20230811103401752.png"                      alt="image-20230811103401752"                ></p><p>定义 <code>dp[i]</code> 为考虑前 i 个元素，以第 i 个数字结尾的最长上升子序列的长度，注意 <code>nums[i]</code> 必须被选取。</p><p>我们从小到大计算 <code>dp</code> 数组的值，在计算 <code>dp[i]</code> 之前，我们已经计算出 <code>dp[0…i−1]</code> 的值，则状态转移方程为：<br>$$<br>dp[i]=max⁡(dp[j])+1,其中 0≤j&lt;i 且 num[j]&lt;num[i]<br>$$</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// dp</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &lt; nums[i])&#123;</span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            maxans = Math.max(dp[i], maxans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143. 最长公共子序列"></a><a class="link"   href="https://leetcode.cn/problems/longest-common-subsequence/" >1143. 最长公共子序列<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm08-dp%E4%B9%8B%E5%AD%90%E5%BA%8F%E5%88%97/image-20230811110006614.png"                      alt="image-20230811110006614"                ></p><p>最长公共子序列问题是典型的二维动态规划问题。</p><p>假设字符串 <code>text1</code> 和 <code>text2</code>的长度分别为 m 和 n，创建 m 行 n 列的二维数组<code>dp</code>，其中 <code>dp[i][j]</code>表示 <code>text1[0:i]</code>和 <code>text2[0:j]</code>的最长公共子序列的长度。</p><p>当 <code>i&gt;0 且 j&gt;0</code> 时，考虑 <code>dp[i][j] </code>的计算：</p><ul><li><p>当 <code>text1[i] = text2[j]</code>时，将这两个相同的字符称为公共字符，考虑 <code>text1[0:i−1]</code> 和 <code>text2[0:j−1]</code>的最长公共子序列，再增加一个字符（即公共字符）即可得到 <code>text1[0:i]</code>和 <code>text2[0:j]</code>的最长公共子序列，因此 <code>dp[i][j] = dp[i−1][j−1]+1</code>。</p></li><li><p>当 <code>text1[i] ≠ text2[j]</code> 时，考虑以下两项：</p><ul><li><p><code>text1[0:i−1]</code> 和 <code>text2[0:j] </code> 的最长公共子序列；</p></li><li><p><code>text1[0:i]</code> 和 <code>text2[0:j−1]</code> 的最长公共子序列；</p></li></ul></li></ul><p>由此可以得到如下状态转移方程：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm08-dp%E4%B9%8B%E5%AD%90%E5%BA%8F%E5%88%97/image-20230811112053495.png"                      alt="image-20230811112053495"                ></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> text1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text2.length();</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">stage</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(text1.charAt(i) == text2.charAt(<span class="number">0</span>))&#123;</span><br><span class="line">                stage = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][<span class="number">0</span>] = stage == <span class="literal">true</span> ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        stage = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(text1.charAt(<span class="number">0</span>) == text2.charAt(j))&#123;</span><br><span class="line">                stage = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[<span class="number">0</span>][j] = stage == <span class="literal">true</span> ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// dp</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Math.max(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">                dp[i][j] = text1.charAt(i) == text2.charAt(j) ? dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span> : max;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="1035-不相交的线"><a href="#1035-不相交的线" class="headerlink" title="1035. 不相交的线"></a><a class="link"   href="https://leetcode.cn/problems/uncrossed-lines/" >1035. 不相交的线<i class="fa-solid fa-up-right-from-square"></i></a></h3><p>高情商版本的最长子序列问题，与1143题一模一样。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxUncrossedLines</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">stage</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i] == nums2[<span class="number">0</span>])&#123;</span><br><span class="line">                stage = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][<span class="number">0</span>] = stage == <span class="literal">true</span> ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        stage = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[<span class="number">0</span>] == nums2[j])&#123;</span><br><span class="line">                stage = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[<span class="number">0</span>][j] = stage == <span class="literal">true</span> ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// dp</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums1[i] == nums2[j])&#123;</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="连续子序列"><a href="#连续子序列" class="headerlink" title="连续子序列"></a>连续子序列</h2><h3 id="674-最长连续递增序列"><a href="#674-最长连续递增序列" class="headerlink" title="674. 最长连续递增序列"></a><a class="link"   href="https://leetcode.cn/problems/longest-continuous-increasing-subsequence/" >674. 最长连续递增序列<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm08-dp%E4%B9%8B%E5%AD%90%E5%BA%8F%E5%88%97/image-20230811114008992.png"                      alt="image-20230811114008992"                ></p><p><code>dp[i]</code>代表以<code>nums[i]</code>为结尾的递增序列长度。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLengthOfLCIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// dp</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            dp[i] = nums[i-<span class="number">1</span>] &lt; nums[i] ? dp[i-<span class="number">1</span>]+<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">            maxans = Math.max(dp[i], maxans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="718-最长重复子数组"><a href="#718-最长重复子数组" class="headerlink" title="718. 最长重复子数组"></a><a class="link"   href="https://leetcode.cn/problems/maximum-length-of-repeated-subarray/" >718. 最长重复子数组<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm08-dp%E4%B9%8B%E5%AD%90%E5%BA%8F%E5%88%97/image-20230811161804773.png"                      alt="image-20230811161804773"                ></p><p><code>dp[i][j]</code>表示以<code>nums1[i]</code>和<code>nums2[j]</code>为结尾的子数组的公共子数组长度。当<code>nums1[i] == nums2[j]</code>时，<code>dp[i][j]</code>由<code>dp[i-1][j-1]</code>状态转移过来。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLength</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="comment">// init </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = nums1[i] == nums2[<span class="number">0</span>] ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            maxans = Math.max(dp[i][<span class="number">0</span>], maxans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = nums1[<span class="number">0</span>] == nums2[j] ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            maxans = Math.max(dp[<span class="number">0</span>][j], maxans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// dp</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                dp[i][j] = nums1[i] == nums2[j] ? dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span> : <span class="number">0</span>; </span><br><span class="line">                maxans = Math.max(dp[i][j], maxans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a><a class="link"   href="https://leetcode.cn/problems/maximum-subarray/" >53. 最大子数组和<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm08-dp%E4%B9%8B%E5%AD%90%E5%BA%8F%E5%88%97/image-20230811164122670.png"                      alt="image-20230811164122670"                ></p><p><code>dp[i]</code>表示以<code>nums[i]</code>为结尾的子数组的最大和，通过比较<code>dp[i-1]+nums[i]</code>和<code>nums[i]</code>的状态转移到<code>dp[i]</code>上来。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxans</span> <span class="operator">=</span> dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>] + nums[i], nums[i]);</span><br><span class="line">            maxans = Math.max(maxans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="392-判断子序列"><a href="#392-判断子序列" class="headerlink" title="392. 判断子序列"></a><a class="link"   href="https://leetcode.cn/problems/is-subsequence/" >392. 判断子序列<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm08-dp%E4%B9%8B%E5%AD%90%E5%BA%8F%E5%88%97/image-20230811164503300.png"                      alt="image-20230811164503300"                ></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubsequence</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> t.length();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">stage</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            stage = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=count;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i) == t.charAt(j))&#123;</span><br><span class="line">                    stage = <span class="literal">true</span>;</span><br><span class="line">                    count = j+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stage == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>algorithm07-dp之股票系列</title>
    <link href="https://kicheng.github.io/2023/08/05/algorithm07-dp%E4%B9%8B%E8%82%A1%E7%A5%A8%E7%B3%BB%E5%88%97/"/>
    <id>https://kicheng.github.io/2023/08/05/algorithm07-dp%E4%B9%8B%E8%82%A1%E7%A5%A8%E7%B3%BB%E5%88%97/</id>
    <published>2023-08-05T03:34:25.000Z</published>
    <updated>2023-08-05T14:24:43.000Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a><a class="link"   href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/" >121. 买卖股票的最佳时机<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm07-dp%E4%B9%8B%E8%82%A1%E7%A5%A8%E7%B3%BB%E5%88%97/image-20230805115618486.png"                      alt="image-20230805115618486"                ></p><p>只能买卖<strong>一次</strong>，所以维护一个历史最低价<code>minprice</code>变量，意为在第i天时，[0, …, i-1]天中的最底价。这是一种动态规划的思想。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minprice</span> <span class="operator">=</span> prices[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxprofit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">            minprice = minprice &lt;= prices[i] ? minprice : prices[i];</span><br><span class="line">            maxprofit = maxprofit &gt;= (prices[i] - minprice) ? maxprofit : (prices[i] - minprice);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxprofit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="122-买卖股票的最佳时机-II"><a href="#122-买卖股票的最佳时机-II" class="headerlink" title="122. 买卖股票的最佳时机 II"></a><a class="link"   href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/" >122. 买卖股票的最佳时机 II<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm07-dp%E4%B9%8B%E8%82%A1%E7%A5%A8%E7%B3%BB%E5%88%97/image-20230805120302626.png"                      alt="image-20230805120302626"                ></p><p>可以买卖任意次数，这里通过二维数组<code>dp[prices.length][2]</code>表示每个状态，<code>dp[i][j]</code> 表示到下标为 <code>i</code> 的这一天，持股状态为 <code>j</code> 时，我们<strong>手上拥有的最大现金数</strong>。<code>dp[][0]</code>表示持有现金，<code>dp[][1]</code>表示持有股票。</p><p>每一天状态可以转移，也可以不动。状态转移用下图表示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm07-dp%E4%B9%8B%E8%82%A1%E7%A5%A8%E7%B3%BB%E5%88%97/image-20230805121048597.png"                      alt="image-20230805121048597"                ></p><p>状态转移方程：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br></pre></td></tr></table></figure></div><p>完整代码如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[prices.length][<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 状态位：dp[][0]表示持有现金  dp[][1]表示持有股票</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[prices.length-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>由于在状态转移方程中我们仅需参考上一位状态，所以可以采用滚动数组的思想进行空间优化：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cash</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">stock</span> <span class="operator">=</span> -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">precash</span> <span class="operator">=</span> cash;</span><br><span class="line">            <span class="type">int</span> <span class="variable">prestock</span> <span class="operator">=</span> stock;</span><br><span class="line">            cash = Math.max(precash, prestock + prices[i]);</span><br><span class="line">            stock = Math.max(prestock, precash - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cash;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="123-买卖股票的最佳时机-III"><a href="#123-买卖股票的最佳时机-III" class="headerlink" title="123. 买卖股票的最佳时机 III"></a><a class="link"   href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/" >123. 买卖股票的最佳时机 III<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm07-dp%E4%B9%8B%E8%82%A1%E7%A5%A8%E7%B3%BB%E5%88%97/image-20230805160417623.png"                      alt="image-20230805160417623"                ></p><p>限定只能买卖<strong>两次</strong>。因此在任意一天结束之后，我们会处于以下五个状态中的一种：</p><p>① 未进行过任何操作；② 只进行过一次买操作；③ 进行了一次买操作和一次卖操作，即完成了一笔交易；④ 在完成了一笔交易的前提下，进行了第二次买操作；⑤ 完成了全部两笔交易。</p><p>由于第一个状态的利润显然为 0，因此我们可以不用将其记录。对于剩下的四个状态，我们分别将它们的最大利润记为<code>buy1</code>, <code>sell1</code>, <code>buy2</code> 以及<code>sell2</code>：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">buy1</span> <span class="operator">=</span> -prices[<span class="number">0</span>];  </span><br><span class="line">        <span class="type">int</span> <span class="variable">sell1</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">buy2</span> <span class="operator">=</span> -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sell2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// dp</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">            buy1 = Math.max(buy1, -prices[i]);  <span class="comment">// 第一次买入的状态</span></span><br><span class="line">            sell1 = Math.max(sell1, buy1 + prices[i]);  <span class="comment">// 第一次卖出的状态</span></span><br><span class="line">            buy2 = Math.max(buy2, sell1 - prices[i]);  <span class="comment">// 第二次买入的状态</span></span><br><span class="line">            sell2 = Math.max(sell2, buy2 + prices[i]);  <span class="comment">// 第二次卖出的状态</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sell2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>下面这种解法仅作为一种<strong>思路参考</strong>，只能限定于2次买卖的情况，不具有股票问题的普适性，而且个人感觉该思路比较别扭。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp1 = <span class="keyword">new</span> <span class="title class_">int</span>[prices.length];  <span class="comment">// 表示第i天以及之前区间所获得的最大利润</span></span><br><span class="line">        <span class="type">int</span>[] dp2 = <span class="keyword">new</span> <span class="title class_">int</span>[prices.length];  <span class="comment">// 表示第i天开始到最后一天所获得的最大利润</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">minVal</span> <span class="operator">=</span> prices[<span class="number">0</span>], maxVal = prices[prices.length-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        dp1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;dp1.length;i++)&#123;</span><br><span class="line">            dp1[i] = Math.max(dp1[i-<span class="number">1</span>], prices[i]-minVal);</span><br><span class="line">            minVal = prices[i] &lt; minVal ? prices[i] : minVal;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dp2[dp2.length-<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=dp2.length-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            dp2[i] = Math.max(dp2[i+<span class="number">1</span>], maxVal-prices[i]);</span><br><span class="line">            maxVal = prices[i] &gt; maxVal ? prices[i] : maxVal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">            max = Math.max(dp1[i] + dp2[i], max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="188-买卖股票的最佳时机-IV"><a href="#188-买卖股票的最佳时机-IV" class="headerlink" title="188. 买卖股票的最佳时机 IV"></a><a class="link"   href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/" >188. 买卖股票的最佳时机 IV<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm07-dp%E4%B9%8B%E8%82%A1%E7%A5%A8%E7%B3%BB%E5%88%97/image-20230805163734130.png"                      alt="image-20230805163734130"                ></p><p>思路与 <strong>买卖股票的最佳时机 III</strong> 完全一致！</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] buy = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="type">int</span>[] sell = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        Arrays.fill(buy, -prices[<span class="number">0</span>]);</span><br><span class="line">        Arrays.fill(sell, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// dp</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">            buy[<span class="number">0</span>] = Math.max(buy[<span class="number">0</span>], -prices[i]);  </span><br><span class="line">            sell[<span class="number">0</span>] = Math.max(sell[<span class="number">0</span>], buy[<span class="number">0</span>] + prices[i]);  </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;k;j++)&#123;</span><br><span class="line">                buy[j] = Math.max(buy[j], sell[j-<span class="number">1</span>] - prices[i]);</span><br><span class="line">                sell[j] = Math.max(sell[j], buy[j] + prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sell[k-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;121-买卖股票的最佳时机&quot;&gt;&lt;a href=&quot;#121-买卖股票的最佳时机&quot; class=&quot;headerlink&quot; title=&quot;121. 买卖股票的最佳时机&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot;   hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>algorithm06-回溯算法</title>
    <link href="https://kicheng.github.io/2023/07/21/algorithm06-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    <id>https://kicheng.github.io/2023/07/21/algorithm06-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</id>
    <published>2023-07-21T04:03:09.000Z</published>
    <updated>2023-08-29T07:17:46.000Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm06-回溯算法/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303231303231393139323035303636362e706e67.png"                      alt="回溯算法大纲" style="zoom: 50%;"                 ><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><h3 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a><a class="link"   href="https://leetcode.cn/problems/combinations/" >77. 组合<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm06-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/image-20230815163034834.png"                      alt="image-20230815163034834"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm06-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/image-20230721155109453.png"                      alt="image-20230721155109453"                ></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        dfs(n, k, <span class="number">1</span>, path);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> begin, Deque&lt;Integer&gt; path)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size() == k)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=begin;i&lt;=n;i++)&#123;</span><br><span class="line">            path.addLast(i);</span><br><span class="line">            dfs(n, k, i+<span class="number">1</span>, path);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>剪枝：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        dfs(n, k, <span class="number">1</span>, path);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> begin, Deque&lt;Integer&gt; path)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size() == k)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=begin;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="comment">// 如果当前可选的数 小于 path剩余的size，则剪枝</span></span><br><span class="line">            <span class="keyword">if</span>(k - path.size() - <span class="number">1</span> &gt; n - i)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.addLast(i);</span><br><span class="line">            dfs(n, k, i+<span class="number">1</span>, path);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a><a class="link"   href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/" >17. 电话号码的字母组合<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm06-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/image-20230815163058336.png"                      alt="image-20230815163058336"                ></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildMap</span><span class="params">()</span>&#123;</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;def&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;ghi&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">        map.put(<span class="number">6</span>, <span class="string">&quot;mno&quot;</span>);</span><br><span class="line">        map.put(<span class="number">7</span>, <span class="string">&quot;pqrs&quot;</span>);</span><br><span class="line">        map.put(<span class="number">8</span>, <span class="string">&quot;tuv&quot;</span>);</span><br><span class="line">        map.put(<span class="number">9</span>, <span class="string">&quot;wxyz&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(digits.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        buildMap();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        dfs(digits, <span class="number">0</span>, path);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(String digits, <span class="type">int</span> depth, String path)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(depth == digits.length())&#123;</span><br><span class="line">            res.add(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> digits.charAt(depth);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str_ch</span> <span class="operator">=</span> map.get(ch - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str_ch.length();i++)&#123;</span><br><span class="line">            path += str_ch.charAt(i);</span><br><span class="line">            dfs(digits, depth+<span class="number">1</span>, path);</span><br><span class="line">            path = path.substring(<span class="number">0</span>, path.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a><a class="link"   href="https://leetcode.cn/problems/combination-sum/" >39. 组合总和<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm06-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/image-20230815163405787.png"                      alt="image-20230815163405787"                ></p><p>组合类回溯问题使用 <code>begin</code> 状态位限制重复出现的答案：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs(candidates, target - candidates[i], i, path);</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        dfs(candidates, target, <span class="number">0</span>, path);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> begin, Deque&lt;Integer&gt; path)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=begin;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target &lt; candidates[i])&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.addLast(candidates[i]);</span><br><span class="line">            dfs(candidates, target - candidates[i], i, path);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="40-组合总和-II"><a href="#40-组合总和-II" class="headerlink" title="40. 组合总和 II"></a><a class="link"   href="https://leetcode.cn/problems/combination-sum-ii/" >40. 组合总和 II<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm06-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/image-20230817104851768.png"                      alt="image-20230817104851768"                ></p><p>和39题的区别有二：① <code>candidates[i]</code>在每个组合中只能使用一次； ② <code>candidates</code>数组在本题中包含了重复元素。</p><p>① 解决方案：纵向限制</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs(candidates, target - candidates[i], i+<span class="number">1</span>, path);</span><br></pre></td></tr></table></figure></div><p>② 解决方案：横向限制</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i-<span class="number">1</span> &gt;= begin &amp;&amp; candidates[i] == candidates[i-<span class="number">1</span>])&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        dfs(candidates, target, <span class="number">0</span>, path);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> begin, Deque&lt;Integer&gt; path)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=begin;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target &lt; candidates[i])&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i-<span class="number">1</span> &gt;= begin &amp;&amp; candidates[i] == candidates[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.addLast(candidates[i]);</span><br><span class="line">            dfs(candidates, target - candidates[i], i+<span class="number">1</span>, path);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="216-组合总和-III"><a href="#216-组合总和-III" class="headerlink" title="216. 组合总和 III"></a><a class="link"   href="https://leetcode.cn/problems/combination-sum-iii/" >216. 组合总和 III<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm06-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/image-20230817111908237.png"                      alt="image-20230817111908237"                ></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        dfs(n, k, <span class="number">1</span>, path);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span> k, <span class="type">int</span> begin, Deque&lt;Integer&gt; path)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size() == k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target == <span class="number">0</span>)&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=begin;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">          <span class="comment">// ----可剪枝----</span></span><br><span class="line">            path.addLast(i);</span><br><span class="line">            dfs(target - i, k, i + <span class="number">1</span>, path);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>剪枝条件：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(k - path.size() &gt; <span class="number">9</span> - i + <span class="number">1</span>)&#123;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h2><h3 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131. 分割回文串"></a><a class="link"   href="https://leetcode.cn/problems/palindrome-partitioning/" >131. 分割回文串<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm06-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/image-20230829151735071.png"                      alt="image-20230829151735071"                ></p><p>93</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>algorithm05-二叉树</title>
    <link href="https://kicheng.github.io/2023/07/18/algorithm05-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://kicheng.github.io/2023/07/18/algorithm05-%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2023-07-18T09:07:58.000Z</published>
    <updated>2023-07-23T07:50:20.000Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="二叉树的遍历方式"><a href="#二叉树的遍历方式" class="headerlink" title="二叉树的遍历方式"></a>二叉树的遍历方式</h2><h3 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h3><p><strong>递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入栈中</strong>，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，所以这就是递归为什么可以返回上一层位置的原因。</p><ul><li><p>前序遍历</p><p>按照访问<strong>根节点→左子树→右子树</strong>的方式遍历这棵树，而在访问左子树或者右子树的时候，我们按照同样的方式遍历，直到遍历完整棵树。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode node, List&lt;Integer&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(node.val);</span><br><span class="line">        traversal(node.left, res);</span><br><span class="line">        traversal(node.right, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>中序遍历</p><p>按照访问<strong>左子树→根节点→右子树</strong>的方式遍历这棵树。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode node, List&lt;Integer&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        traversal(node.left, res);</span><br><span class="line">        res.add(node.val);</span><br><span class="line">        traversal(node.right, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>后序遍历</p><p>按照访问<strong>左子树→右子树→根节点</strong>的方式遍历这棵树。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode node, List&lt;Integer&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        traversal(node.left, res);</span><br><span class="line">        traversal(node.right, res);</span><br><span class="line">        res.add(node.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h3><p>递归的时候隐式地维护了一个栈，而我们在迭代的时候需要显式地将这个栈模拟出来。相较于递归方法，迭代遍历的代码更难理解一些，但是本质都是相同的。</p><ul><li><p>前序遍历</p><p>首先我们应该创建一个 Stack 用来存放节点，首先我们想要打印根节点的数据，此时 Stack 里面的内容为空，所以我们优先将头结点加入 Stack，然后打印。之后我们应该先打印左子树，然后右子树。所以先加入 Stack 的就是右子树，然后左子树。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm05-二叉树/image-20230719140417818.png"                      alt="image-20230719140417818" style="zoom:87%;"                 ><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            res.add(root.val);</span><br><span class="line">            <span class="comment">// 一定要先压入右子树，再压入左子树，注意Stack的先进后出特性</span></span><br><span class="line">            <span class="keyword">if</span>(root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(root.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(root.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(root.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>中序遍历</p><p>按 左子树→根节点→右子树 的顺序输出节点。尽可能的将这个节点的左子树压入 Stack，此时栈顶的元素是最左侧的元素（也就是最左侧的一个节点），并且在寻找的过程中记录了来源，才能返回上层，同时在返回上层的时候已经处理完毕左子树了。如果有右节点，其也要进行中序遍历。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm05-%E4%BA%8C%E5%8F%89%E6%A0%91/image-20230719155425374.png"                      alt="image-20230719155425374"                ></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(root != <span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(root != <span class="literal">null</span>)&#123;  <span class="comment">// 将这个节点的左子树压入Stack</span></span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// 出内循环是root一定为null，如果node没有右子树就会回退一层</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            res.add(node.val);</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;  <span class="comment">// 如果有右节点，其也要进行中序遍历</span></span><br><span class="line">                root = node.right;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p> 后序遍历</p></li></ul><p>  后序遍历和中序一样，都要先找到二叉树最左侧的节点，但是由于后序遍历的顺序是 左子树→右子树→根节点，所以和中序还略有不同——找到最左侧节点后不能马上输出，要先判断该节点是否有右子树：如果有右子树，要将右子树的根节点重复执行前面的步骤；如果没有右子树，则输出该节点并回退一层继续寻找右子树。需要注意的是，由于在<strong>压出右子树后进行回退时</strong>根节点（左右子树的根，严格意义上的中间节点）仍在栈中，所以要记录右子树节点为<code>prev</code>才能将根节点压出（<strong>压出节点的条件是该节点没有右子树或者右子树已经输出完</strong>），否则会造成死循环。</p>  <div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(root != <span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(root != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行内循环后root取为最左侧节点，但不能马上将其输出，要先考虑该节点是否有优先级更高的右子树</span></span><br><span class="line">            root = stack.peek();</span><br><span class="line">            <span class="comment">// 压出节点的条件是该节点 没有右子树 或者 右子树已经输出完</span></span><br><span class="line">            <span class="keyword">if</span>(root.right == <span class="literal">null</span> || root.right == prev)&#123;  </span><br><span class="line">                res.add(root.val);</span><br><span class="line">                stack.pop();</span><br><span class="line">                prev = root;  <span class="comment">// 记录刚输出的节点</span></span><br><span class="line">                root = <span class="literal">null</span>;  <span class="comment">// 回退上层的标志</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h3><p>层序遍历就是把二叉树分层，然后每一层从左到右遍历：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm05-二叉树/image-20230719164248920.png"                      alt="image-20230719164248920" style="zoom:67%;"                 ><p>这个遍历顺序和 BFS 是一样的，我们可以直接用 BFS 得出层序遍历结果。BFS ，广度优先搜索，遍历使用<strong>队列</strong>数据结构。而这里的层序遍历，就是 BFS 的应用场景之一。在层序遍历中，要记录每一层节点的个数，然后通过内置for循环一口气将这一层的节点处理完。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">null</span>)&#123;</span><br><span class="line">            queue.addLast(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; r = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> queue.size();  <span class="comment">// 记录每一层节点的个数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.removeFirst();</span><br><span class="line">                r.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.addLast(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.addLast(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>BFS 广度优先搜索，需要解决以下三类问题：<ul><li>BFS遍历</li><li>层序遍历</li><li>最短路径</li></ul></li></ul><p>最后来讲一下BFS 的最短路径问题。BFS 属于图算法，这里就先简单讲一下。在一棵树中，一个结点到另一个结点的路径是唯一的，但在图中，结点之间可能有多条路径，其中哪条路最近呢？这一类问题称为最短路径问题。在二叉树中，BFS 可以实现一层一层的遍历。在图中同样如此。从源点出发，BFS 首先遍历到第一层结点，到源点的距离为 1，然后遍历到第二层结点，到源点的距离为 2…… 可以看到，用 BFS 的话，距离源点更近的点会先被遍历到，这样就能找到到某个点的最短路径了。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm05-二叉树/image-20230720103507226.png"                      alt="image-20230720103507226" style="zoom:77%;"                 ><h2 id="二叉树的属性"><a href="#二叉树的属性" class="headerlink" title="二叉树的属性"></a>二叉树的属性</h2><h3 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h3><p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm05-二叉树/image-20230720104416605.png"                      alt="image-20230720104416605" style="zoom:87%;"                 ><p>这是一道很经典的二叉树问题。显然，我们从根节点开始，递归地对树进行遍历，并从叶子节点先开始翻转。如果当前遍历到的节点 root 的左右两棵子树都已经翻转，那么我们只需要交换两棵子树的位置，即可完成以 root 为根节点的整棵子树的翻转。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        invert(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invert</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            invert(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            invert(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>看过题解后，发现可以将递归程序写的更优雅：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> invertTree(root.left);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> invertTree(root.right);</span><br><span class="line">        root.left = right;</span><br><span class="line">        root.right = left;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h3><p>给定一个二叉树，检查它是否是镜像对称的。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm05-二叉树/image-20230720111019386.png"                      alt="image-20230720111019386" style="zoom:77%;"                 ><p><strong>递归方法</strong><font color="blue">（重点掌握递归法即可）</font></p><p>对称二叉树的递归思路是，要保证当前两节点的值相等，并且递归调用左右节点另其镜像相等，只要有一处镜像不对称，那就输出<code>false</code>。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">// 树中节点数目在范围 [1, 1000] 内</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> check(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(TreeNode p, TreeNode q)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">null</span> &amp;&amp; q == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">null</span> || q == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.val == q.val &amp;&amp; check(p.left, q.right) &amp;&amp; check(p.right, q.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>迭代方法</strong></p><p>手动维护一个队列结构，根据层序遍历的思想对每一层进行检验：每次拿出的两个元素， 就是镜像位置的元素，进行比较即可。<code>Deque</code>接口的<code>offer</code>方法不会报空指针异常（此方法通常优于<code>add</code>仅通过抛出异常来插入元素失败的方法），可酌情选择使用。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right ==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(root.left == <span class="literal">null</span> || root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> check(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(TreeNode p, TreeNode q)</span>&#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.addLast(p);</span><br><span class="line">        queue.addLast(q);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">if</span>(num % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num/<span class="number">2</span>;i++)&#123;</span><br><span class="line">                p = queue.removeFirst();</span><br><span class="line">                q = queue.removeFirst();</span><br><span class="line">                <span class="keyword">if</span>(p == <span class="literal">null</span> &amp;&amp; q == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(p == <span class="literal">null</span> || q == <span class="literal">null</span> || p.val != q.val)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                queue.offer(p.left);</span><br><span class="line">                queue.offer(q.right);</span><br><span class="line">                queue.offer(p.right);</span><br><span class="line">                queue.offer(q.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h3><p>给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm05-二叉树/image-20230720152910048.png"                      alt="image-20230720152910048" style="zoom:87%;"                 ><p><strong>广度优先搜索BFS</strong></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">// 层序遍历求深度</span></span><br><span class="line">        Deque&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.addLast(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.removeFirst();</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.addLast(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.addLast(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>深度优先搜索DFS</strong></p><p>如果我们知道了左子树和右子树的最大深度 l 和 r，那么该二叉树的最大深度即为<code>max(l,r)+1</code>。而左子树和右子树的最大深度又可以以同样的方式进行计算。因此我们可以用 深度优先搜索 的方法来计算二叉树的最大深度。具体而言，在计算当前二叉树的最大深度时，可以先递归计算出其左子树和右子树的最大深度，然后在 O(1) 算出当前二叉树的最大深度。递归在访问到空节点时退出。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> maxDepth(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightDepth</span> <span class="operator">=</span> maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="二叉树的最小深度"><a href="#二叉树的最小深度" class="headerlink" title="二叉树的最小深度"></a>二叉树的最小深度</h3><p>给定一个二叉树，找出其最小深度。最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm05-二叉树/image-20230720154135014.png"                      alt="image-20230720154135014" style="zoom:77%;"                 ><p><strong>广度优先搜索BFS</strong></p><p>当我们找到一个叶子节点时，直接返回这个叶子节点的深度，广度优先搜索的性质保证了最先搜索到的叶子节点的深度一定最小。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.addLast(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.removeFirst();</span><br><span class="line">                <span class="keyword">if</span>(node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> ++count;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.addLast(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.addLast(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>深度优先搜索DFS</strong></p><p>对于每一个非叶子节点，我们只需要分别计算其左右子树的最小叶子节点深度。这样就将一个大问题转化为了小问题，可以递归地解决该问题。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 终止条件是叶子节点</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            min = Math.min(minDepth(root.left), min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            min = Math.min(minDepth(root.right), min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;二叉树的遍历方式&quot;&gt;&lt;a href=&quot;#二叉树的遍历方式&quot; class=&quot;headerlink&quot; title=&quot;二叉树的遍历方式&quot;&gt;&lt;/a&gt;二叉树的遍历方式&lt;/h2&gt;&lt;h3 id=&quot;递归遍历&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="算法" scheme="https://kicheng.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Java集合</title>
    <link href="https://kicheng.github.io/2023/07/17/Java%E9%9B%86%E5%90%88/"/>
    <id>https://kicheng.github.io/2023/07/17/Java%E9%9B%86%E5%90%88/</id>
    <published>2023-07-17T13:55:33.000Z</published>
    <updated>2023-07-18T09:10:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>复习一下Java的集合：分为单列集合和双列集合，单列集合有List和Set两类，双列集合是Map集合。<code>List</code>接口的实现类有ArrayList, LinkedList；Set和Map可以配合着学，主要有HashSet–HashMap, LinkedHashSet–LinkedHashMap, TreeSet–TreeMap三组。</p><span id="more"></span><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718120825421.png"                      alt="image-20230718120825421" style="zoom:67%;"                 ><h2 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718120851741.png"                      alt="image-20230718120851741" style="zoom:67%;"                 ><p>总结一下Collection单列集合的常用功能有哪些，<code>ArrayList</code>、<code>LinkedList</code>、<code>HashSet</code>、<code>LinkedHashSet</code>、<code>TreeSet</code>集合都可以调用下面的方法：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718121036160.png"                      alt="image-20230718121036160" style="zoom:77%;"                 ><p><strong>Collection集合的遍历方式：</strong></p><ul><li><p>迭代器遍历集合</p><ul><li>当调用<code>iterator()</code>方法获取迭代器时，当前指向第一个元素；</li><li><code>hasNext()</code>方法则判断这个位置是否有元素，如果有则返回<code>true</code>，进入循环；</li><li>调用<code>next()</code>方法获取元素，并将当月元素指向下一个位置；</li><li>等下次循环时，则获取下一个元素，依此类推。</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> it.next();</span><br><span class="line">    System.out.println(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>增强for遍历集合</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String context: list)&#123;</span><br><span class="line">    System.out.println(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p><code>forEach</code>遍历集合</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*  ======Lambda表达式简化=======  */</span></span><br><span class="line">list.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure></div></li></ul><p><strong>当往集合中存对象时，实际上存储的是对象的地址值：</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718122238215.png"                      alt="image-20230718122238215"                ></p><h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718122400682.png"                      alt="image-20230718122400682" style="zoom:77%;"                 ><p><strong>List集合的常用方法：</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718122435550.png"                      alt="image-20230718122435550" style="zoom:67%;"                 ><p>因为List集合有索引，所以可以通过普通for循环的方式遍历List集合。</p><h3 id="Arraylist集合"><a href="#Arraylist集合" class="headerlink" title="Arraylist集合"></a>Arraylist集合</h3><p><code>ArrayList</code>集合底层是基于数组结构实现的，也就是说当你往集合容器中存储元素时，底层本质上是往数组中存储元素。 特点如下：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718122710834.png"                      alt="image-20230718122710834" style="zoom:77%;"                 ><p>我们知道数组的长度是固定的，但是集合的长度是可变的，这是怎么做到的呢？</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718122825047.png"                      alt="image-20230718122825047" style="zoom:77%;"                 ><p>数组扩容，并不是在原数组上扩容（原数组是不可以扩容的），底层是创建一个新数组，然后把原数组中的元素全部复制到新数组中去。</p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>LinkedList底层是<strong>双向链表</strong>结构。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718123113316.png"                      alt="image-20230718123113316"                ></p><p>所以相对于<code>ArrayList</code>新增了一些可以针对头尾进行操作的方法，如下图示所示：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718123129380.png"                      alt="image-20230718123129380" style="zoom:77%;"                 ><p><strong>由于双向链表的结构，可以用它来设计栈、队列：</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718123341697.png"                      alt="image-20230718123341697" style="zoom:50%;"                 ><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718123356578.png"                      alt="image-20230718123356578" style="zoom:50%;"                 ><h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230717220114816.png"                      alt="image-20230717220114816" style="zoom:77%;"                 ><h3 id="HashSet集合"><a href="#HashSet集合" class="headerlink" title="HashSet集合"></a>HashSet集合</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230717221646999.png"                      alt="image-20230717221646999" style="zoom: 72%;"                 ><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230717221809732.png"                      alt="image-20230717221809732" style="zoom:72%;"                 ><p><strong>HashSet去重原理</strong></p><p>前面我们学习了HashSet存储元素的原理，依赖于两个方法：一个是<code>hashCode</code>方法用来确定在底层数组中存储的位置，另一个是用<code>equals</code>方法判断新添加的元素是否和集合中已有的元素相同。</p><p>要想保证在HashSet集合中没有重复元素，我们需要重写对象类的<code>hashCode</code>和<code>equals</code>方法。比如以下面的<code>User</code>类为例，假设把<code>User</code>类的对象作为HashSet集合的元素：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;User&gt; hs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;ljc&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;ljc&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">hs.add(u1);</span><br><span class="line">hs.add(u2);</span><br><span class="line">System.out.println(hs);  <span class="comment">// [User&#123;username = ljc, password = 123&#125;, User&#123;username = ljc, password = 123&#125;]</span></span><br></pre></td></tr></table></figure></div><p>我们发现结果和我们想象的不一样，HashSet不是可以去重吗？实际上，通常两个不同对象的HashCode值是不同的，导致元素挂在了不同的数组位置上。要解决这个问题要重写对象类的<code>hashCode</code>和<code>equals</code>方法——直接generate自动生成：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) o;</span><br><span class="line">    <span class="keyword">return</span> Objects.equals(username, user.username) &amp;&amp; Objects.equals(password, user.password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(username, password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="LinkedHashSet集合"><a href="#LinkedHashSet集合" class="headerlink" title="LinkedHashSet集合"></a>LinkedHashSet集合</h3><p><code>LinkedHashSet</code>类是<code>HashSet</code>的子类。<code>LinkedHashSet</code>它底层采用的是也是哈希表结构，只不过额外新增了一个<strong>双向链表</strong>来维护元素的存取顺序。</p><p>特点：相比<code>HashSet</code>，它记录了元素存入的顺序。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230717225009568.png"                      alt="image-20230717225009568" style="zoom:67%;"                 ><h3 id="TreeSet集合"><a href="#TreeSet集合" class="headerlink" title="TreeSet集合"></a>TreeSet集合</h3><p>TreeSet集合的特点是可以对元素进行排序（底层是<strong>红黑树</strong>实现的），但是<strong>必须指定元素的排序规则</strong>。如果往集合中存储String类型的元素，或者Integer类型的元素，它们本身就具备排序规则，所以直接就可以排序。如果往TreeSet集合中存储自定义类型的元素，比如说<code>User</code>类型，则需要我们自己指定排序规则，否则会出现异常，原因是TreeSet不知道按照什么条件对自定义对象来排序：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230717225542069.png"                      alt="image-20230717225542069"                ></p><p>我们想要告诉TreeSet集合按照指定的规则排序，有两种办法：</p><p>第一种：在创建TreeSet集合时，通过构造方法传递<code>Compartor</code>比较器对象；</p><p>第二种：让元素的类实现<code>Comparable</code>接口，重写<code>compareTo</code>方法；</p><ul><li><p>第一种：创建集合时传递比较器对象</p><p><code>o1-o2</code>是升序排序，<code>o2-o1</code>是降序排序。</p><blockquote><p>Double类型用<code>Double.compare(d1, d2)</code>比较，String类型用<code>s1.compareTo(s2)</code>方法比较。</p></blockquote><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;User&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;User&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(User o1, User o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getUsername().compareTo(o2.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div></li><li><p>第二种：实体类实现<code>Comparable</code>接口，重写<code>compareTo</code>方法</p><p><code>this</code>：表示将要添加进去的Student对象；<code>o</code>: 表示集合中已有的Student对象。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;User&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"> <span class="comment">/* ...... */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(User o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.username.compareTo(o.username);  <span class="comment">// 升序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><p>自然排序<code>Comparable</code>是类在创建的时候就规定了类的比较的特性，而比较器<code>Comparator</code>是在具体的应用过程中我们根据需求创建一个工具类来完成比较，相比之下比较器的使用更加灵活（有的时候需要对同一对象进行多种不同方式的排序；或者按照特定的需求比较字符串但无法重写<code>String</code>类中的<code>compareTo</code>方法），不会改变这个类本身，降低了耦合度。</p><h3 id="Collection集合总结"><a href="#Collection集合总结" class="headerlink" title="Collection集合总结"></a>Collection集合总结</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718101153256.png"                      alt="image-20230718101153256" style="zoom:67%;"                 ><h3 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h3><p><font color="red">在使用迭代器遍历集合时，可能存在并发修改异常：</font></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  list.add(<span class="string">&quot;王麻子&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;小李子&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;李爱花&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;张全蛋&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;晓李&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;李玉刚&quot;</span>);</span><br><span class="line">  System.out.println(list); <span class="comment">// [王麻子, 小李子, 李爱花, 张全蛋, 晓李, 李玉刚]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//需求：找出集合中带&quot;李&quot;字的姓名，并从集合中删除</span></span><br><span class="line">  Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line">  <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">      <span class="keyword">if</span>(name.contains(<span class="string">&quot;李&quot;</span>))&#123;</span><br><span class="line">          list.remove(name);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(list);</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718101929828.png"                      alt="image-20230718101929828"                ></p><p>这是因为迭代器遍历机制，规定<strong>迭代器遍历集合的同时，不允许集合自己去增删元素</strong>。</p><p>增强for循环遍历方式，是在内部调用迭代器进行遍历，所以也会出现并发修改异常：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String name: list)&#123;</span><br><span class="line">    <span class="keyword">if</span>(name.contains(<span class="string">&quot;李&quot;</span>))&#123;</span><br><span class="line">        list.remove(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure></div><p>简单for循环遍历方式，不会出发迭代器的并发修改异常，但会造成结果出错：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">    <span class="keyword">if</span>(name.contains(<span class="string">&quot;李&quot;</span>))&#123;</span><br><span class="line">        list.remove(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);  <span class="comment">// [王麻子, 李爱花, 张全蛋, 李玉刚]</span></span><br></pre></td></tr></table></figure></div><p><code>[王麻子, 小李子, 李爱花, 张全蛋, 晓李, 李玉刚]</code>，以上述list集合为例，当<code>i=1</code>时<code>remove</code>了“小李子”元素，这时候<code>i=1</code>的元素变成了“李爱花”，而循环执行了<code>i++</code>，该元素就被跳过去了。解决方案是：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">        <span class="keyword">if</span>(name.contains(<span class="string">&quot;李&quot;</span>))&#123;</span><br><span class="line">            list.remove(name);</span><br><span class="line">            i--;  <span class="comment">// 因为普通for循环没有异常出现，所以在逻辑上将每次remove元素后的索引i--即可</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>而迭代器遍历解决并发修改异常的方法是，使用迭代器的修改元素方法：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> it.next();</span><br><span class="line">    <span class="keyword">if</span>(name.contains(<span class="string">&quot;李&quot;</span>))&#123;</span><br><span class="line">        it.remove();  <span class="comment">// 当前迭代器指向谁，就删除谁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure></div><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><p><strong>可变参数</strong></p><ul><li><p>可变参数是一种特殊的形式参数，定义在方法、构造器的形参列表处，它可以让方法接收多个同类型的实际参数。</p></li><li><p>可变参数在方法内部，<strong>本质上是一个数组</strong>。</p></li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    test();</span><br><span class="line">    test(<span class="number">1</span>);</span><br><span class="line">    test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>...nums)</span>&#123;</span><br><span class="line">    System.out.println(Arrays.toString(nums));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>一个形参列表中，只能有一个可变参数；否则会报错。</li><li>形参列表中如果多个参数，可变参数需要写在最后；否则会报错。</li></ul><p><strong>Collections工具类</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718105406211.png"                      alt="image-20230718105406211"                ></p><p>往集合中存储的元素要么是Stirng类型，要么是Integer类型，他们本来就有一种自然顺序所以可以直接排序。但是如果我们往List集合中存储实体类对象，这个时候想要对List集合进行排序自定义比较规则的。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;User&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(User o1, User o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getPassword().compareTo(o2.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><p>双列集合，就是说集合中的元素是一对一对的。Map集合中的每一个元素是以<code>key=value</code>的形式存在的，一个<code>key=value</code>就称之为一个键值对，而且在 Java 中有一个类叫<code>Entry</code>类，Entry的对象用来表示键值对对象。</p><p>Map集合有如下的特点：<strong>键不能重复，值可以重复，每一个键只能找到自己对应的值。</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718111534965.png"                      alt="image-20230718111534965" style="zoom:77%;"                 ><h3 id="Map集合常用方法"><a href="#Map集合常用方法" class="headerlink" title="Map集合常用方法"></a>Map集合常用方法</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718112151598.png"                      alt="image-20230718112151598" style="zoom:87%;"                 ><h3 id="Map集合遍历方法"><a href="#Map集合遍历方法" class="headerlink" title="Map集合遍历方法"></a>Map集合遍历方法</h3><ul><li><p>方式一</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Double&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;蜘蛛精&quot;</span>, <span class="number">162.5</span>);</span><br><span class="line">map.put(<span class="string">&quot;蜘蛛精&quot;</span>, <span class="number">169.8</span>);</span><br><span class="line">map.put(<span class="string">&quot;紫霞&quot;</span>, <span class="number">165.8</span>);</span><br><span class="line">map.put(<span class="string">&quot;至尊宝&quot;</span>, <span class="number">169.5</span>);</span><br><span class="line">map.put(<span class="string">&quot;牛魔王&quot;</span>, <span class="number">183.6</span>);</span><br><span class="line">  </span><br><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line"><span class="keyword">for</span>(String key: keys)&#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">    System.out.println(key + <span class="string">&quot;---&gt;&quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>方式二</p><p>Map集合是用来存储键值对的，而每一个键值对实际上是一个<code>Entry</code>对象。可以直接获取每一个<code>Entry</code>对象，把<code>Entry</code>存储扫Set集合中去，再通过<code>Entry</code>对象获取键和值。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718112943729.png"                      alt="image-20230718112943729"                ></p><p>Map集合提供<code>entrySet</code>方法，把Map集合转换成键值对类型的Set集合：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Map.Entry&lt;String, Double&gt;&gt; entries = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Double&gt; entry: entries)&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">    <span class="type">Double</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">    System.out.println(key + <span class="string">&quot;---&gt;&quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>方式三</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718113224411.png"                      alt="image-20230718113224411"                ></p></li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map.forEach(<span class="keyword">new</span> <span class="title class_">BiConsumer</span>&lt;String, Double&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String k, Double v)</span> &#123;</span><br><span class="line">        System.out.println(k + <span class="string">&quot;---&gt;&quot;</span> + v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p><code>HashMap</code>集合的特点是由键决定的： <strong>它的键是无序、不能重复，而且没有索引的</strong>。在各种Map集合中也是用得最多的一种集合。</p><p><code>HashMap</code>底层原理和<code>HashSet</code>是一样的。因为我们往<code>HashSet</code>集合中添加元素时，实际上是把元素作为<code>key</code>添加到了<code>HashMap</code>集合中。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718114026273.png"                      alt="image-20230718114026273"                ></p><p><code>HashMap</code>和<code>HashSet</code>是一样的，底层是哈希表结构，哈希表是一种增删改查性能相对都较好的数据结构。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718114458631.png"                      alt="image-20230718114458631" style="zoom:77%;"                 ><ul><li><p>往HashMap集合中键值对数据时，底层步骤如下：</p><ul><li>第1步：当你第一次往<code>HashMap</code>集合中存储键值对时，底层会创建一个<strong>长度为16的数组</strong>；</li><li>第2步：把键然后将键和值封装成一个对象，叫做<code>Entry</code>对象；</li><li>第3步：再根据<code>Entry</code>对象的键计算<code>hashCode</code>值（和值无关）；</li><li>第4步：利用<code>hashCode</code>值和数组的长度做一个类似求余数的算法，会得到一个索引位置；</li><li>第5步：判断这个索引的位置是否为<code>null</code>：如果为<code>null</code>，就直接将这个<code>Entry</code>对象存储到这个索引位置；如果不为<code>null</code>，则还需要进行第6步的判断；</li><li>第6步：继续调用equals方法判断两个对象键是否相同：如果<code>equals</code>返回<code>false</code>，则以链表的形式往下挂；如果<code>equals</code>方法<code>true</code>，则认为键重复，此时新的键值对会替换就的键值对。</li></ul></li><li><p>HashMap底层需要注意这几点：</p><ul><li>底层数组默认长度为16，如果数组中有超过12个位置已经存储了元素，则会对数组进行扩容<strong>2倍</strong>。数组扩容的加载因子是 0.75 ，意思是：<code>16*0.75=12</code>； </li><li>数组的同一个索引位置有多个元素、并且在8个元素以内（包括8），则以链表的形式存储（JDK8以后版本链表采用尾插法）。</li><li>数组的同一个索引位置有多个元素、并且超过了8个，则以红黑树形式存储。       </li></ul></li><li><p>决定键是否重复与两个方法有关，一个是<code>hashCode</code>方法、一个是<code>equals</code>方法。有两个键计算得到的<code>hashCode</code>值相同，并且两个键使用<code>equals</code>比较为<code>true</code>，就认为键重复。所以，往Map集合中存储自定义对象作为键，为了保证键的唯一性，我们应该重写这两个方法。</p></li></ul><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p><code>LinkedHashMap</code>集合的特点也是由键决定的：<strong>有序的、不重复、无索引</strong>。<font color="blue">这里的“有序”是只存入的顺序。</font><code>LinkedHashMap</code>的底层原理，和<code>LinkedHashSet</code>底层原理是一样的，底层多个一个双向链表来维护键的存储顺序。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230718115713991.png"                      alt="image-20230718115713991" style="zoom:77%;"                 ><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p><code>TreeMap</code>集合的特点也是由键决定的，默认按照键的升序排列，键不重复，也是无索引的。<code>TreeMap</code>集合的底层原理和<code>TreeSet</code>也是一样的，底层都是<strong>红黑树</strong>实现的，所以可以对键进行排序。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;复习一下Java的集合：分为单列集合和双列集合，单列集合有List和Set两类，双列集合是Map集合。&lt;code&gt;List&lt;/code&gt;接口的实现类有ArrayList, LinkedList；Set和Map可以配合着学，主要有HashSet–HashMap, LinkedHashSet–LinkedHashMap, TreeSet–TreeMap三组。&lt;/p&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://kicheng.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Java的深浅拷贝</title>
    <link href="https://kicheng.github.io/2023/07/14/Java%E7%9A%84%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://kicheng.github.io/2023/07/14/Java%E7%9A%84%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2023-07-14T14:33:27.000Z</published>
    <updated>2023-07-14T14:37:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在刷算法题的时候忘记了引用数据类型深浅拷贝的问题，正好借此机会来复习一下。</p><span id="more"></span><h2 id="拷贝的分类"><a href="#拷贝的分类" class="headerlink" title="拷贝的分类"></a>拷贝的分类</h2><ul><li><p>引用拷贝</p><p>没有创建新的内存空间，只是复制了一个引用变量指向了堆空间中相同的地址。</p></li><li><p>对象拷贝</p><p>创建对象的一个副本，创建了新的对象指向不同的地址空间。而深浅拷贝的区别在于<strong>对象里面的属性拷贝方式</strong>。</p><ul><li><p>浅拷贝</p><p>属性就是引用拷贝，指向同一地址。</p></li><li><p>深拷贝</p><p>属性也是对象拷贝，不是同一地址。</p></li></ul></li></ul><h2 id="引用拷贝"><a href="#引用拷贝" class="headerlink" title="引用拷贝"></a>引用拷贝</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;riemann&quot;</span>, <span class="number">28</span>);</span><br><span class="line"><span class="type">Teacher</span> <span class="variable">otherTeacher</span> <span class="operator">=</span> teacher;  <span class="comment">// 没有创建新的对象</span></span><br><span class="line">System.out.println(teacher);</span><br><span class="line">System.out.println(otherTeacher);</span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230714215404681.png"                      alt="image-20230714215404681" style="zoom: 45%;"                 ><p>它们的地址值是相同的，<code>teacher</code>和<code>otherTeacher</code>只是引用而已，他们都指向了一个相同的对象<code>Teacher(“riemann”,28)</code>。</p><h2 id="对象拷贝"><a href="#对象拷贝" class="headerlink" title="对象拷贝"></a>对象拷贝</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;riemann&quot;</span>, <span class="number">28</span>);</span><br><span class="line">  <span class="type">Teacher</span> <span class="variable">otherTeacher</span> <span class="operator">=</span> (Teacher) teacher.clone();</span><br><span class="line">  System.out.println(teacher);</span><br><span class="line">  System.out.println(otherTeacher);</span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230714215759090.png"                      alt="image-20230714215759090" style="zoom:45%;"                 ><p>它们的地址是不同的，也就是说创建了新的对象， 而不是把原对象的地址赋给了一个新的引用变量，这就叫做对象拷贝。</p><p>由于<code>age</code>是基本数据类型， 那么对它的拷贝没有什么疑议，直接将一个4字节的整数值拷贝过来就行。但是<code>name</code>是String类型的， 它只是一个引用， 指向一个真正的String对象，那么对它的拷贝有两种方式将对象拷贝分为了浅拷贝和深拷贝。</p><ul><li>直接将源对象中的<code>name</code>的引用值拷贝给新对象的<code>name</code>字段；</li><li>根据<code>原Person</code>对象中的<code>name</code>指向的字符串对象创建一个新的相同的字符串对象，将这个新字符串对象的引用赋给<code>新拷贝的Person</code>对象的<code>name</code>字段。</li></ul><p>Student类和Teacher类的pojo结构是这样的：</p><p>​                                                                        <img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230714215314001.png"                      alt="image-20230714215314001"                ></p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。即对象的浅拷贝会对“主”对象进行拷贝，但不会复制主对象里面的对象。”里面的对象“会在原来的对象和它的副本之间共享。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230714220049094.png"                      alt="image-20230714220049094"                ></p><p>无论是String对象还是pojo对象，它们都是引用数据类型：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230714220406867.png"                      alt="image-20230714220406867" style="zoom:50%;"                 ><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> (Student) student1.clone();</span><br></pre></td></tr></table></figure></div><blockquote><p>由于Object类本身没有实现<code>Cloneable</code>接口，所以要使用clone方法必须在pojo类上实现该接口。</p></blockquote><p>两个引用<code>student1</code>和<code>student2</code>指向不同的两个对象，但是两个引用<code>student1</code>和<code>student2</code>中的<code>teacher</code><strong>引用指向的是同一个对象</strong>，所以说明是<strong>浅拷贝</strong>。</p><p><code>Cloneable</code>接口中的<code>clone()</code>方法是浅拷贝的：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>深拷贝是一个整个独立的对象拷贝，深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。简而言之，深拷贝把要复制的对象所引用的对象都复制了一遍。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230714221034487.png"                      alt="image-20230714221034487"                ></p><p>无论是String对象还是pojo对象，它们都是引用数据类型：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230714221056367.png"                      alt="image-20230714221056367" style="zoom:50%;"                 ><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> (Student) student1.clone();</span><br></pre></td></tr></table></figure></div><p>两个引用<code>student1</code>和<code>student2</code>指向不同的两个对象，两个引用<code>student1</code>和<code>student2</code>中的两个<code>teacher</code>引用指向的是两个对象。对<code>student1</code>中的<code>teacher</code>属性的修改只能影响<code>student1</code>对象，所以说是<strong>深拷贝</strong>。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">    <span class="comment">// 深拷贝时：</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) <span class="built_in">super</span>.clone();</span><br><span class="line">    student.setTeacher((Teacher)student.getTeacher().clone());</span><br><span class="line">    <span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>讲到对象的拷贝，突然想到字符串，字符串也是一种引用数据类型，这在初学中是容易被忽视掉的。</p><ul><li><p>String字符串的基本特性</p><ul><li>String声明为<code>final</code>的，不可被继承、不可变特性；</li><li>String实现了<code>Serializable</code>接口：表示字符串是支持序列化的；实现了<code>Comparable</code>接口：表示String可以比较大小；</li><li>String在jdk8及以前内部定义了<code>final char [] value</code>用于存储字符串数据，<code>jdk9</code>时改为<code>byte[]</code>；</li></ul></li><li><p>字符串连接池</p></li></ul><p>为了减少在jvm中创建的字符串的数量，虚拟机维护了一个字符串常量池。当创建String对象时，jvm会先检查字符串常量池，如果这个字符串的常量值已经存在在池中了，就直接返回池中对象的引用，如果不在池中，就会实例化一个字符串并放入池中。</p><h3 id="String不可变性"><a href="#String不可变性" class="headerlink" title="String不可变性"></a>String不可变性</h3><p><a class="link"   href="https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247487062&idx=2&sn=00ba05ef2f80488b1860d6d49e8b9557&chksm=eb538b60dc240276fc745eca8b7667364ea6ca86092d8f404b0bde5ec03dbcd81a4bc3a9454d#rd" >Java 中的 String 真的是不可变的吗？<i class="fa-solid fa-up-right-from-square"></i></a></p><ul><li>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Python&quot;</span>;</span><br><span class="line">System.out.println(str); <span class="comment">// Python</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">System.out.println(str); <span class="comment">// Java</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(str1 == str2);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">str2 = <span class="string">&quot;ABC&quot;</span>;  <span class="comment">// 相当于new String(&quot;ABC&quot;)，交给str2的引用</span></span><br><span class="line">System.out.println(str1 + <span class="string">&quot;----------&quot;</span> + str2);  <span class="comment">// str1=&quot;abc&quot;, str2=&quot;ABC&quot;</span></span><br></pre></td></tr></table></figure></div><ul><li>当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s1 + s2;  <span class="comment">// 在底层是StringBuilder.toString而来的，相当于new String(s1+s2);</span></span><br><span class="line">System.out.println(s3 == s4); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></div><ul><li>当调用String的<code>replace()</code>方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li></ul><p>​    </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天在刷算法题的时候忘记了引用数据类型深浅拷贝的问题，正好借此机会来复习一下。&lt;/p&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://kicheng.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux入门</title>
    <link href="https://kicheng.github.io/2023/07/08/Linux%E5%85%A5%E9%97%A8/"/>
    <id>https://kicheng.github.io/2023/07/08/Linux%E5%85%A5%E9%97%A8/</id>
    <published>2023-07-08T08:55:37.000Z</published>
    <updated>2023-07-10T14:03:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux的常见命令和Linux中安装jdk、mysql等。</p><span id="more"></span><h2 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h2><h3 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h3><ul><li><p><code>ls</code></p><ul><li><code>-a</code></li><li><code>-l</code></li></ul></li><li><p><code>cd</code></p><ul><li><code>~</code>：表示用户的home目录</li><li><code>.</code>：表示当前所在目录</li><li><code>..</code>：表示目前目录位置的上级目录</li></ul></li><li><p><code>cat</code></p><ul><li><code>-n</code>：显示行号</li></ul></li><li><p><code>more</code>：分页的形式显示文件内容</p><ul><li><code>回车键</code>：向下滚动一行</li><li><code>空格键</code>：向下滚动一屏</li><li><code>b</code>：返回上一屏</li><li><code>q或者Ctrl+C</code>：退出more</li></ul></li><li><p><code>tail</code>：查看文件末尾的内容</p><ul><li><code>-f</code>：动态读取文件末尾内容并显示，常用于日志文件的内容输出</li></ul></li><li><p><code>mkdir</code>：创建目录</p><ul><li><code>-p</code>：可以实现多级目录的同时创建（<code>mkdir 1/2/3</code>）</li></ul></li><li><p><code>rmdir</code>：删除空目录</p></li></ul><h3 id="拷贝移动命令"><a href="#拷贝移动命令" class="headerlink" title="拷贝移动命令"></a>拷贝移动命令</h3><ul><li><p><code>cp</code>：用来复制文件或目录（<code>cp [-r] source dest</code>）</p><ul><li><code>-r</code>：复制该目录下的所有子目录和文件</li></ul></li><li><p><code>mv</code>：为文件或目录改名，或移动到其他位置（<code>mv source dest</code>）</p></li></ul><h3 id="打包压缩命令"><a href="#打包压缩命令" class="headerlink" title="打包压缩命令"></a>打包压缩命令</h3><ul><li><p><code>tar</code>：对文件进行打包、解包、压缩、解压</p><blockquote><p>包文件后缀名<code>.tar</code>，表示只是完成了打包，并没有压缩；包文件后缀名<code>.tar.gz</code>表示打包的同时还进行了压缩。</p></blockquote><ul><li><code>-z</code>：代表是gzip，gzip可以对文件压缩或解压；</li><li><code>-c</code>：代表是create，创建新的包文件；</li><li><code>-x</code>：代表是extract，实现从包文件中还原文件；</li><li><code>-v</code>：代表是verbose，显示命令的执行操作；</li><li><code>-f</code>：代表是file，用于指定包文件的名称。</li></ul></li></ul><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf fileName  # 打包tar文件</span><br><span class="line">tar -xvf fileName  # 解包tar文件</span><br><span class="line">tar -zcvf fileName  # 打包并压缩tar.gz文件</span><br><span class="line">tar -zxvf fileName  # 打包并解压tar.gz文件</span><br></pre></td></tr></table></figure></div><h3 id="文本编辑命令"><a href="#文本编辑命令" class="headerlink" title="文本编辑命令"></a>文本编辑命令</h3><ul><li><p><code>vi</code>/<code>vim</code></p><blockquote><p><code>vim</code>安装：<code>yum install yum</code></p></blockquote><ul><li>命令模式<ul><li><code>G</code></li><li><code>gg</code></li></ul></li><li>插入模式</li><li>底行模式：<ul><li><code>wq</code></li><li><code>q!</code></li><li><code>set nu</code>：显示行号</li></ul></li></ul></li></ul><h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><ul><li><p><code>find</code>：在指定目录下查找文件</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find dirName -name fileName</span><br></pre></td></tr></table></figure></div></li><li><p><code>grep</code>：从指定文件查找指定文本内容</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep word fileName</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="远程服务器上传下载"><a href="#远程服务器上传下载" class="headerlink" title="远程服务器上传下载"></a>远程服务器上传下载</h2><ul><li><p>本地向服务器上传</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /localpath/filename（本地目录文件） username@IP_Address:/remotepath（远程目录）</span><br><span class="line">scp -r /localpath（本地目录） username@IP_Address:/remotepath（远程目录）</span><br></pre></td></tr></table></figure></div></li><li><p>本地从服务器下载</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp username@IP_Address:/remotepath/filename（远程目录文件） /localpath（本地目录）</span><br><span class="line">scp -r username@IP_Address:/remotepath（远程目录） /localpath（本地目录）</span><br></pre></td></tr></table></figure></div></li></ul><blockquote><p>远程服务器设置固定的ip地址：<a class="link"   href="https://www.cnblogs.com/itbsl/p/10998696.html" >https://www.cnblogs.com/itbsl/p/10998696.html<i class="fa-solid fa-up-right-from-square"></i></a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Linux中安装jdk"><a href="#Linux中安装jdk" class="headerlink" title="Linux中安装jdk"></a>Linux中安装jdk</h3><p>建议安装jdk8，jdk17亲测在CentOS中和tomcat不兼容，tomcat安装时无法识别jdk17（我看网上的博主在23年还在linux中使用jdk8的版本，可能CentOS7真的和jdk17有一些兼容上的问题）。</p><p>下载jdk8地址：<a class="link"   href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" >http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html<i class="fa-solid fa-up-right-from-square"></i></a></p><p>其中别忘记环境变量的配置：</p><ul><li><p>使用vim修改<code>/etc/profile</code>文件，在文件末尾加入配置：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_371</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></div></li><li><p>重新加载profile文件，使得配置立即生效</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></div></li></ul><p>检查jdk是否安装成功：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></div><h3 id="Linux中安装Tomcat"><a href="#Linux中安装Tomcat" class="headerlink" title="Linux中安装Tomcat"></a>Linux中安装Tomcat</h3><p>我使用的是Tomcat9版本。</p><p>在Tomcat的<code>/bin</code>目录下启动tomcat服务：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh 或者 ./startup.sh</span><br></pre></td></tr></table></figure></div><p>查看进程检查是否启动成功：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep tomcat</span><br></pre></td></tr></table></figure></div><p>通过客户机浏览器可以试着访问服务器的8080端口：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230710181303092.png"                      alt="image-20230710181303092" style="zoom:67%;"                 ><p>如果无法访问大概率是防火墙关闭了服务器的8080端口，尝试开放8080端口后尝试：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent  # 开放指定端口</span><br><span class="line">firewall-cmd --zone=public --remove-port=8080/tcp --permanent  # 开放指定端口</span><br><span class="line">firewall-cmd --reload  # 立即生效配置</span><br><span class="line">filewall-cmd --zone=public --list-ports  # 查看开放的端口</span><br></pre></td></tr></table></figure></div><p>停止Tomcat服务：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法一</span></span><br><span class="line">./shutdown.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法二</span></span><br><span class="line">kill -9 进程id</span><br></pre></td></tr></table></figure></div><h3 id="Linux中安装MySQL"><a href="#Linux中安装MySQL" class="headerlink" title="Linux中安装MySQL"></a>Linux中安装MySQL</h3><p>CentOS7中自带的 Mariadb 和 MySQL 有冲突，先将其卸载：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mariadb</span><br><span class="line">sudo rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64  # mariadb-libs-5.5.68-1.el7.x86_64是上面命令显示的</span><br><span class="line">sudo rm /etc/my.cnf</span><br></pre></td></tr></table></figure></div><p>检查MySQL是否存在，如果存在也卸载重新安装：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure></div><p>下载MySQL地址：<a class="link"   href="https://downloads.mysql.com/archives/community/?spm=a2c6h.12873639.article-detail.5.51fa3861DJz2jH" >https://downloads.mysql.com/archives/community/?spm=a2c6h.12873639.article-detail.5.51fa3861DJz2jH<i class="fa-solid fa-up-right-from-square"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708173316683.png"                      alt="image-20230708173316683"                ></p><p>将<code>mysql-8.0.32-1.el7.x86_64.rpm-bundle.tar</code>上传至服务器：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /localpath/mysql-8.0.32-1.el7.x86_64.rpm-bundle.tar username@IP_Address:/remotepath/mysql</span><br></pre></td></tr></table></figure></div><p>将tar解压到指定目录：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -xvf /home/ljc/mysql/mysql-8.0.32-1.el7.x86_64.rpm-bundle.tar -C /usr/local/mysql</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708174332889.png"                      alt="image-20230708174332889"                ></p><p>不考虑依赖关系的强制安装命令：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh *.rpm --nodeps --force</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708175727311.png"                      alt="image-20230708175727311"                ></p><p>安装成功后，启动MySQL服务：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure></div><p>进入MySQL：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></div><p>MySQL的默认临时密码在安装时的日志文件中，复制过来登录：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708175930124.png"                      alt="image-20230708175930124"                ></p><p>降低密码的校验等级和校验规则：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password.policy=0;</span><br><span class="line">set global validate_password.length=8;</span><br></pre></td></tr></table></figure></div><p>重新设置MySQL密码：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;password&#x27;;</span><br></pre></td></tr></table></figure></div><p><code>localhost</code>只能用户本机127.0.0.1访问，创建一个新<code>root</code>用户用于远程登录访问：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;12345678&#x27;;</span><br></pre></td></tr></table></figure></div><p>给新<code>root</code>用户分配权限：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to &#x27;root&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure></div><p>在NaviCat上远程连接服务器上的MySQL：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708181224067.png"                      alt="image-20230708181224067" style="zoom:67%;"                 ><p>这里如果连接失败是CentOS防火墙没有开启3306端口，建议关闭防火墙。</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708181402460.png"                      alt="image-20230708181402460"                ></p><p>关闭防火墙：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708181459858.png"                      alt="image-20230708181459858"                ></p><p>永久关闭防火墙：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linux的常见命令和Linux中安装jdk、mysql等。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://kicheng.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>01-MySQL基础</title>
    <link href="https://kicheng.github.io/2023/07/07/01-MySQL%E5%9F%BA%E7%A1%80/"/>
    <id>https://kicheng.github.io/2023/07/07/01-MySQL%E5%9F%BA%E7%A1%80/</id>
    <published>2023-07-07T09:48:37.000Z</published>
    <updated>2023-07-08T04:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mysql是一种关系型数据库，这篇博客作为数据库的基础篇主要讲解操作关系型数据的SQL编程语言。</p><span id="more"></span><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708120214301.png"                      alt="image-20230708120214301"                ></p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>数据模型是数据库中数据的存储方式，是数据库系统的基础。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708120103005.png"                      alt="image-20230708120103005" style="zoom:77%;"                 ><h2 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h2><h3 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL 数据定义语言"></a>DDL 数据定义语言</h3><ul><li><p>数据库操作</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="keyword">create</span> database 数据库名;</span><br><span class="line">use 数据库名;</span><br><span class="line"><span class="keyword">select</span> database();</span><br><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></table></figure></div></li><li><p>表操作</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 (字段 字段类型, 字段 字段类型...);</span><br><span class="line"><span class="keyword">desc</span> 表名;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="operator">/</span> modify <span class="operator">/</span> change <span class="operator">/</span> <span class="keyword">drop</span> <span class="operator">/</span> rename <span class="keyword">to</span> ...;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure></div><p>创建数据表时要指定字段的数据类型，SQL的<strong>数据类型</strong>是很重要的知识点：</p><ul><li><p>数值类型</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708115522222.png"                      alt="image-20230708115522222"                ></p></li><li><p>字符串类型</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708115834511.png"                      alt="image-20230708115834511"                ></p><p><code>varchar</code>类型会先计算数据所占用的存储空间，所以性能相对<code>char</code>会差一些。<code>varchar</code>用来存储变长字符串，<code>char</code>用来存储定长字符串。</p></li><li><p>日期时间类型</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708120001012.png"                      alt="image-20230708120001012"                ></p></li></ul></li></ul><h3 id="DML-数据操作语言"><a href="#DML-数据操作语言" class="headerlink" title="DML 数据操作语言"></a>DML 数据操作语言</h3><ul><li><p>添加数据</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 (字段<span class="number">1</span>, 字段<span class="number">2</span>, ...) <span class="keyword">values</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...)[, (值<span class="number">1</span>, 值<span class="number">2</span>, ...),...];</span><br></pre></td></tr></table></figure></div></li><li><p>修改数据</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>, 字段<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2.</span>.. [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure></div></li><li><p>删除数据</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL 数据查询语言"></a>DQL 数据查询语言</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名列表 <span class="keyword">where</span> 条件列表 <span class="keyword">group</span> <span class="keyword">by</span> 分组字段列表 <span class="keyword">having</span> 分组后条件列表 <span class="keyword">order</span> <span class="keyword">by</span> 排序字段列表 limit 分页参数</span><br></pre></td></tr></table></figure></div><ul><li><p>基本查询</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span> [<span class="keyword">as</span> 别名], 字段<span class="number">2</span> [<span class="keyword">as</span> 别名]... <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段列表 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></div></li><li><p>条件查询</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure></div></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230707182551496.png"                      alt="image-20230707182551496"                ></p><ul><li><p>聚合函数</p><p>将一列数据作为一个整体，进行纵向计算。</p><blockquote><p>null值不参与所有聚合函数运算。</p></blockquote><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 聚合函数(字段列表) <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230707182712652.png"                      alt="image-20230707182712652" style="zoom:87%;"                 ></li><li><p>分组查询</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件] <span class="keyword">group</span> <span class="keyword">by</span> 分组字段名 [<span class="keyword">having</span> 分组过滤后的条件];</span><br></pre></td></tr></table></figure></div><p>where 与 having 的区别：</p><p>① 执行时机不同：where 是分组之前进行过滤，不满足 where 条件是不参与 group by 分组的；而 having 是分组之后的条件对结果进行过滤；</p><p>② 判断条件不同：where 是不能对聚合函数进行判断，而 having 可以。</p><blockquote><p>执行顺序：where &gt; 聚合函数 &gt; having</p><p>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义 </p></blockquote></li><li><p>排序查询</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span>, <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span> ...;</span><br></pre></td></tr></table></figure></div><ul><li><code>ASC</code>：升序（默认值）</li><li><code>DESC</code>：降序</li></ul></li><li><p>分页查询</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 limit 起始索引, 查询记录数;</span><br></pre></td></tr></table></figure></div><blockquote><ul><li><p>起始索引从0开始，<code>起始索引 = (查询页码 - 1) * 每页显示记录数</code>；</p></li><li><p>分页查询是数据库的“方言”；</p></li><li><p>如果查询的是第一页的数据，起始索引可以省略，直接简写为<code>limit 10</code>。</p></li></ul></blockquote></li></ul><p><strong>DQL语句执行顺序</strong></p><p>可以通过起别名的方式验证sql的执行顺序。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230707184905294.png"                      alt="image-20230707184905294" style="zoom:87%;"                 ><h3 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL 数据控制语言"></a>DCL 数据控制语言</h3><p>用来管理数据库用户，控制数据库的访问权限等。这类 SQL 开发人员操作较少，主要是 DBA 数据库管理员使用。</p><ul><li><p>管理用户</p><ul><li><p>查询用户</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure></div></li><li><p> 创建用户</p></li></ul>  <div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure></div><ul><li><p>修改用户密码</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>删除用户</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>权限控制</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230707190503318.png"                      alt="image-20230707190503318" style="zoom:87%;"                 ><ul><li><p>查询权限</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>授予权限</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>撤销权限</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure></div></li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230707212720328.png"                      alt="image-20230707212720328" style="zoom:77%;"                 ><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230707213014115.png"                      alt="image-20230707213014115"                ></p><p>练习：通过数据库内置函数，生成6位验证码：</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> lpad(round(rand()<span class="operator">*</span><span class="number">1000000</span>, <span class="number">0</span>), <span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230707213605363.png"                      alt="image-20230707213605363" style="zoom:87%;"                 ><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>在sql语句中实现条件筛选，提高语句的效率。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230707214051312.png"                      alt="image-20230707214051312" style="zoom:87%;"                 ><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>约束是作用于表中字段的规则，用于限制存储在表中的数据，可以在创建表或修改表的时候添加约束。目的是保证数据库中数据的正确、有效性和完整性。</p><h3 id="约束分类"><a href="#约束分类" class="headerlink" title="约束分类"></a>约束分类</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230707214947434.png"                      alt="image-20230707214947434" style="zoom:87%;"                 ><blockquote><p>自增：<code>auto_increment</code> . 当插入一条数据失败时，这时候这条未插入的数据已经向数据库申请了自增的字段值。</p></blockquote><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>外键是用来让两张表的数据相互建立连接，从而保证数据的一致性和完整性的。</p><p>下面的两张表，仅存在逻辑上的关系，在数据库层面并未建立外键关联，所以是无法保证数据的一致性和完整性的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230707220102885.png"                      alt="image-20230707220102885"                ></p><p>添加外键：</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key (外键字段名) <span class="keyword">references</span> 主表(主表列名);</span><br></pre></td></tr></table></figure></div><p>删除外键：</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键名称;</span><br></pre></td></tr></table></figure></div><p>删除/更新行为：</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key (外键字段名) <span class="keyword">references</span> 主表(主表列名) <span class="keyword">on</span> <span class="keyword">update</span> 行为 <span class="keyword">on</span> <span class="keyword">delete</span> 行为;</span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230707223539126.png"                      alt="image-20230707223539126" style="zoom:87%;"                 ><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>一对多</li></ul><p>一个部门对应多个员工，一个员工对应一个部门。<strong>在多的一方建立外键，指向一的一方的主键。</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708095445790.png"                      alt="image-20230708095445790" style="zoom:87%;"                 ><ul><li>多对多</li></ul><p>一个学生可以选修多门课程，一门课程可以被多个学生选择。<strong>建立第三张中间表，中间表至少包含两个外键，分别关联两方主键。</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708095651147.png"                      alt="image-20230708095651147" style="zoom:87%;"                 ><ul><li>一对一</li></ul><p>用户与用户详情的关系。多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率。<strong>在任意一方加入外键，关联另一方的主键，并且设置外键是唯一的(UNIQUE) – 保证一对一。</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708100105054.png"                      alt="image-20230708100105054" style="zoom:87%;"                 ><h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>查询的是两张表交集的部分。</p><ul><li><p>隐式内连接</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span>, 表<span class="number">2</span> <span class="keyword">where</span> 条件...;</span><br></pre></td></tr></table></figure></div></li><li><p>显式内连接</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> [<span class="keyword">inner</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件...;</span><br></pre></td></tr></table></figure></div></li></ul><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><ul><li><p>左外连接：相当于查询表1（左表）的所有数据（包含表1和表2交集部分）</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件...;</span><br></pre></td></tr></table></figure></div></li><li><p>右外连接：相当于查询表2（右表）的所有数据（包含表1和表2交集部分）</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">right</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件...;</span><br></pre></td></tr></table></figure></div></li></ul><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>可以是内连接查询，也可以是外连接查询。</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表A 别名A <span class="keyword">join</span> 表A 别名B <span class="keyword">on</span> 条件...;</span><br></pre></td></tr></table></figure></div><h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><p>把多次查询的结果合并起来，形成一个新的查询结果集</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表A <span class="keyword">union</span> [<span class="keyword">all</span>] <span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表B;</span><br></pre></td></tr></table></figure></div><p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致；<code>union</code>是将结果合并后去重，<code>union all</code>是只将结果合并。</p><h4 id="子查询（嵌套查询）"><a href="#子查询（嵌套查询）" class="headerlink" title="子查询（嵌套查询）"></a>子查询（嵌套查询）</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> column1 <span class="operator">=</span> (<span class="keyword">select</span> column1 <span class="keyword">from</span> t2);</span><br></pre></td></tr></table></figure></div><p>根据子查询的结果不同分为：标量子查询、列子查询、行子查询、表子查询。</p><ul><li><p>标量子查询：<code>&gt;</code>, <code>&lt;</code>, <code>=</code>…</p></li><li><p>列子查询：<code>in</code>, <code>all</code>, <code>any</code>…</p></li><li><p>行子查询：<code>in</code>, <code>not in</code>, <code>=</code>, <code>&lt;&gt;</code></p></li><li><p>表子查询：<code>in</code></p></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，他是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功、要么同时失败。<strong>保证数据的正确性和完整性。</strong></p><p><font color="blue">默认MySQL的事务是自动提交的，也就是说当执行一条DML语句后，MySQL会立即隐式的提交事务。</font>（开启事务 → 提交/回滚事务）</p><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><ul><li><p>方式一</p><ul><li><p>查看/设置事务提交方式：</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;</span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>提交事务</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>回滚事务</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure></div></li></ul></li><li><p> 方式二</p></li></ul><p>  开启事务后，必须手动<code>commit</code>提交事务（否则数据是不会在表中变化的），或者<code>rollback</code>回滚事务，才能结束这个事务。一旦事务提交，则其所做的修改就会永久保存到数据库中。</p><ul><li><p>开启事务</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction 或 <span class="keyword">begin</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>提交事务</p></li><li><p>回滚事务</p></li></ul><h3 id="事务四大特性（面试题）"><a href="#事务四大特性（面试题）" class="headerlink" title="事务四大特性（面试题）"></a>事务四大特性（面试题）</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708112047747.png"                      alt="image-20230708112047747"                ></p><h3 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h3><ul><li><p>脏读</p><p>一个事务读到另一个事务还没有提交的数据。</p><p><font color="red">Question：在事务没提交前更改的数据信息，保存在数据库的什么位置？</font></p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708112301432.png"                      alt="image-20230708112301432" style="zoom:87%;"                 ></li><li><p>不可重复读</p><p>一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708112746185.png"                      alt="image-20230708112746185" style="zoom:87%;"                 ></li><li><p>幻读</p><p>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在了。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708112946935.png"                      alt="image-20230708112946935" style="zoom:87%;"                 ></li></ul><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><p>事务的隔离级别是为了解决并发事务问题。设计数据库时需要衡量数据库的安全级别和并发性能。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230708113411288.png"                      alt="image-20230708113411288" style="zoom:87%;"                 >]]></content>
    
    
    <summary type="html">&lt;p&gt;Mysql是一种关系型数据库，这篇博客作为数据库的基础篇主要讲解操作关系型数据的SQL编程语言。&lt;/p&gt;</summary>
    
    
    
    <category term="Mysql" scheme="https://kicheng.github.io/categories/Mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>MybatisPlus</title>
    <link href="https://kicheng.github.io/2023/07/07/MybatisPlus/"/>
    <id>https://kicheng.github.io/2023/07/07/MybatisPlus/</id>
    <published>2023-07-07T02:19:57.000Z</published>
    <updated>2023-07-07T07:19:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。使用原生的Mybatis编写持久层逻辑时，所需要的代码是比较繁琐的，需要定义Mapper接口和Mapper.xml文件，每一个方法都需要编写对应的sql语句，会存在很多大量的重复工作，使用MP之后，对通用的方法做了高度的抽取，避免了很多重复工作，可以非常快速的实现了单表的各种增、删、改、查操作。</p><span id="more"></span><p>博客主要讲解Springboot项目下的MybatisPlus框架的核心功能，详细的可参考MP的<a class="link"   href="https://baomidou.com/" >中文开发文档<i class="fa-solid fa-up-right-from-square"></i></a>。</p><h2 id="入门配置"><a href="#入门配置" class="headerlink" title="入门配置"></a>入门配置</h2><ul><li><p>创建Springboot工程（在IDEA中集成功能）</p><ul><li><p>引入 Spring Boot Starter 父工程：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span> </span><br></pre></td></tr></table></figure></div></li><li><p>引入 <code>spring-boot-starter</code>、<code>spring-boot-starter-test</code>依赖：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- web工程也要导入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>引入<code>mybatis-plus-boot-starter</code>依赖</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>引入数据库依赖（在IDEA中集成功能）</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- 可选 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ul><li><p><code>@TableName</code>：表名注解，标识实体类对应的表</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p><code>@TableId</code>：主键注释，标识实体类主键字段</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">主键字段名</td></tr><tr><td align="center">type</td><td align="center">Enum</td><td align="center">否</td><td align="center">IdType.NONE</td><td align="center">指定主键类型</td></tr></tbody></table><ul><li><p><code>IdType</code>的属性</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">AUTO</td><td align="left">数据库 ID 自增</td></tr><tr><td align="left">NONE</td><td align="left">无状态，该类型为未设置主键类型（注解里等于跟随全局，全局里约等于 INPUT）</td></tr><tr><td align="left">INPUT</td><td align="left">insert 前自行 set 主键值</td></tr><tr><td align="left">ASSIGN_ID</td><td align="left">分配 ID(主键类型为 Number(Long 和 Integer)或 String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr><tr><td align="left">ASSIGN_UUID</td><td align="left">分配 UUID,主键类型为 String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认 default 方法)</td></tr></tbody></table></li></ul></li><li><p><code>@TableField</code>：字段注解（非主键）</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@TableField(&quot;nickname&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><p><code>value</code>：数据库字段名</p></li><li><p><code>fill</code>：字段自动填充策略</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">DEFAULT</td><td align="left">默认不处理</td></tr><tr><td align="left">INSERT</td><td align="left">插入时填充字段</td></tr><tr><td align="left">UPDATE</td><td align="left">更新时填充字段</td></tr><tr><td align="left">INSERT_UPDATE</td><td align="left">插入和更新时填充字段</td></tr></tbody></table></li></ul></li></ul><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="CRUD-接口"><a href="#CRUD-接口" class="headerlink" title="CRUD 接口"></a>CRUD 接口</h3><h4 id="Service-CRUD-接口"><a href="#Service-CRUD-接口" class="headerlink" title="Service CRUD 接口"></a>Service CRUD 接口</h4><p>通用 Service CRUD 封装 IService 接口，进一步封装 CRUD 采用 <code>get 查询单行</code> ，<code>remove 删除</code>， <code>list 查询集合</code> ，<code>page 分页</code> 前缀命名方式区分 Mapper 层避免混淆。</p><ul><li><p><code>Save</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">save</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;  <span class="comment">// batchSize:插入批次数量</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>SaveOrUpdate</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TableId 注解存在更新记录，否插入一条记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure></div></li><li><p><code>Remove</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 queryWrapper 设置的条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(Serializable id)</span>;  <span class="comment">// 主键ID</span></span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;  <span class="comment">// idList:主键ID列表</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>Update</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(T updateEntity, Wrapper&lt;T&gt; whereWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 选择修改</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateById</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure></div></li><li><p><code>Get</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">getById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="type">boolean</span> throwEx)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></div></li><li><p><code>List</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 查询所有列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></div></li><li><p><code>Page</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无条件分页查询</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">page</span><span class="params">(IPage&lt;T&gt; page)</span>;</span><br><span class="line"><span class="comment">// 条件分页查询</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">page</span><span class="params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 无条件分页查询</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">pageMaps</span><span class="params">(IPage&lt;T&gt; page)</span>;</span><br><span class="line"><span class="comment">// 条件分页查询</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">pageMaps</span><span class="params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></div></li><li><p><code>Count</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">count</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></div></li></ul><h4 id="Mapper-CRUD-接口"><a href="#Mapper-CRUD-接口" class="headerlink" title="Mapper CRUD 接口"></a>Mapper CRUD 接口</h4><p>通用 CRUD 封装 BaseMapper 接口，为 Mybatis-Plus 启动时自动解析实体表关系映射转换为 Mybatis 内部对象注入容器。</p><ul><li><p><code>Insert</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(T entity)</span>;</span><br></pre></td></tr></table></figure></div></li><li><p><code>Delete</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br></pre></td></tr></table></figure></div></li><li><p><code>Update</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T updateEntity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; whereWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 修改</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span>;</span><br></pre></td></tr></table></figure></div></li><li><p><code>Select</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">selectById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询一条记录</span></span><br><span class="line">T <span class="title function_">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMaps</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">selectPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMapsPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line">Integer <span class="title function_">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><p><strong>AbstractWrapper</strong>是QueryWrapper(LambdaQueryWrapper) 和 UpdateWrapper(LambdaUpdateWrapper) 的父类，用于生成 sql 的 where 条件。</p><blockquote><p>以下方法在入参中出现的<code>R</code>为泛型，在普通wrapper中是<code>String</code>，在<code>LambdaWrapper</code>中是<strong>函数</strong>(例:<code>Entity::getId</code>，<code>Entity</code>为实体类，<code>getId</code>为字段<code>id</code>的<strong>getter Method</strong>)。</p></blockquote><ul><li><p><code>allEq</code>：全部eq（或个别isNull）</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allEq(Map&lt;R, V&gt; params)</span><br><span class="line">allEq(Map&lt;R, V&gt; params, <span class="type">boolean</span> null2IsNull)</span><br><span class="line">allEq(<span class="type">boolean</span> condition, Map&lt;R, V&gt; params, <span class="type">boolean</span> null2IsNull)</span><br></pre></td></tr></table></figure></div><blockquote><p><code>params</code> : <code>key</code>为数据库字段名，<code>value</code>为字段值<br><code>null2IsNull</code> : 为<code>true</code>则在<code>map</code>的<code>value</code>为<code>null</code>时调用<code>isNull</code>方法，为<code>false</code>时则忽略<code>value</code>为<code>null</code>的值</p><ul><li>例1: <code>allEq(&#123;id:1,name:&quot;老王&quot;,age:null&#125;)</code>—&gt;<code>id = 1 and name = &#39;老王&#39; and age is null</code></li><li>例2: <code>allEq(&#123;id:1,name:&quot;老王&quot;,age:null&#125;, false)</code>—&gt;<code>id = 1 and name = &#39;老王&#39;</code></li></ul></blockquote></li><li><p><code>eq</code>：等于 =</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eq(R column, Object val)</span><br><span class="line">eq(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure></div></li><li><p><code>ne</code>：不等于 &lt;&gt; (或 !=)</p></li><li><p><code>gt</code>：大于 &gt;</p></li><li><p><code>ge</code>：大于等于 &gt;=</p></li><li><p><code>lt</code>：小于 &lt;</p></li><li><p><code>le</code>：小于等于 &lt;=</p></li><li><p><code>between</code>：BETWEEN 值1 AND 值2</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">between(R column, Object val1, Object val2)</span><br><span class="line">between(<span class="type">boolean</span> condition, R column, Object val1, Object val2)</span><br><span class="line"><span class="comment">// between(&quot;age&quot;, 18, 30)---&gt;age between 18 and 30</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>notBetween</code>：NOT BETWEEN 值1 AND 值2</p></li><li><p><code>like</code></p></li><li><p><code>notLike</code></p></li><li><p><code>likeLeft</code></p></li><li><p><code>likeRight</code></p></li><li><p><code>isNull</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isNull(R column)</span><br><span class="line">isNull(<span class="type">boolean</span> condition, R column)</span><br></pre></td></tr></table></figure></div></li><li><p><code>isNotNull</code></p></li><li><p><code>in</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in(R column, Collection&lt;?&gt; value)</span><br><span class="line">in(<span class="type">boolean</span> condition, R column, Collection&lt;?&gt; value)</span><br></pre></td></tr></table></figure></div></li><li><p><code>groupBy</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupBy(R... columns)</span><br><span class="line">groupBy(<span class="type">boolean</span> condition, R... columns)</span><br><span class="line"><span class="comment">// groupBy(&quot;id&quot;, &quot;name&quot;)---&gt;group by id,name</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>orderByAsc</code>：升序排序</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orderByAsc(R... columns)</span><br><span class="line">orderByAsc(<span class="type">boolean</span> condition, R... columns)</span><br></pre></td></tr></table></figure></div></li><li><p><code>orderByDesc</code>：升序排序</p></li><li><p><code>or</code>：主动调用<code>or</code>表示紧接着下一个<strong>方法</strong>不是用<code>and</code>连接!(不调用<code>or</code>则默认为使用<code>and</code>连接)</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">or(Consumer&lt;Param&gt; consumer)</span><br><span class="line">or(<span class="type">boolean</span> condition, Consumer&lt;Param&gt; consumer)</span><br><span class="line"><span class="comment">// eq(&quot;id&quot;,1).or().eq(&quot;name&quot;,&quot;老王&quot;)---&gt;id = 1 or name = &#x27;老王&#x27;</span></span><br></pre></td></tr></table></figure></div></li></ul><blockquote><p>不是全部，条件构造器API：<a class="link"   href="https://baomidou.com/pages/10c804/#querywrapper%E3%80%82" >https://baomidou.com/pages/10c804/#querywrapper。<i class="fa-solid fa-up-right-from-square"></i></a></p></blockquote><p><strong>QueryWrapper</strong>或者<strong>LambdaQueryWrapper</strong>，继承自 AbstractWrapper 。</p><ul><li><p><code>select</code>：设置查询字段</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select(String... sqlSelect)</span><br><span class="line">select(Predicate&lt;TableFieldInfo&gt; predicate)</span><br><span class="line">select(Class&lt;T&gt; entityClass, Predicate&lt;TableFieldInfo&gt; predicate)</span><br><span class="line"><span class="comment">// select(&quot;id&quot;, &quot;name&quot;, &quot;age&quot;)</span></span><br></pre></td></tr></table></figure></div></li></ul><p><strong>UpdateWrapper</strong>或者<strong>LambdaUpdateWrapper</strong>，也继承自 AbstractWrapper。</p><ul><li><p><code>set</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set(String column, Object val)</span><br><span class="line">set(<span class="type">boolean</span> condition, String column, Object val)</span><br><span class="line"><span class="comment">// set(&quot;name&quot;, &quot;老李头&quot;)</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>setSql</code>：设置 SET 部分 SQL</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setSql(String sql) </span><br><span class="line"><span class="comment">// setSql(&quot;name = &#x27;老李头&#x27;&quot;)</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>lambda</code>：获取 <code>LambdaWrapper</code>，在<code>QueryWrapper</code>中是获取<code>LambdaQueryWrapper</code>在<code>UpdateWrapper</code>中是获取<code>LambdaUpdateWrapper</code>。</p></li></ul><h3 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h3><p><strong>安装</strong></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>使用</strong></p><p><a class="link"   href="https://baomidou.com/pages/779a6e/#%E4%BD%BF%E7%94%A8" >https://baomidou.com/pages/779a6e/#%E4%BD%BF%E7%94%A8<i class="fa-solid fa-up-right-from-square"></i></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。使用原生的Mybatis编写持久层逻辑时，所需要的代码是比较繁琐的，需要定义Mapper接口和Mapper.xml文件，每一个方法都需要编写对应的sql语句，会存在很多大量的重复工作，使用MP之后，对通用的方法做了高度的抽取，避免了很多重复工作，可以非常快速的实现了单表的各种增、删、改、查操作。&lt;/p&gt;</summary>
    
    
    
    <category term="Springboot" scheme="https://kicheng.github.io/categories/Springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>瑞吉外卖项目实战day2</title>
    <link href="https://kicheng.github.io/2023/07/06/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98day2/"/>
    <id>https://kicheng.github.io/2023/07/06/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98day2/</id>
    <published>2023-07-06T02:23:12.000Z</published>
    <updated>2023-07-06T13:48:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>适合新手小白入门Java后端开发的Springboot + Mybatis Plus 项目。</p><span id="more"></span><p>后面我逐渐省略了一些功能的记录，主要是因为和前面的业务万变不离其宗，如果要看详细的代码可以到我的github仓库下拉<a class="link"   href="https://github.com/KiCheng/reggie" >reggie代码<i class="fa-solid fa-up-right-from-square"></i></a>。</p><h2 id="业务实现（后台系统）"><a href="#业务实现（后台系统）" class="headerlink" title="业务实现（后台系统）"></a>业务实现（后台系统）</h2><h3 id="新增套餐"><a href="#新增套餐" class="headerlink" title="新增套餐"></a>新增套餐</h3><p><strong>数据模型</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706103537857.png"                      alt="image-20230706103537857"                ></p><p><strong>表现层要素</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706103038582.png"                      alt="image-20230706103038582"                ></p><p>请求类型：POST</p><p>请求路径：<code>/setmeal</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706103143613.png"                      alt="image-20230706103143613"                ></p><p>请求参数：json格式的数据，除了setmeal套餐的基本信息外，还有套餐内的菜品信息setmealDishes也封装成json数组的格式。<font color="blue">（还有idType和dishList是什么，当请求参数json数据key大于dto对象的时候，可以正常封装吗？）</font></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addSetmeal</span>(prams)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;套餐添加成功！&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (!st) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ruleForm</span>.<span class="title function_">resetFields</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dishList</span> = []</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dishTable</span> = []</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ruleForm</span> = &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">categoryId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">price</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">code</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">image</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">description</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">dishList</span>: [],</span><br><span class="line">          <span class="attr">status</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">idType</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">imageUrl</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></div><p>返回值类型：<code>Result&lt;String&gt;</code>类型</p><p><strong>核心业务思路</strong></p><p>仍然是操作setmeal数据表和setmeal_dish数据表，要在Service类上加事务管理注释<code>@Transactional</code>。</p><p>步骤1：在Service类自定义新增套餐的业务层方法，并在类上加事务管理注释<code>@Transactional</code>；</p><p>步骤2：调用Service层原生的save方法将SetmealDto对象传入并保存；</p><p>步骤3：接下来要对setmeal_dish数据表进行添加多条数据，可以从dto对象中get到setmealDishes这个属性列表，但是不能直接将setmealDishes列表<code>saveBatch</code>，要对其赋值setmeal_id值；</p><p>步骤4：通过dto对象get到id值（执行了save操作，在setmeal表已经通过雪花算法为dto对象生成了id属性值），将其赋给setmealDishes列表的setmealDish.setmealId套餐id值；</p><p>步骤5：调用Service层的<code>saveBatch</code>将setmealDishes列表添加到setmeal_dish数据表中。</p><h3 id="套餐信息分页查询"><a href="#套餐信息分页查询" class="headerlink" title="套餐信息分页查询"></a>套餐信息分页查询</h3><p><strong>表现层要素</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706111444821.png"                      alt="image-20230706111444821"                ></p><p>请求类型：GET</p><p>请求路径：<code>/setmeal/page</code></p><p>请求参数：普通参数page、pageSize和可选参数name</p><p>返回值类型：<code>Result&lt;Page&gt;</code></p><p><strong>核心业务思路</strong></p><p>跟前面的菜品信息分页查询一模一样。</p><h3 id="删除套餐"><a href="#删除套餐" class="headerlink" title="删除套餐"></a>删除套餐</h3><p><strong>表现层要素</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706113845252.png"                      alt="image-20230706113845252"                ></p><p>请求类型：DELETE</p><p>请求路径：<code>/setmeal</code></p><p>请求参数：普通参数ids，因为批量删除的id可能有多个，所以这里的方法形参是<code>List&lt;Long&gt; ids</code>，要加<code>@RequestParam</code>注解</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">deleteSetmeal</span>(type === <span class="string">&#x27;批量&#x27;</span> ? <span class="variable language_">this</span>.<span class="property">checkList</span>.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>) : id).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;删除成功！&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">handleQuery</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>返回值类型：<code>Result&lt;String&gt;</code></p><p><strong>核心业务思路</strong></p><p>首先操作setmeal表删除套餐信息，再操作setmeal_dish表删除setmeal_id字段 = ids的所有数据。</p><h3 id="批量起售停售"><a href="#批量起售停售" class="headerlink" title="批量起售停售"></a>批量起售停售</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706163258312.png"                      alt="image-20230706163258312"                ></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, <span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">        LambdaUpdateWrapper&lt;Setmeal&gt; lambdaUpdateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaUpdateWrapper.in(Setmeal::getId, ids);</span><br><span class="line">        lambdaUpdateWrapper.set(Setmeal::getStatus, status);</span><br><span class="line">        setmealService.update(lambdaUpdateWrapper);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;状态修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h3 id="订单明细分页查询"><a href="#订单明细分页查询" class="headerlink" title="订单明细分页查询"></a>订单明细分页查询</h3><p>跟前面的分页查询相比就是可选参数变多了，还有就是关注一下“时间”作为可选参数如何处理。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706203744254.png"                      alt="image-20230706203744254"                ></p><p>可选参数：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706203801378.png"                      alt="image-20230706203801378" style="zoom:67%;"                 ><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706203823723.png"                      alt="image-20230706203823723"                ></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Page&gt; <span class="title function_">pageSelect</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String number,String beginTime, String endTime)</span>&#123;</span><br><span class="line">    Page&lt;Orders&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page ,pageSize);</span><br><span class="line">    LambdaQueryWrapper&lt;Orders&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lambdaQueryWrapper.like(StringUtils.hasText(number), Orders::getNumber, number);</span><br><span class="line">    lambdaQueryWrapper.gt(StringUtils.hasText(beginTime), Orders::getOrderTime, beginTime)</span><br><span class="line">            .lt(StringUtils.hasText(endTime), Orders::getOrderTime, endTime);</span><br><span class="line">    lambdaQueryWrapper.orderByDesc(Orders::getOrderTime);</span><br><span class="line"></span><br><span class="line">    orderService.page(pageInfo, lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="业务实现（移动端系统）"><a href="#业务实现（移动端系统）" class="headerlink" title="业务实现（移动端系统）"></a>业务实现（移动端系统）</h2><h3 id="手机验证码登录"><a href="#手机验证码登录" class="headerlink" title="手机验证码登录"></a>手机验证码登录</h3><p><strong>流程分析</strong></p><ol><li>点击获取验证码，页面向服务端发送第一次请求，请求服务器随机生成要求的验证码并发送到表单输出的手机号中；</li><li>点击登录，页面向服务端发送第二次请求，携带表单输入的验证码和Session中储存的验证码进行比对，确定是否成功登录。</li></ol><p><strong>核心业务思路</strong></p><ul><li>发送验证码请求</li></ul><p>导入手机验证的依赖坐标：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里云短信服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>编写一个工具类（根据阿里云短信服务的帮助文档改的），用于发送手机验证码：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信发送工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 发送短信</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> signName 签名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> templateCode 模板</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> phoneNumbers 手机号</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> param 参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String signName, String templateCode,String phoneNumbers,String param)</span>&#123;</span><br><span class="line">      <span class="type">DefaultProfile</span> <span class="variable">profile</span> <span class="operator">=</span> DefaultProfile.getProfile(<span class="string">&quot;cn-hangzhou&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);  <span class="comment">// accessKeyId, secret</span></span><br><span class="line">      <span class="type">IAcsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAcsClient</span>(profile);</span><br><span class="line"></span><br><span class="line">      <span class="type">SendSmsRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendSmsRequest</span>();</span><br><span class="line">      request.setSysRegionId(<span class="string">&quot;cn-hangzhou&quot;</span>);</span><br><span class="line">      request.setPhoneNumbers(phoneNumbers);</span><br><span class="line">      request.setSignName(signName);</span><br><span class="line">      request.setTemplateCode(templateCode);</span><br><span class="line">      request.setTemplateParam(<span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span>+param+<span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">SendSmsResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.getAcsResponse(request);</span><br><span class="line">         System.out.println(<span class="string">&quot;短信发送成功&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>随机生成随机验证码的工具类：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机生成验证码工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidateCodeUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 长度为4位或者6位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">generateValidateCode</span><span class="params">(<span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">4</span>)&#123;</span><br><span class="line">            code = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">9999</span>);<span class="comment">//生成随机数，最大为9999</span></span><br><span class="line">            <span class="keyword">if</span>(code &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">                code = code + <span class="number">1000</span>;<span class="comment">//保证随机数为4位数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(length == <span class="number">6</span>)&#123;</span><br><span class="line">            code = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">999999</span>);<span class="comment">//生成随机数，最大为999999</span></span><br><span class="line">            <span class="keyword">if</span>(code &lt; <span class="number">100000</span>)&#123;</span><br><span class="line">                code = code + <span class="number">100000</span>;<span class="comment">//保证随机数为6位数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;只能生成4位或6位数字验证码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成指定长度字符串验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateValidateCode4String</span><span class="params">(<span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rdm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">hash1</span> <span class="operator">=</span> Integer.toHexString(rdm.nextInt());</span><br><span class="line">        <span class="type">String</span> <span class="variable">capstr</span> <span class="operator">=</span> hash1.substring(<span class="number">0</span>, length);</span><br><span class="line">        <span class="keyword">return</span> capstr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>修改拦截器，对客户端登录相关的请求进行放行：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义不需要处理的请求路径</span></span><br><span class="line">String[] urls = &#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/common/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/sendMsg&quot;</span>,  <span class="comment">// 移动端发送短信</span></span><br><span class="line">        <span class="string">&quot;/user/login&quot;</span>  <span class="comment">// 移动端登录</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>表现层方法：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span>&#123;</span><br><span class="line">      <span class="comment">// 获取手机号</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(StringUtils.hasText(phone))&#123;</span><br><span class="line">          <span class="comment">// 生成随机的4位验证码</span></span><br><span class="line">          <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> ValidateCodeUtils.generateValidateCode(<span class="number">4</span>).toString();</span><br><span class="line">          log.info(<span class="string">&quot;code -&gt; &#123;&#125;&quot;</span>, code);</span><br><span class="line">          <span class="comment">// 调用阿里云提供的短信服务API完成短信发送</span></span><br><span class="line">          SMSUtils.sendMessage(<span class="string">&quot;瑞吉外卖&quot;</span>, <span class="string">&quot;您的验证码为：$&#123;code&#125;，请勿泄露于他人！&quot;</span>, phone, code);</span><br><span class="line">          <span class="comment">// 需要将生成的验证码保存到Session中</span></span><br><span class="line">          session.setAttribute(phone, code);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> Result.success(<span class="string">&quot;手机短信验证码发送成功&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> Result.error(<span class="string">&quot;手机短信验证码发送失败&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><ul><li>登录请求</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706171041816.png"                      alt="image-20230706171041816"                ></p><p>请求参数是json格式的code和phone，phone是User实体类的属性，但是验证码code不是。有两种解决方案：① 定义增强类UserDto； ② 用Map的key-value接收参数。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map userMap, HttpSession session)</span>&#123;</span><br><span class="line">    log.info(userMap.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> userMap.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">    <span class="comment">// 获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> userMap.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从session中获取保存的验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone).toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行验证码的比对（页面提交的验证码和Session中保存的验证码做比对）</span></span><br><span class="line">    <span class="keyword">if</span>(codeInSession != <span class="literal">null</span> &amp;&amp; codeInSession.equals(code))&#123;</span><br><span class="line">        <span class="comment">// 如果能够比对成功，说明登录成功</span></span><br><span class="line">        <span class="comment">// 判断当前手机号对应的用户是否为新用户</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.eq(User::getPhone, phone);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果是新用户则自动注册</span></span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            userService.save(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, user.getId());</span><br><span class="line">        <span class="keyword">return</span> Result.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="地址簿管理"><a href="#地址簿管理" class="headerlink" title="地址簿管理"></a>地址簿管理</h3><p><strong>address_book数据模型</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706171952511.png"                      alt="image-20230706171952511"                ></p><p><strong>表现层代码</strong></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址簿管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addressBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;AddressBook&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line">        addressBookService.save(addressBook);</span><br><span class="line">        <span class="keyword">return</span> Result.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置默认地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;AddressBook&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line">        LambdaUpdateWrapper&lt;AddressBook&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">        wrapper.set(AddressBook::getIsDefault, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//SQL:update address_book set is_default = 0 where user_id = ?</span></span><br><span class="line">        addressBookService.update(wrapper);</span><br><span class="line"></span><br><span class="line">        addressBook.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//SQL:update address_book set is_default = 1 where id = ?</span></span><br><span class="line">        addressBookService.updateById(addressBook);</span><br><span class="line">        <span class="keyword">return</span> Result.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (addressBook != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.success(addressBook);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询默认地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;AddressBook&gt; <span class="title function_">getDefault</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">        queryWrapper.eq(AddressBook::getIsDefault, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SQL:select * from address_book where user_id = ? and is_default = 1</span></span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == addressBook) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.success(addressBook);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询指定用户的全部地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;AddressBook&gt;&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AddressBook</span>();</span><br><span class="line">        addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="literal">null</span> != addressBook.getUserId(), AddressBook::getUserId, addressBook.getUserId());</span><br><span class="line">        queryWrapper.orderByDesc(AddressBook::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SQL:select * from address_book where user_id = ? order by update_time desc</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(addressBookService.list(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>核心业务思路</strong></p><ul><li><p>设置默认地址</p><p>一个用户的默认收货地址只能有一个，如何保证在设置默认地址时，每个用户的默认地址只有一个呢？那就是每次操作address_book数据表时，先将该用户的所有<code>is_default</code>字段都设置为0，再将选中的设置为1。</p></li><li><p>查询指定用户的全部地址</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706173632478.png"                      alt="image-20230706173632478"                ></p></li></ul><p>​    这里不需要请求参数，只需要用户userId，这个可以从Session中获取。</p><h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><p><strong>需求分析</strong></p><ul><li>移动端用户可以将菜品/套餐添加到购物车</li><li>对于菜品来说，如果设置了口味信息，则需要选择规格后才能加入购物车（前端实现）</li><li>对于套餐来说，可以直接点击当前套餐加入购物车</li><li>在购物车中可以修改菜品/套餐的数量，也可以清空购物车</li></ul><p><strong>表现层代码</strong></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/shoppingCart&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向购物车中新增菜品或套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;ShoppingCart&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前用户的id，指定是哪个用户的购物车数据</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        shoppingCart.setUserId(currentId);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">        <span class="comment">// 菜品和套餐的区别是发送的请求参数一个是dishId一个是setmealId</span></span><br><span class="line">        <span class="comment">// SQL: select * from shopping_cart where user_id = ? and [dish_id = ? 或者 setmeal_id = ?]</span></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.eq(ShoppingCart::getUserId, currentId);</span><br><span class="line">        <span class="keyword">if</span>(dishId == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 加入购物车的是套餐setmealId</span></span><br><span class="line">            lambdaQueryWrapper.eq(ShoppingCart::getSetmealId, shoppingCart.getSetmealId());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 加入购物车的是单菜品</span></span><br><span class="line">            lambdaQueryWrapper.eq(ShoppingCart::getDishId, shoppingCart.getDishId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  shopping_cart中的一行数据</span></span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">shoppingCartOne</span> <span class="operator">=</span> shoppingCartService.getOne(lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 还要检查加入购物车菜品或者套餐的数量 -- 如果是第一次添加则setNumber=1，并执行save操作；如果不是第一次添加则updateNumber++</span></span><br><span class="line">        <span class="keyword">if</span>(shoppingCartOne == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 第一次添加</span></span><br><span class="line">            shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">            shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">            shoppingCartService.save(shoppingCart);</span><br><span class="line">            shoppingCartOne = shoppingCart;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 不是第一次添加</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> shoppingCartOne.getNumber();</span><br><span class="line">            shoppingCartOne.setNumber(++number);</span><br><span class="line">            shoppingCartService.updateById(shoppingCartOne);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success(shoppingCartOne);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向购物车中减少菜品或套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/sub&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;ShoppingCart&gt; <span class="title function_">sub</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        shoppingCart.setUserId(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实际请求参数只有dishId或者setmealId</span></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.eq(ShoppingCart::getUserId, userId);</span><br><span class="line">        <span class="keyword">if</span>(shoppingCart.getDishId() != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 菜品</span></span><br><span class="line">            lambdaQueryWrapper.eq(ShoppingCart::getDishId, shoppingCart.getDishId());</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 套餐</span></span><br><span class="line">            lambdaQueryWrapper.eq(ShoppingCart::getSetmealId, shoppingCart.getSetmealId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">one</span> <span class="operator">=</span> shoppingCartService.getOne(lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(one.getNumber() == <span class="number">1</span>)&#123;</span><br><span class="line">            shoppingCartService.remove(lambdaQueryWrapper);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(one.getNumber() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            one.setNumber(one.getNumber() - <span class="number">1</span>);</span><br><span class="line">            shoppingCartService.updateById(one);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success(one);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据登录用户的id查询购物车的列表清单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.eq(ShoppingCart::getUserId, currentId);</span><br><span class="line">        lambdaQueryWrapper.orderByAsc(ShoppingCart::getCreateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;ShoppingCart&gt; list = shoppingCartService.list(lambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">cleanShoppingCart</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.eq(ShoppingCart::getUserId, currentId);</span><br><span class="line">        shoppingCartService.remove(lambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;清空购物车成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="用户下单"><a href="#用户下单" class="headerlink" title="用户下单"></a>用户下单</h3><p><strong>流程分析</strong></p><ol><li>在订单确认页面中，发送ajax请求，请求服务端，获取当前登录用户的默认地址</li><li>在订单确认页面，发送ajax请求，请求服务端，获取当前登录用户的购物车数据</li><li>在订单确认页面点击去支付按钮，发送ajax请求，请求服务端，完成下单操作</li></ol><p><strong>数据模型</strong></p><p>orders数据表：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706184553636.png"                      alt="image-20230706184553636" style="zoom:87%;"                 ><p>order_detail数据表：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230706184642018.png"                      alt="image-20230706184642018" style="zoom:87%;"                 ><p><strong>“下单”核心业务思路</strong></p><p>步骤1：查询当前用户的购物车，判断购物车是否为空，如果为空抛出业务异常无法下单；</p><p>步骤2：向订单表orders插入(1条)数据；</p><p>步骤3：向订单明细表order_detail插入(多条)数据；</p><p>步骤4：清空购物车数据</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户下单提交</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span> &#123;</span><br><span class="line">    <span class="comment">// 获得当前用户的id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询当前用户id的购物车数据</span></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; cartLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    cartLambdaQueryWrapper.eq(ShoppingCart::getUserId, currentId);</span><br><span class="line">    List&lt;ShoppingCart&gt; cartList = shoppingCartService.list(cartLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cartList == <span class="literal">null</span> || cartList.size() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;购物车为空，无法下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询用户数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(currentId);</span><br><span class="line">    <span class="comment">// 查询地址数据</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">addressBookId</span> <span class="operator">=</span> orders.getAddressBookId();</span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(addressBookId);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> IdWorker.getId();<span class="comment">//订单号</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历购物车数据得到订单明细列表数据</span></span><br><span class="line">    List&lt;OrderDetail&gt; orderDetails = cartList.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();</span><br><span class="line">        orderDetail.setOrderId(orderId);</span><br><span class="line">        orderDetail.setNumber(item.getNumber());</span><br><span class="line">        orderDetail.setDishFlavor(item.getDishFlavor());</span><br><span class="line">        orderDetail.setDishId(item.getDishId());</span><br><span class="line">        orderDetail.setSetmealId(item.getSetmealId());</span><br><span class="line">        orderDetail.setName(item.getName());</span><br><span class="line">        orderDetail.setImage(item.getImage());</span><br><span class="line">        orderDetail.setAmount(item.getAmount());</span><br><span class="line">        amount.addAndGet(item.getAmount().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(item.getNumber())).intValue());</span><br><span class="line">        <span class="keyword">return</span> orderDetail;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订单表数据设置</span></span><br><span class="line">    orders.setId(orderId);</span><br><span class="line">    orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">    orders.setCheckoutTime(LocalDateTime.now());</span><br><span class="line">    orders.setStatus(<span class="number">2</span>);</span><br><span class="line">    orders.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(amount.get()));<span class="comment">//总金额</span></span><br><span class="line">    orders.setUserId(currentId);</span><br><span class="line">    orders.setNumber(String.valueOf(orderId));</span><br><span class="line">    orders.setUserName(user.getName());</span><br><span class="line">    orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">    orders.setPhone(addressBook.getPhone());</span><br><span class="line">    orders.setAddress((addressBook.getProvinceName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getProvinceName())</span><br><span class="line">            + (addressBook.getCityName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getCityName())</span><br><span class="line">            + (addressBook.getDistrictName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDistrictName())</span><br><span class="line">            + (addressBook.getDetail() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDetail()));</span><br><span class="line">    <span class="comment">// 向订单表orders插入(1条)数据</span></span><br><span class="line">    <span class="built_in">this</span>.save(orders);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向订单明细表order_detail插入(多条)数据</span></span><br><span class="line">    orderDetailService.saveBatch(orderDetails);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空购物车数据</span></span><br><span class="line">    shoppingCartService.remove(cartLambdaQueryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;适合新手小白入门Java后端开发的Springboot + Mybatis Plus 项目。&lt;/p&gt;</summary>
    
    
    
    <category term="Springboot" scheme="https://kicheng.github.io/categories/Springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>瑞吉外卖项目实战day1</title>
    <link href="https://kicheng.github.io/2023/07/04/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98day1/"/>
    <id>https://kicheng.github.io/2023/07/04/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98day1/</id>
    <published>2023-07-04T03:22:20.000Z</published>
    <updated>2023-07-06T13:53:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>适合新手小白入门Java后端开发的Springboot + Mybatis Plus 项目。</p><span id="more"></span><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><h3 id="配置静态资源映射"><a href="#配置静态资源映射" class="headerlink" title="配置静态资源映射"></a>配置静态资源映射</h3><p>为了访问静态资源，要进行静态资源映射的配置。</p><p>Springboot将静态资源都放在<code>resource/static</code>目录下，会进行自动配置静态资源映射。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230704123442685.png"                      alt="image-20230704123442685"                ></p><p>如果静态资源没放在<code>resource/static</code>目录，要书写配置类实现<code>WebMvcConfigurer</code>接口，重写<code>addResourceHandlers</code>方法，进行手动配置。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>不推荐继承WebMvcConfigurationSupport类，而是使用实现WebMvcConfigurer接口，因为继承类会覆盖Springboot提供的自动静态资源映射配置，而实现接口是在原有的配置上附加映射配置。</p></blockquote><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置Application.yml配置文件，核心是服务器端口号+数据库四要素。</p><p>此外还有mybatis-plus的一些配置。</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure></div><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>导入lombok依赖，通过<code>@Data</code>注释在实体类中只需要定义属性名，会自动生成默认的无参构造方法和setter/getter方法。</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>@AllArgsConstructor</code>：提供全部参数的构造方法，会覆盖<code>@Data</code>提供的无参构造方法。</p><p><code>@NoArgsConstructor</code>：提供默认的无参构造方法。</p><h3 id="统一结果封装"><a href="#统一结果封装" class="headerlink" title="统一结果封装"></a>统一结果封装</h3><p>使用Result类将服务器的响应进行统一格式的结果封装。</p><p>属性：状态位code（0/1）、错误信息msg（String）、数据data（泛型T）</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        result.data = object;</span><br><span class="line">        result.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        result.msg = msg;</span><br><span class="line">        result.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Result&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="业务实现"><a href="#业务实现" class="headerlink" title="业务实现"></a>业务实现</h2><p>编写Controller表现层业务方法时，首先需要通过前端代码以及浏览器开发者工具明确几个要素：</p><ul><li><p>请求类型</p></li><li><p>请求路径</p></li><li><p>请求参数：尽量封装成实体类对象，通过getter得到请求参数。</p><ul><li><code>@PathVariable</code>：RESTful风格的参数</li><li><code>@RequestBody</code>：json格式数据</li><li><code>@RequestParam</code></li></ul></li><li><p>返回值类型：看前端代码需要服务器响应什么类型的数据。</p></li></ul><h3 id="后台登录功能"><a href="#后台登录功能" class="headerlink" title="后台登录功能"></a>后台登录功能</h3><p><strong>表现层要素</strong></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// login.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loginApi</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/employee/login&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>请求类型：POST</p><p>请求路径：<code>/employee/login</code></p><p>请求参数：包含username和password的json格式数据，可以封装成Employee实体类对象</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;userInfo&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>))</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>= <span class="string">&#x27;../../index.html&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>返回值类型：由于前端需要服务端的响应包含<code>data</code>属性，所以返回值应该是<code>Result&lt;Employee&gt;</code>类型</p><p><strong>核心业务思路</strong></p><p>步骤1：先判断请求参数username/password是否为空，任一为空就不用再查表了；</p><p>步骤2：根据请求参数的username查表 – <code>LambdaQueryWrapper</code>封装查询条件；</p><p>步骤3：没查到数据（username）则返回失败；</p><p>步骤4：查询到了数据则进行密码比对，密码不一致返回失败 – 登录功能的密码考虑到安全性可以进行md5加密后再存入数据库：<code>DigestUtils</code>工具类的<code>md5DigestAsHex(String.getBytes())</code>方法；</p><p>步骤5：登陆成功，将员工id存入Session备用。</p><blockquote><p>复习Session：一种服务端的会话跟踪技术，在一次会话的多次请求中共享数据。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Session</span></span><br><span class="line">HttpServletRequset.getSession().setAttribute(String key, Object o);</span><br><span class="line"><span class="comment">// 获取Session内容</span></span><br><span class="line">HttpServletRequset.getSession().getAttribute(String key);</span><br><span class="line"><span class="comment">// 删除Session内容</span></span><br><span class="line">HttpServletRequset.getSession().removeAttribute(String key);</span><br></pre></td></tr></table></figure></div></blockquote><p><strong>登录业务完善</strong></p><p>只有登录成功了才得以访问其他页面，未登录则跳转到登录页面——在过滤器或拦截器中判断用户是否登录。</p><ul><li><p>实现Filter过滤器</p><ul><li><p>在LoginCheckFilter类中实现<code>Filter</code>接口，加类注释<code>@WebFilter</code>，重写<code>doFilter</code>方法；</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Servlet的过滤器对登录功能进行数据增强：访问界面如果未登录则自动跳转到登录界面</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div></li><li><p>Springboot启动类上加<code>@ServletComponentScan</code>注释；</p></li></ul></li><li><p>过滤器登录检查逻辑</p><ul><li><p>获取本次请求的URI</p></li><li><p>定义不需要拦截的请求（静态资源+登录登出有关的资源路径），并判断本次请求是否需要被处理</p><blockquote><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 包含通配符的路径匹配 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"><span class="comment">// -----------具体实现-----------</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkFilter</span><span class="params">(String[] urls, String requestURI)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="keyword">if</span> (PATH_MATCHER.match(url, requestURI)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div></blockquote></li><li><p>如果不需要处理则直接放行</p></li><li><p>判断登录状态（通过Session），如果已登录则放行，如果未登录则通过输出流方式返回结果：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.getWriter().write(JSON.toJSONString(Result.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br></pre></td></tr></table></figure></div><blockquote><p>使用JSON.toJSONString要导入fastjson坐标。</p></blockquote></li></ul></li></ul><h3 id="添加员工功能"><a href="#添加员工功能" class="headerlink" title="添加员工功能"></a>添加员工功能</h3><p><strong>表现层要素</strong></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// member.js  新增---添加员工</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addEmployee</span> (params) &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/employee&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>请求类型：POST</p><p>请求路径：<code>/employee</code></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addEmployee</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;员工添加成功！&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!st) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ruleForm</span> = &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;phone&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// &#x27;password&#x27;: &#x27;&#x27;,</span></span><br><span class="line">        <span class="comment">// &#x27;rePassword&#x27;: &#x27;&#x27;,/</span></span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;idNumber&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>请求参数：包含username、name、phone、sex、idNumber的json格式数据，可以封装成Employee实体类对象</p><p>返回值类型：由于前端需要服务端的响应只有<code>code</code>和<code>msg</code>属性，所以返回值写成<code>Result&lt;String&gt;</code>类型。</p><p><strong>核心业务思路</strong></p><p>Controller表现层直接调用Service层的<code>save</code>添加实体轮类Employee对象，在Mapper层对象解析成Employee数据表中的字段进行数据添加。</p><p><strong>添加员工业务完善</strong></p><p>操作数据库时insert操作要注意：① 数据表中not null的字段必须有值； ② 数据表中主键、not unique字段都不能重复，要进行判断。</p><ul><li>Employee数据表结构：</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230704144542860.png"                      alt="image-20230704144542860" style="zoom:87%;"                 ><p>前端的表单中提交过来的参数填充的字段有：username、name、phone、sex、id_number，主键id雪花算法自动生成、status具有默认值1，所以后面4个not null字段的值需要我们手动来添加：</p><p>而创建人、创建时间、修改人、修改时间字段属于公共字段，不仅员工表有这些字段，在菜品表、分类表等其他表中，也拥有这些字段。那我们有没有办法让这些字段在一个地方统一管理呢？</p><p>解决方案：使用MybatisPlus给我们提供的公共字段自动填充功能。</p><ul><li>在Employee数据表中，username字段not unique不能重复：</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230704144402844.png"                      alt="image-20230704144402844" style="zoom:87%;"                 ><p>步骤1：获取请求参数中的username，调用Service方法检查用户名是否重复；</p><p>步骤2：用户名重复则无法添加，<strong>抛出异常</strong>（进行统一异常处理）并响应给前端提示信息；用户名未重复则操作数据库进行添加操作。</p><p><strong>公共字段自动填充</strong></p><p>步骤1：按照框架要求编写元数据对象处理器MyMetaObjectHandler类，在此类中统一对公共字段赋值，此类需要实现<code>MetaObjectHandler</code>接口，实现接口之后，重写两个方法，一个是插入时填充，一个是修改时填充（字段填充方式，使用metaObject的<code>setValue</code>方法来实现）：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入操作自动填充</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">      <span class="comment">// 在元数据对象处理器中通过LocalThread获取用户id</span></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新操作自动填充</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前线程</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        log.info(<span class="string">&quot;线程id: &#123;&#125;&quot;</span>, id);</span><br><span class="line"></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">       <span class="comment">// 在元数据对象处理器中通过LocalThread获取用户id</span></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤2：在实体类的属性上方加入<code>@TableFiled</code>注解，指定自动填充的策略</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span>  <span class="comment">// 插入时填充字段</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span>  <span class="comment">// 插入和更新时填充字段</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span>  <span class="comment">// 插入时填充字段</span></span><br><span class="line"><span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span>  <span class="comment">// 插入和更新时填充字段</span></span><br><span class="line"><span class="keyword">private</span> Long updateUser;</span><br></pre></td></tr></table></figure></div><p><strong>通过LocalThread获取用户id</strong></p><p>关于id的获取，我们之前是存到session里的，但在<code>MyMetaObjectHandler</code>类中不能获得HttpSession对象，所以我们需要用其他方式来获取登录用户id。</p><p>我们可以使用<code>ThreadLocal</code>来解决这个问题：在学习ThreadLocal之前，我们需要先确认一个事情，<font color="blue">就是客户端发送的每次http请求，对应的在服务端都会分配一个新的线程来处理，在处理过程中涉及到下面类中的方法都属于相同的一个线程：</p><ol><li><code>LoginCheckFilter</code>中的<code>doFilter</code>方法</li><li><code>EmployeeController</code>中的响应方法</li><li><code>MyMetaObjectHandler</code>中的<code>insertFill</code>或者<code>updateFill</code>方法</li></ol><blockquote><p>ThreadLocal并不是一个Thread，而是Thread的局部变量；当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本；所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本；ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</p></blockquote><p>具体实现——</p><p>我们可以在LoginCheckFilter过滤器的的<code>doFilter</code>方法中获取当前登录用户id，并调用<code>ThreadLocal</code>的<code>set</code>方法来设置当前线程的线程局部变量的值（用户id)，然后在MyMetaObjectHandler的<code>insertFill</code>或<code>updateFill</code>方法中调用<code>ThreadLocal</code>的<code>get</code>方法来获得当前线程所对应的线程局部变量的值（用户id)。</p><ul><li>步骤1：common包下新建BaseContext类</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前登录用户的id</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>步骤2：在LoginCheckFilter类（每次请求都会首先经过过滤器类）中获取当前Session的值(用户id)，使用BaseContext封装的<code>setCurrentId</code>方法封装id值</li><li>步骤3：在MyMetaObjectHandler类中获取当前请求所在线程的id值。</li></ul><p><strong>统一异常处理</strong></p><ul><li>统一异常处理框架<ul><li>在common包下添加一个ProjectExceptionAdvice统一异常处理类，加类注释<code>@RestControllerAdvice</code>；</li><li>方法参数是异常类型的对象ex，方法上加类注释<code>@ExceptionHandler(异常类型.class)</code>，返回值一般是<code>Result&lt;String&gt;</code>；</li></ul></li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">doSqlException</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">        log.info(ex.getMessage());  <span class="comment">// Duplicate entry &#x27;lisi&#x27; for key &#x27;employee.idx_username&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* --- 异常逻辑判断（可选） ---  */</span></span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>异常逻辑判断（有些时候需要，有时不用）– <code>ex.getMessage()</code>方法很重要</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;<span class="comment">// Duplicate entry &#x27;lisi&#x27; for key &#x27;employee.idx_username&#x27;</span></span><br><span class="line">    String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> Result.error(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="员工信息分页查询"><a href="#员工信息分页查询" class="headerlink" title="员工信息分页查询"></a>员工信息分页查询</h3><p><strong>表现层要素</strong></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// member.js </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMemberList</span> (params) &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/employee/page&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>请求类型：GET</p><p>请求路径：<code>/employee/page</code></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="keyword">async</span> init () &#123;</span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">      <span class="attr">page</span>: <span class="variable language_">this</span>.<span class="property">page</span>,</span><br><span class="line">      <span class="attr">pageSize</span>: <span class="variable language_">this</span>.<span class="property">pageSize</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">input</span> ? <span class="variable language_">this</span>.<span class="property">input</span> : <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">getMemberList</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">data</span>.<span class="property">records</span> || []</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">counts</span> = res.<span class="property">data</span>.<span class="property">total</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230704170513895.png"                      alt="image-20230704170513895"                ></p><p>请求参数：包含page、pageSzie和可选参数name，因为是get请求，所以请求参数是在请求头中的普通参数</p><p>返回值类型：由于前端需要服务端的响应除了<code>code</code>属性还有<code>res.data.records</code>和<code>res.data.total</code>属性，很明显方法返回值是<code>Result&lt;Page&gt;</code>类型。</p><p><strong>Mybatis-Plus中分页插件配置</strong></p><p>要在Springboot项目中使用分页查询，必须要配置Mybatis-Plus的分页插件：</p><p>在config包下新建MybatisPlusConfig配置类，在方法中首先创建一个MybatisPlus拦截器，在拦截器中再添加分页查询的拦截器，不要忘了将方法注释为<code>@Bean</code>方法。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置MybatisPlus的分页插件</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>核心业务思路</strong></p><p>分页查询的请求参数是page、pageSize，响应参数也是page，它的业务逻辑比较固定，直接展示实现基本分页功能的表现层代码了：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Page&gt; <span class="title function_">pageSelect</span><span class="params">(Integer page, Integer pageSize, String name)</span>&#123;</span><br><span class="line">        <span class="comment">// 构造分页构造器</span></span><br><span class="line">        Page&lt;Employee&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">        <span class="comment">// 构造条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加过滤条件</span></span><br><span class="line">        lambdaQueryWrapper.like(StringUtils.hasText(name), Employee::getName, name);  <span class="comment">// 或者 name != null</span></span><br><span class="line">        <span class="comment">// 添加排序条件</span></span><br><span class="line">        lambdaQueryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        employeeService.page(pageInfo, lambdaQueryWrapper);  <span class="comment">// IService的page函数会将查询数据自动封装到pageInfo当中</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(pageInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h3 id="禁用-启用员工账号"><a href="#禁用-启用员工账号" class="headerlink" title="禁用/启用员工账号"></a>禁用/启用员工账号</h3><p>在员工管理列表页面，可以对某个员工账号进行启用或者禁用操作：账号禁用的员工不能登录系统，启用后的员工可以正常登录。【前端业务】需要注意，只有管理员（admin用户）可以对其他普通用户进行启用、禁用操作，所以普通用户登录系统后启用、禁用按钮不显示。</p><p><strong>表现层要素</strong></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// member.js --启用禁用接口</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enableOrDisableEmployee</span> (params) &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/employee&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>请求类型：PUT</p><p>请求路径：<code>/employee</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230704173524643.png"                      alt="image-20230704173524643"                ></p><p>请求参数：包含id和status的json格式数据，可以封装成Employee实体类对象（这里注意一下，status为0则表示客户端的禁用请求，status为1则表示客户端的启用请求）</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">enableOrDisableEmployee</span>(&#123; <span class="string">&#x27;id&#x27;</span>: <span class="variable language_">this</span>.<span class="property">id</span>, <span class="string">&#x27;status&#x27;</span>: !<span class="variable language_">this</span>.<span class="property">status</span> ? <span class="number">1</span> : <span class="number">0</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;enableOrDisableEmployee&#x27;</span>,res)</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;账号状态更改成功！&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">handleQuery</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>返回值类型：由于前端需要服务端的响应只有<code>code</code>属性，所以返回值写成<code>Result&lt;String&gt;</code>类型。</p><p><strong>核心业务思路</strong></p><p>将请求参数传入Service的updateById方法，就可以更改相应employee数据的status字段值。</p><p><font color="blue">但是通过日志我们发现，数据并没有修改成功，原因是服务端接收到的Long类型的请求参数<code>employee.id</code> 通过前端js已经丢失了精度，导致id不准确，无法从数据库中找到相应id的数据！</font></p><p>解决方案是：我们可以在服务端给页面响应json数据时进行处理，将Long型数据统一转为String字符串。</p><p><strong>拓展mvc的消息转换器</strong></p><p>可以自定义服务器Result对象序列化成json数据的细节，比如数据类型Long→String，比如自定义时间格式等。</p><p>步骤1：common包下配置对象映射器<font color="red">（工具类可以直接复制代码）</font></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤2：扩展Mvc框架的消息转换器</p><p>config包下的WebMvcConfig配置类，实现<code>WebMvcConfigurer</code>接口，重写<code>extendMessageConverters</code>方法（方法在项目启动时就被调用）。springboot自己的消息转换器可以把返回的Result对象序列化成json数据响应给前端，而我们可以根据自己的需要扩展消息转换器。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展mvc框架的消息转换器: springboot自己的消息转换器可以把返回的Result对象序列化成json数据响应给前端，而我们可以根据自己的需要扩展消息转换器</span></span><br><span class="line"><span class="comment">     * (方法在项目启动时调用)</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;扩展消息转换器...&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建消息转换器对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">// 设置对象转换器，底层使用jackson将Java对象转换成json数据</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">// 将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">        converters.add(<span class="number">0</span>, messageConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="编辑员工信息"><a href="#编辑员工信息" class="headerlink" title="编辑员工信息"></a>编辑员工信息</h3><p><strong>流程分析</strong></p><p>后续我们会开发一些比较复杂的业务功能，一个业务功能处理多个请求发送多个响应数据，所以流程分析是很重要的。</p><ol><li>在list.html页面中，点击编辑按钮，页面跳转到add.html中，并在url中携带employee的id；</li><li>发送ajax请求（回显数据的请求），将id提交给服务器；</li><li>服务器接收请求，根据id查询employee信息，并将员工信息响应给页面；</li><li>页面接收服务端的json数据，并通过Vue的双向绑定进行员工信息回显；</li><li>点击保存按钮，发送ajax请求（修改数据的请求），将id和表单数据一起提交至服务端；</li><li>服务端接收员工信息，根据id修改员工的信息，完成后给页面响应。</li></ol><p><strong>表现层要素</strong></p><ul><li>回显数据的请求</li></ul><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// member.js -- 修改页面反查详情接口</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryEmployeeById</span> (id) &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/employee/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230704201830485.png"                      alt="image-20230704201830485"                ></p><p>请求类型：GET</p><p>请求路径：<code>/employee/&#123;id&#125;</code></p><p>请求参数：只有员工id，且是RESTful风格，需要加<code>@PathVariable</code>注解</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">queryEmployeeById</span>(<span class="variable language_">this</span>.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ruleForm</span> = res.<span class="property">data</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">sex</span> = res.<span class="property">data</span>.<span class="property">sex</span> === <span class="string">&#x27;0&#x27;</span> ? <span class="string">&#x27;女&#x27;</span> : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    <span class="comment">// this.ruleForm.password = &#x27;&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>返回值类型：前端需要服务端的响应<code>data</code>属性，所以方法返回值是Result<Employee>类型。</p><ul><li>修改数据的请求</li></ul><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改---添加员工</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">editEmployee</span> (params) &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/employee&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>请求类型：PUT</p><p>请求路径：<code>/employee</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230704210234755.png"                      alt="image-20230704210234755"                ></p><p>请求参数：json格式的员工信息</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">editEmployee</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;员工信息修改成功！&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>返回值类型：前端只要服务端的响应<code>code</code>和<code>msg</code>属性，所以方法返回值是<code>Result&lt;String&gt;</code>类型即可。</p><p><strong>核心业务思路</strong></p><p>通过员工id查询Employee数据表进行数据回显；前端点击修改按钮后，服务端接收修改后的Employee对象请求参数，调用Service层的updateById传回employee对象即可修改数据表内容。</p><h3 id="新增菜品分类"><a href="#新增菜品分类" class="headerlink" title="新增菜品分类"></a>新增菜品分类</h3><p><strong>数据模型</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705093303752.png"                      alt="image-20230705093303752"                ></p><p>菜品分类id字段是主键，name分类名称是unique唯一的，type为1表示菜品分类，type为2表示套餐分类。</p><p><strong>表现层要素</strong></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// category.js -- 新增接口</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">addCategory</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;/category&#x27;</span>,</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>请求类型：POST</p><p>请求路径：<code>/employee</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705094033530.png"                      alt="image-20230705094033530"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705094411620.png"                      alt="image-20230705094411620"                ></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addCategory</span>(&#123;<span class="string">&#x27;name&#x27;</span>: classData.<span class="property">name</span>,<span class="string">&#x27;type&#x27;</span>:<span class="variable language_">this</span>.<span class="property">type</span>, <span class="attr">sort</span>: classData.<span class="property">sort</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;分类添加成功！&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!st) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">dialogVisible</span> = <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">name</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">sort</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">handleQuery</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>请求参数：json格式的请求参数，包含name、type、sort字段，可以封装成Category对象</p><p>返回值类型：前端需要服务端的响应只有<code>code</code>和<code>msg</code>属性，所以方法返回值是<code>Result&lt;String&gt;</code>类型</p><p><strong>核心业务思路</strong></p><p>前面已经做过新增员工的业务逻辑，新增菜品分类的其实都是一样的，<strong>（新增业务的重点）保证每一个not null的字段都有赋值且unique的字段没有重复</strong>，再通过Service层的save方法调用进而mapper操作数据库进行添加数据。</p><h3 id="分类信息分页查询"><a href="#分类信息分页查询" class="headerlink" title="分类信息分页查询"></a>分类信息分页查询</h3><p><strong>表现层要素</strong></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// category.js -- 查询列表接口</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">getCategoryPage</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;/category/page&#x27;</span>,</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">     params</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>请求类型：GET</p><p>请求路径：<code>/category/page</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705094851492.png"                      alt="image-20230705094851492"                ></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title function_">getCategoryPage</span>(&#123;<span class="string">&#x27;page&#x27;</span>: <span class="variable language_">this</span>.<span class="property">page</span>, <span class="string">&#x27;pageSize&#x27;</span>: <span class="variable language_">this</span>.<span class="property">pageSize</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">data</span>.<span class="property">records</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">counts</span> = <span class="title class_">Number</span>(res.<span class="property">data</span>.<span class="property">total</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>请求参数：分页查询，请求参数是普通请求头里的page、pageSize。</p><p>返回值类型：<code>Result&lt;Page&gt;</code>类型</p><p><strong>核心业务思路</strong></p><p>对于分页查询来说，我们一定要记得配置MybatisPlus的分页查询插件。除此之外，表现层的业务代码非常简单：分页构造器+条件构造器（排序条件），调用Service层的page函数即可，最终把分页构造器响应给前端用来页面的展示。</p><blockquote><p>分页插件的配置，再复习一下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></blockquote><h3 id="删除菜品分类"><a href="#删除菜品分类" class="headerlink" title="删除菜品分类"></a>删除菜品分类</h3><p><strong>表现层要素</strong></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// category.js -- 删除当前列的接口</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">deleCategory</span> = (<span class="params">ids</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;/category&#x27;</span>,</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">     <span class="attr">params</span>: &#123; ids &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705100107054.png"                      alt="image-20230705100107054"                ></p><p>请求类型：DELETE</p><p>请求路径：<code>/category/&#123;ids&#125;</code></p><p>请求参数：RESTful风格的菜品id参数，如果方法参数名和前端请求参数名不一致，需要在注释后面加<code>@PathVariable(&quot;参数名&quot;)</code>参数名进行映射。</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">deleCategory</span>(id).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;删除成功！&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">handleQuery</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>返回值类型：<code>Result&lt;String&gt;</code>类型</p><p><strong>核心业务思路</strong></p><p>因为请求参数是Category数据表的主键值id，所以直接调用Service层的<code>removeById</code>删除数据即可。和新增业务必须考虑的not null和unique字段一样，删除业务也有必须考虑的点：<strong>也就是当前要删除的数据，是否跟其他表中的数据相关联。</strong>对于当前来说，当菜品分类或套餐分类关联了其他菜品或套餐时，该分类将不允许被删除，所以我们需要进一步完善我们的删除业务逻辑。<font color="red">（是否可以直接把关联通过外键约束等体现在数据库中，这需要进一步优化数据库表？复习完mysql再回来研究）</font></p><p>MybatisPlus中的Service层提供的删除方法不能满足我们的业务需求，所以我们在Service层手动添加remove方法：我们需要在删除数据之前，根据<code>id</code>值，去<code>Dish</code>表和<code>Setmeal</code>表中（<code>category_id</code>字段）查询是否关联了数据：如果存在关联数据，则不能删除，并抛一个自定义的业务异常。</p><blockquote><p>复习一下统一异常处理：自定义业务异常</p><p>步骤1：在exception包下创建响应的Exception类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的业务异常</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤2：在统一异常处理类中自定义异常处理方法</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理方法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(ServiceException.class)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">doServiceException</span><span class="params">(ServiceException ex)</span>&#123;</span><br><span class="line">    log.info(ex.getMessage());</span><br><span class="line">    <span class="keyword">return</span> Result.error(ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></blockquote><h3 id="修改菜品分类"><a href="#修改菜品分类" class="headerlink" title="修改菜品分类"></a>修改菜品分类</h3><p><strong>表现层要素</strong></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// category.js -- 修改接口</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">editCategory</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;/category&#x27;</span>,</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705105056053.png"                      alt="image-20230705105056053"                ></p><p>请求类型：PUT</p><p>请求路径：<code>/category</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705105128881.png"                      alt="image-20230705105128881"                ></p><p>请求参数：json格式的菜品id、name、sort参数，封装成Category对象。</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">editCategory</span>(&#123;<span class="string">&#x27;id&#x27;</span>:<span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">id</span>,<span class="string">&#x27;name&#x27;</span>: <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">name</span>, <span class="attr">sort</span>: <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">sort</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;分类修改成功！&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">dialogVisible</span> = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">handleQuery</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>返回值类型：<code>Result&lt;String&gt;</code>类型</p><blockquote><p>这里的数据回显完全交由前端来处理，我们简单了解下前端是如何完成数据回显的即可。页面首先通过<code>scope.row</code> 传递当前行的数据对象，通过v-model双向绑定完成数据的回显。</p></blockquote><p><strong>核心业务思路</strong></p><p>没什么好讲的，直接调用Service原生的<code>updateById</code>方法把实体类对象传进去。</p><h3 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h3><p><strong>文件上传</strong></p><p>文件上传，也叫upload，是指将本地图片、视频、音频等文件上传到服务器中，可以供其他用户浏览或下载的过程。</p><p>文件上传的前端业务我们不需要掌握，只需要了解文件上传是通过采用post方式提交数据即可。Spring框架在spring-web包中对文件上传进行了封装，大大简化了服务端代码，我们只需要在Controller的方法中声明一个<code>MultipartFile</code>类型的参数即可接收上传的文件：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;  <span class="comment">// 请求参数名是Form-Data的name值</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(fileName);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>这里的MultipartFile类型的参数名不是随意定的，要和前端请求参数中Form-Data的<code>name</code>值一致才可以！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705112408492.png"                      alt="image-20230705112408492"                ></p></blockquote><p><strong>文件下载</strong></p><p>文件下载，也称为了download，是指将文件从服务器传输到本地计算机的过程，<strong>本质上就是服务端将文件以流的形式写回浏览器的过程</strong>。通过浏览器进行文件下载，通常有两种表现形式：① 以附件形式下载，弹出保存对话框，将文件保存到指定磁盘目录；② 直接在浏览器中打开。</p><p><strong>文件上传核心业务实现</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705161814263.png"                      alt="image-20230705161814263"                ></p><p>请求类型：POST</p><p>请求路径：<code>/common/upload</code></p><p>请求参数：<code>MultipartFile</code>类型的对象<code> file</code></p><p>方法返回值：<code>Result&lt;String&gt;</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 注入配置文件的属性</span></span><br><span class="line"> <span class="meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class="line"> <span class="keyword">private</span> String basePath;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;  <span class="comment">// 请求参数名是Form-Data的name值</span></span><br><span class="line">     log.info(file.toString());</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 本地的是一个临时文件，需要转存到指定位置，否则本次请求完成后临时文件会删除</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();   <span class="comment">// xxxxxxx.jpg</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 使用UUID重新生成文件名，防止文件名重复造成的文件覆盖</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + suffix;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* 判断文件目录basePath确实存在，若不存在则先进行创建 */</span></span><br><span class="line">     <span class="comment">// 创建一个目录对象</span></span><br><span class="line">     <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">     <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">         dir.mkdirs();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName));  <span class="comment">// 转存文件</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> Result.success(fileName);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>因为上传至服务器的是一个临时文件（完成本次请求后会被删除），所以我们需要设定文件转存到指定位置，在yml配置文件中设置保存在服务器中的路径并通过<code>@Value(&quot;$&#123;xxx&#125;&quot;)</code>获得路径：</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义下载上传图片的路径配置</span></span><br><span class="line"><span class="attr">reggie:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/Users/NUC/git/SSM/reggie_take_out/src/main/resources/picture/</span></span><br></pre></td></tr></table></figure></div><p><strong>文件下载核心业务实现</strong></p><p>前端页面的ElementUI在上传完图片后发送请求，服务端以流的方式（输出流）将文件写回给浏览器，在浏览器中展示图片：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">handleAvatarSuccess (response, file, fileList) &#123;</span><br><span class="line">  <span class="comment">// 拼接down接口预览</span></span><br><span class="line">  <span class="keyword">if</span>(response.<span class="property">code</span> === <span class="number">0</span> &amp;&amp; response.<span class="property">msg</span> === <span class="string">&#x27;未登录&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">top</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;../login/login.html&#x27;</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">imageUrl</span> = <span class="string">`/common/download?name=<span class="subst">$&#123;response.data&#125;</span>`</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">image</span> = response.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705162548370.png"                      alt="image-20230705162548370"                ></p><p>请求类型：GET</p><p>请求路径：<code>/common/download</code></p><p>请求参数：String类型的文件名name</p><p>方法返回值：无</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件下载</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(HttpServletResponse response, <span class="meta">@RequestParam(&quot;name&quot;)</span> String fileName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 输入流，通过输入流读取文件内容</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName));</span><br><span class="line">    <span class="comment">// 输出流，通过输出流将文件写回浏览器，在浏览器展示图片</span></span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置响应数据的类型</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>((len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        outputStream.write(bytes,<span class="number">0</span> ,len);</span><br><span class="line">        outputStream.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">    outputStream.close();</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>文件下载中有一个容易被忽视的点：浏览器需要知道文件的类型，所以必须设置相应数据的类型<code>response.setContentType</code>，否则会导致下载失败。</p></blockquote><h3 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h3><p><strong>流程分析</strong></p><ol><li>add.html页面发送ajax请求，请求服务器获取菜品分类并展示到下拉框中</li><li>选择图片进行上传，请求服务器将图片保存在服务器当中</li><li>上传成功后前端会自动发送下载请求，回显上传的图片</li><li>点击保存按钮，发送ajax请求，将菜品相关json数据提供到服务器端进行处理</li></ol><p><strong>表现层要素</strong></p><p>上传下载请求上一节讲的很明白了这里就不说了，主要讲一下第一个请求（是容易被忽略掉的）和第四个请求。</p><ul><li>获取菜品分类并展示到下拉框</li></ul><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取菜品分类列表</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getCategoryList</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/category/list&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>请求类型：GET</p><p>请求路径：<code>/category/list</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705171036768.png"                      alt="image-20230705171036768"                ></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取菜品分类</span></span><br><span class="line">getDishList () &#123;</span><br><span class="line">  <span class="title function_">getCategoryList</span>(&#123; <span class="string">&#x27;type&#x27;</span>: <span class="number">1</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dishList</span> = res.<span class="property">data</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><p>请求参数：菜品分类Category对象中的分类类型type，可以封装成Category对象</p><p>方法返回值：前端得到服务器响应的结果有<code>data</code>属性，返回值应该是<code>Result&lt;List&gt;</code>类型，将查询到的列表响应给前端</p><ul><li>将新增菜品json数据提交</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705163823971.png"                      alt="image-20230705163823971"                ></p><p>请求类型：POST</p><p>请求路径：<code>/dish</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705163902869.png"                      alt="image-20230705163902869"                ></p><p>请求参数：json格式的dish菜品信息，外加flavors是一个json数组。而flavors不是Dish类中的属性，Dish对象不足以接收本次请求的参数，所以需要导入Dish的增强类DishDto，用于封装页面提交的数据。</p><blockquote><p>DTO，全称为<code>Data Transfer Object</code>，即数据传输对象，一般用于展示层与服务层之间的数据传输。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></blockquote><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">actionType</span> == <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">delete</span> params.<span class="property">id</span></span><br><span class="line">  <span class="title function_">addDish</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;菜品添加成功！&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (!st) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dishFlavors</span> = []</span><br><span class="line">        <span class="comment">// this.dishFlavorsData = []</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">imageUrl</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ruleForm</span> = &#123;</span><br><span class="line">          <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;image&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;dishFlavors&#x27;</span>: [],</span><br><span class="line">          <span class="string">&#x27;status&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">categoryId</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></div><p>返回值类型：<code>Result&lt;String&gt;</code>类型</p><p><strong>核心业务思路</strong></p><ul><li>获取菜品分类并展示到下拉框</li></ul><p>​        将请求参数type作为查询条件，调用Service层的<code>list</code>将菜品分类列表响应给前端即可。</p><ul><li>将新增菜品json数据提交</li></ul><p>​        由于请求参数是json格式的嵌套，且flavors口味数据并不在Dish数据表中，所以要完成新增菜品的业务我们需要：① 在dish数据表中添加菜品基本信息； ② 在dish_flavor数据表中添加口味信息。    </p><p>​        步骤1：因为要在两张数据表中添加数据，所以不能用MyabtisPlus提供好的Service层方法，我们在Service中自定义新增方法；</p><p>​        <font color="red">因为这里要在多张表中添加或修改数据，所以要加入事务管理：① 在Service层方法或类上加注释<code>@Transactional</code>； ② 在启动类上加注释<code>@EnableTransactionManagement</code>.</font></p><p>​        步骤2：添加菜品的基本信息到dish菜品表<code>this.save(dishDto);</code>；<font color="blue">（这里可以直接传dishDto对象）</font></p><p>​        步骤3：添加菜品口味数据flavors到菜品口味表dish_flavor，要注意dish_id（是一个not null字段）无法通过flavors列表赋值要通过Dto对象手动set。</p><p>​                               <img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705182604710.png"                      alt="image-20230705182604710" style="zoom:77%;"                 ></p><h3 id="菜品信息分页查询"><a href="#菜品信息分页查询" class="headerlink" title="菜品信息分页查询"></a>菜品信息分页查询</h3><p><strong>流程分析</strong></p><p>这里的分页查询其实也是发送了两次请求：</p><ol><li>请求参数page、pageSize和可选参数name，发送分页请求并回显在页面上；</li><li>向服务端发送下载请求，将图片回显到页面上。（这个请求前面的CommonController表现层已经实现功能响应）</li></ol><p><strong>核心业务思路</strong></p><p>分页查询前面已经做过好多了，这里的分页查询图片列和菜品分类列比较特殊：</p><ul><li>图片列：会用到文件的下载功能</li><li>菜品分类列：由于我们的dish菜品表只保存了category_id，所以我们需要在category分类表中查询category_id对应的菜品分类名称，从而回显数据</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705184128037.png"                      alt="image-20230705184128037"                ></p><p>因为代码中用到了几个比较关键的知识点，所以这里我直接展示业务代码，也方便到时候复习来看：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Page&gt; <span class="title function_">pageSelect</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">        Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">        Page&lt;DishDto&gt; dishDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.like(name != <span class="literal">null</span>, Dish::getName, name);</span><br><span class="line">        lambdaQueryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line">      </span><br><span class="line">        dishService.page(pageInfo, lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象拷贝pageInfo除了&quot;records&quot;属性</span></span><br><span class="line">        BeanUtils.copyProperties(pageInfo, dishDtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line">        List&lt;DishDto&gt; dishDtoList = records.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            BeanUtils.copyProperties(item, dishDto);</span><br><span class="line"></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dishDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        dishDtoPage.setRecords(dishDtoList);</span><br><span class="line">        <span class="keyword">return</span> Result.success(dishDtoPage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h3 id="修改菜品"><a href="#修改菜品" class="headerlink" title="修改菜品"></a>修改菜品</h3><p><strong>流程分析</strong></p><ol><li>页面发送ajax请求，请求服务器获取分类数据，用于菜品分类下拉框的数据回显（之前已经实现过了）</li><li>页面发送ajax请求，请求服务端，根据id查询当前菜品信息，用于菜品信息回显</li><li>页面发送请求，请求服务端进行图片下载，用于页面图片回显（之前已经实现过了）</li><li>点击保存按钮，页面发送ajax请求，将修改后的菜品相关数据以json形式提交到服务端</li></ol><p><strong>表现层要素</strong></p><ul><li>回显数据</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705214455637.png"                      alt="image-20230705214455637"                ></p><p>请求类型：GET</p><p>请求路径：<code>/dish/&#123;id&#125;</code></p><p>请求参数：RESTful风格的菜品id</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">queryDishById</span>(<span class="variable language_">this</span>.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ruleForm</span> = &#123; ...res.<span class="property">data</span> &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">price</span> = <span class="title class_">String</span>(res.<span class="property">data</span>.<span class="property">price</span>/<span class="number">100</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">status</span> = res.<span class="property">data</span>.<span class="property">status</span> == <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dishFlavors</span> = res.<span class="property">data</span>.<span class="property">flavors</span> &amp;&amp; res.<span class="property">data</span>.<span class="property">flavors</span>.<span class="title function_">map</span>(<span class="function"><span class="params">obj</span> =&gt;</span> (&#123; ...obj, <span class="attr">value</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(obj.<span class="property">value</span>),<span class="attr">showOption</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this.dishFlavors&#x27;</span>,<span class="variable language_">this</span>.<span class="property">dishFlavors</span>)</span><br><span class="line">    <span class="comment">// this.ruleForm.id = res.data.data.categoryId</span></span><br><span class="line">    <span class="comment">// this.imageUrl = res.data.data.image</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">imageUrl</span> = <span class="string">`/common/download?name=<span class="subst">$&#123;res.data.image&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>方法返回值：前端用到了响应的<code>data.flavors</code>属性，所以响应的数据一定是Result<DishDto>类型</p><ul><li>提交修改数据</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705215233049.png"                      alt="image-20230705215233049"                ></p><p>请求类型：PUT</p><p>请求路径：<code>/dish</code></p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230705215325955.png"                      alt="image-20230705215325955" style="zoom:77%;"                 ><p>请求参数：json格式的DishDto对象</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">editDish</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;菜品修改成功！&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>方法返回值：<code>Result&lt;String&gt;</code></p><p><strong>核心业务思路</strong></p><ul><li>回显数据</li></ul><p>​        这里的数据回显还是值得一提的。通常来说数据回显就是以id作为请求参数向服务端发送查询请求，在以id作为主键的数据表中查询到该条数据并将该对象作为相应参数返回并回显在页面上。但是这里回显的数据内容除了以id作为主键的dish菜品表外，还有flavors口味信息，需要在dish_flavor表中查询多条数据。</p><p>​        步骤1：在Service层自定义一个根据菜品id查询的业务层方法；</p><p>​        步骤2：根据id查询dish菜品表中的基本信息，只需要调用MybatisPlus原生的<code>getOne</code>方法得到查询到的Dish对象；</p><p>​        步骤3：因为要在dish_flavor表再做查询，而Dish对象没有flavors属性，所以定义一个DishDto增强对象，并进行Dish的对象拷贝；</p><p>​        步骤4：根据DishDto的id属性查询dish_id = id的DishDto对象列表，set给DishDto的flavors属性，将DishDto响应给前端。</p><ul><li><p>提交修改数据</p><p>很显然这里也要涉及两张表dish表和dish_flavor表的修改操作，所以先在Service实现类上加上注释<code>@Transactional</code>。</p><p>步骤1：先在Service实现类上加上注释<code>@Transactional</code>；</p></li></ul><p>​       步骤2：将请求参数DishDto传入MybatisPlus原生的<code>updateById</code>方法修改dish表中的菜品基本信息；</p><p>​       步骤3：在dish_flavor表中涉及多条数据的修改，所以这里的修改我们将其拆分为删除+添加两个过程来完成：首先是将dish_id = DishDto.id的数据删除；</p><p>​       步骤4：再将DishDto.flavors这个列表通过<code>saveBatch</code>方法添加到口味表中，其中dish_id字段在DishDto.flavors中没有相应的属性对应，要进行手动的set。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;适合新手小白入门Java后端开发的Springboot + Mybatis Plus 项目。&lt;/p&gt;</summary>
    
    
    
    <category term="Springboot" scheme="https://kicheng.github.io/categories/Springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>IDEA中集成git</title>
    <link href="https://kicheng.github.io/2023/06/30/IDEA%E4%B8%AD%E9%9B%86%E6%88%90git/"/>
    <id>https://kicheng.github.io/2023/06/30/IDEA%E4%B8%AD%E9%9B%86%E6%88%90git/</id>
    <published>2023-06-30T09:21:51.000Z</published>
    <updated>2023-06-30T11:42:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客主要记录git的常用命令以及在IDE中集成git简化版本控制操作。</p><span id="more"></span><p>git安装以及更新（macOS）：<a class="link"   href="https://docs.brew.sh/Installation" >安装Homebrew<i class="fa-solid fa-up-right-from-square"></i></a></p><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><h3 id="git全局设置"><a href="#git全局设置" class="headerlink" title="git全局设置"></a>git全局设置</h3><ul><li><p>git版本</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></div></li><li><p>设置用户信息</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;KiCheng&quot;</span><br><span class="line">git config --global user.email &quot;lijiacehng053@gmail.com&quot;</span><br></pre></td></tr></table></figure></div></li><li><p>查看配置信息</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="获取本地仓库"><a href="#获取本地仓库" class="headerlink" title="获取本地仓库"></a>获取本地仓库</h3><ul><li><p>在本地初始化一个git仓库（不常用）</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></div></li><li><p>从远程仓库克隆（常用）</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [URL]</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h3><ul><li><p>查看文件状态</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></div></li><li><p>将文件的修改加入暂存区</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [文件名] / git add .</span><br></pre></td></tr></table></figure></div></li><li><p>将暂存区的文件取消暂存或者是切换到指定版本</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset [文件名] / git reset .</span><br><span class="line">git reset --hard [版本号]</span><br></pre></td></tr></table></figure></div></li><li><p>将暂存区的文件修改提交到本地版本库</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;[注释内容]&quot;</span><br></pre></td></tr></table></figure></div></li><li><p>查看日志</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><ul><li><p>查看远程仓库</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote / git remote -v</span><br></pre></td></tr></table></figure></div></li><li><p>连接到远程仓库</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add [远程仓库名(通常是origin)] [URL]</span><br></pre></td></tr></table></figure></div></li><li><p>从远程仓库克隆</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [URL]</span><br></pre></td></tr></table></figure></div></li><li><p>从远程仓库拉取</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [远程仓库名] [分支名]</span><br></pre></td></tr></table></figure></div></li><li><p>推送到远程仓库</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [远程仓库名] [分支名]</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><ul><li><p>查看分支</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></div></li><li><p>创建分支</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [分支名]</span><br></pre></td></tr></table></figure></div></li><li><p>切换分支</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [分支名]</span><br></pre></td></tr></table></figure></div></li><li><p>推送至远程仓库分支</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [远程仓库名] [分支名]</span><br></pre></td></tr></table></figure></div></li><li><p>合并分支</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [分支名]</span><br></pre></td></tr></table></figure></div></li></ul><blockquote><p>分支合并时冲突：手动处理合并冲突再重新<code>add</code> +<code> commit -i</code>.</p></blockquote><h3 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h3><ul><li><p>列出已有标签</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure></div></li><li><p>创建标签</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag [标签名]</span><br></pre></td></tr></table></figure></div></li><li><p>将标签推送至远程仓库</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag [远程仓库名] [标签名]</span><br></pre></td></tr></table></figure></div></li><li><p>创建新分支检出标签</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [新建分支名] [标签名]</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="IDEA中集成git"><a href="#IDEA中集成git" class="headerlink" title="IDEA中集成git"></a>IDEA中集成git</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230630182031051.png"                      alt="image-20230630182031051" style="zoom:77%;"                 ><h3 id="获取本地仓库-1"><a href="#获取本地仓库-1" class="headerlink" title="获取本地仓库"></a>获取本地仓库</h3><h4 id="方法一：本地初始化仓库"><a href="#方法一：本地初始化仓库" class="headerlink" title="方法一：本地初始化仓库"></a>方法一：本地初始化仓库</h4><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230630182255719.png"                      alt="image-20230630182255719" style="zoom:77%;"                 ><p>路径选择IDE中的demo目录即可。</p><h4 id="方法二：从远程仓库克隆"><a href="#方法二：从远程仓库克隆" class="headerlink" title="方法二：从远程仓库克隆"></a>方法二：从远程仓库克隆</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230630182549048.png"                      alt="image-20230630182549048"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230630182656435.png"                      alt="image-20230630182656435"                ></p><h3 id="本地仓库操作-1"><a href="#本地仓库操作-1" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h3><ul><li><p>将文件加入暂存区</p><p>IDEA会弹出提示框，自动把新建或修改的文件add到暂存区，也可以手动添加。</p></li></ul><blockquote><p>未加入暂存区的文件是红色的，加入暂存区的文件是绿色的：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230630183314045.png"                      alt="image-20230630183314045"                ></p></blockquote><ul><li>将暂存区的文件提交到版本库</li></ul><p>​                                        <img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230630183737356.png"                      alt="image-20230630183737356" style="zoom: 50%;"                 ></p><ul><li>查看日志</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230630184053887.png"                      alt="image-20230630184053887"                ></p><h3 id="远程仓库操作-1"><a href="#远程仓库操作-1" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><ul><li>查看并添加远程仓库</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230630193049503.png"                      alt="image-20230630193049503" style="zoom:67%;"                 ><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230630193130607.png"                      alt="image-20230630193130607" style="zoom:87%;"                 ><ul><li>推送至远程仓库</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230630184015304.png"                      alt="image-20230630184015304" style="zoom:77%;"                 ><ul><li>从远程仓库拉取</li></ul><h3 id="分支操作-1"><a href="#分支操作-1" class="headerlink" title="分支操作"></a>分支操作</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230630193635799.png"                      alt="image-20230630193635799"                ></p><ul><li><p>将分支推送到远程仓库</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230630193920080.png"                      alt="image-20230630193920080" style="zoom:87%;"                 ></li><li><p>合并分支</p></li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230630194033825.png"                      alt="image-20230630194033825" style="zoom:80%;"                 >]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇博客主要记录git的常用命令以及在IDE中集成git简化版本控制操作。&lt;/p&gt;</summary>
    
    
    
    <category term="Git" scheme="https://kicheng.github.io/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Maven进阶</title>
    <link href="https://kicheng.github.io/2023/06/22/Maven%E8%BF%9B%E9%98%B6/"/>
    <id>https://kicheng.github.io/2023/06/22/Maven%E8%BF%9B%E9%98%B6/</id>
    <published>2023-06-22T02:20:18.000Z</published>
    <updated>2023-06-23T05:31:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Maven就是是专门为Java项目打造的管理和构建工具，它 提供了一套标准化的项目结构、提供了一套标准化的构建流程等等。</p><span id="more"></span><h2 id="分模块开发"><a href="#分模块开发" class="headerlink" title="分模块开发"></a>分模块开发</h2><h3 id="分模块开发设计"><a href="#分模块开发设计" class="headerlink" title="分模块开发设计"></a>分模块开发设计</h3><p>1、按照功能拆分：如果把不同业务场景的模块代码放入到一个项目，那么当其中某一个模块代码出现问题，就会导致整个项目无法正常启动，从而导致多个业务都无法正常运行。所以我们会<strong>按照功能</strong>将项目进行拆分。</p><p>2、按照模块拆分：比如电商的项目中，有订单和商品两个模块，订单中需要包含商品的详细信息，所以需要商品的模型类，商品模块也会用到商品的模型类，这个时候如果两个模块中都写模型类，就会出现重复代码，后期的维护成本就比较高。我们就想能不能将它们公共的部分抽取成一个独立的模块，其他模块要想使用可以像添加第三方jar包依赖一样来使用我们自己抽取的模块，这样就解决了代码重复的问题，这种拆分方式就说我们所说的<strong>按照模块</strong>拆分。</p><p>我们可以将原始模块按照功能拆分成若干个子模块，方便模块间的相互调用，接口共享：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230622151943596.png"                      alt="image-20230622151943596" style="zoom:77%;"                 ><p>这样的话，项目中的每一层都可以单独维护，也可以很方便的被别人使用。</p><h3 id="分模块开发实现"><a href="#分模块开发实现" class="headerlink" title="分模块开发实现"></a>分模块开发实现</h3><p>这里就基于SSM整合的项目来实现对项目的拆分。</p><p><strong>环境准备</strong>（之前ssm整合的框架）</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230622160806750.png"                      alt="image-20230622160806750" style="zoom:77%;"                 ><h4 id="抽取domain层"><a href="#抽取domain层" class="headerlink" title="抽取domain层"></a>抽取domain层</h4><p>步骤1：创建新模块maven_03_pojo</p><p>步骤2：项目中创建domain包，将Book实体类复制进来</p><p>步骤3：删除原项目(maven_02_ssm)中的domain包</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230622161341910.png"                      alt="image-20230622161341910"                ></p><p>这时在原项目中用到Book实体类的地方都会出现报错。<strong>解决问题的办法是在maven_02_ssm中添加maven_03_pojo的依赖。</strong></p><p>步骤4：建立依赖关系</p><p>在maven_02_ssm项目的pom.xml添加maven_03_pojo的依赖</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_03_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>步骤5：编译maven_02_ssm模块</p><p>这时虽然不再报错了，但是不意味着程序可以正常运行。报错提醒我们在maven_02_ssm模块中找不到maven_03_pojo的jar包：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230622163816397.png"                      alt="image-20230622163816397"                ></p><p>那么为什么找不到呢？因为Maven会从本地仓库找对应的jar包，但是本地仓库又不存在该jar包，所以我们需要手动将maven_03_pojo项目安装到本地仓库即</p><p>可。</p><p>步骤6：将项目安装到本地仓库</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230622164033568.png"                      alt="image-20230622164033568"                ></p><p>此时maven_02_ssm模块就可以编译成功了。</p><h4 id="抽取dao层"><a href="#抽取dao层" class="headerlink" title="抽取dao层"></a>抽取dao层</h4><p>步骤1：创建新模块并在项目中创建dao包</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230622164526229.png"                      alt="image-20230622164526229"                ></p><p>这时候存在两个问题：</p><p>1）实体类Book类不存在：添加maven_03_pojo的依赖</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_03_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>2）Mybatis在dao层的增删改查注解无法识别：添加mybatis和mysql依赖</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230622164827822.png"                      alt="image-20230622164827822"                ></p><p>步骤2：删除原项目(maven_02_ssm)的dao包，添加maven_04_dao的依赖</p><h4 id="分模块开发总结"><a href="#分模块开发总结" class="headerlink" title="分模块开发总结"></a>分模块开发总结</h4><p>1、创建Maven模块</p><p>2、书写模块代码</p><p>分模块开发需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分。拆分方式可以按照功能拆也可以按照模块拆。</p><p>3、通过maven指令安装模块到本地仓库(install 指令)</p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>依赖指当前项目运行所需的jar，一个项目可以设置多个依赖。在其他项目中想要使用独立出来的这些模块，只需要在其pom.xml使用标签来进行jar包的引入即可。</p><p>依赖的格式：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--设置具体的依赖--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--依赖所属群组id--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--依赖所属项目id--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--依赖版本号--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.24.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="依赖传递与依赖冲突问题"><a href="#依赖传递与依赖冲突问题" class="headerlink" title="依赖传递与依赖冲突问题"></a>依赖传递与依赖冲突问题</h3><p><strong>依赖传递</strong></p><p>这个jar包下面还包含有其他的jar包：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230622165753892.png"                      alt="image-20230622165753892"                ></p><p>会发现有两个maven_03_pojo的依赖被加载到Dependencies中，那么maven_04_dao中的maven_03_pojo能不能使用呢？答案是可以的。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230622165918814.png"                      alt="image-20230622165918814" style="zoom:67%;"                 ><p>A依赖了B和C，B和C又分别依赖了其他jar包，所以在A项目中就可以使用上面所有jar包，这就是所说的依赖传递。</p><blockquote><p>依赖传递有直接依赖和间接依赖（相对的概念）：相对于A来说，A直接依赖B和C，间接依赖了D1,E1,G,F,D2和E2。</p></blockquote><p><strong>依赖冲突</strong></p><p>因为有依赖传递的存在，就会导致jar包在依赖的过程中出现冲突问题。这里所说的<strong>依赖冲突</strong>是指项目依赖的某一个jar包，有多个不同的版本，因而造成类包版本冲突。</p><p>情况一：当同级配置了相同资源的不同版本，后配置的覆盖先配置的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230622170145521.png"                      alt="image-20230622170145521"                ></p><p>情况二：当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高。</p><p>情况三：当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的。</p><p>​    关于依赖冲突的规则我们不需要记住，可以在面板上查看详细的依赖关系包括版本信息等：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230622170357301.png"                      alt="image-20230622170357301" style="zoom:77%;"                 ><h3 id="可选依赖和排除依赖"><a href="#可选依赖和排除依赖" class="headerlink" title="可选依赖和排除依赖"></a>可选依赖和排除依赖</h3><p>maven_02_ssm 依赖了 maven_04_dao，maven_04_dao 依赖了 maven_03_pojo，因为现在有依赖传递，所以maven_02_ssm能够使用到maven_03_pojo的内容。但是如果说现在不想让maven_02_ssm依赖到maven_03_pojo，有哪些解决方案?</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230622170710475.png"                      alt="image-20230622170710475" style="zoom:67%;"                 ><p><strong>方案一：可选依赖</strong></p><p>可选依赖指对外隐藏当前所依赖的资源。</p><p>对于我们的需求是：不想让maven_02_ssm依赖到maven_03_pojo。我们可以在maven_04_dao的pom.xml中在引入maven_03_pojo的时候，添加<code>optional</code>从而切断依赖传递。</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_03_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可选依赖是隐藏当前工程所依赖的资源，隐藏后对应资源将不具有依赖传递--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>方案二：排除依赖</strong></p><p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本。</p><p>前面我们已经通过可选依赖实现了阻断maven_03_pojo的依赖传递。对于排除依赖，则是maven_02_ssm项目中已经通过依赖传递用到了maven_03_pojo，此时我们需要做的是将其进行排除。</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_04_dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--排除依赖是隐藏当前资源对应的依赖关系--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.Lijiacheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_03_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>A依赖B，B依赖C，C通过依赖传递会被A使用到，现在要想办法让A不去依赖C：</p><ul><li><p>可选依赖是在B上设置<code>&lt;optional&gt;</code>， A不知道有C的存在；</p></li><li><p>排除依赖是在A上设置<code>&lt;exclusions&gt;</code>，A知道有C的存在，主动将其排除掉。</p></li></ul><h2 id="聚合和继承"><a href="#聚合和继承" class="headerlink" title="聚合和继承"></a>聚合和继承</h2><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230622213742753.png"                      alt="image-20230622213742753" style="zoom:67%;"                 ><p>缺点一：分模块开发后，需要将这几个项目都安装到本地仓库，目前我们只能通过项目Maven面板的install来安装，并且需要安装多个，如果我们的项目足够多，那么一个个安装起来还是比较麻烦的。</p><p>缺点二：如果几个项目都已经安装成功，当ssm_pojo发生变化后，我们就得将ssm_pojo重新安装到maven仓库，但是为了确保我们对ssm_pojo的修改不会影响到其他项目模块，我们需要对所有的模块进行重新编译。</p><p>解决方案：所以我们就想能不能抽取一个项目，把所有的项目管理起来，以后我们要想操作这些项目，只需要操作这一个项目，这就用到了我们接下来要讲解的<strong>聚合</strong>——将多个模块组织成一个整体，同时进行项目构建的过程称为聚合。聚合工程通常是一个不具有业务功能的空工程（有且仅有一个pom文件）。</p><p>当工程中某个模块发生更新（变更）时，必须保障工程中与已更新模块关联的模块同步更新，此时可以使用聚合工程来解决批量模块同步构建的问题。</p><p>步骤1：创建一个空的Maven工程</p><p>步骤2：将项目的打包方式改为<strong>pom</strong></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_01_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>目前我们接触到的项目打包方式有三种：</p><p>① jar：默认情况，说明该项目为java项目； ② war：说明该项目为web项目； ③ pom：说明该项目为聚合或继承项目。</p></blockquote><p>步骤3：pom.xml添加所要管理的项目</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置管理的模块名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_02_ssm<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_03_pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_04_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>步骤4：使用聚合统一管理项目</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230623093529641.png"                      alt="image-20230623093529641"                ></p><p>测试发现，当maven_01_parent的compile被点击后，所有被其管理的项目都会被执行编译操作，这就是聚合工程的作用。</p><blockquote><p><strong>说明：</strong>聚合工程管理的项目在进行运行的时候，会按照项目与项目之间的依赖关系来自动决定执行的顺序，和配置的顺序无关。</p></blockquote><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>接下来我们再来考虑多模块开发存在的另外一个问题，依赖的重复配置。</p><p>问题一：spring-webmvc、spring-jdbc在三个项目模块中都有出现，这样就出现了重复的内容；</p><p>问题二：spring-test只在部分项目模块中出现，而在某些项目模块中没有出现，这里是部分重复的内容；</p><p>问题三：我们使用的spring版本目前是5.2.24.RELEASE ,假如后期要想升级spring版本，所有跟Spring相关jar包都得被修改，涉及到的项目越多，维护成本越高。</p><p>面对上面的这些问题，我们就得用到接下来要学习的<strong>继承</strong>（简化配置、减少版本冲突）：描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</p><p>步骤1：创建一个空Maven工程并将打包方式设置为<code>pom</code></p><p>步骤2：在子项目中设置其父项目</p><blockquote><p>java里面的继承，也是在子类声明它继承的父类。</p></blockquote><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_01_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 可选项：设置父项目pom.xml位置路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../maven_01_parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>步骤3：优化子项目共有依赖导入问题</p><p>1）将子项目共同使用的jar包都抽取出来，维护在父项目的pom.xml中 </p><p>2）删除子项目中已经被抽取到父项目的pom.xml中的jar包，如在maven_02_ssm的pom.xml中将已经出现在父项目的jar包删除掉</p><p>将子项目中的公共jar包抽取到父工程中进行统一添加依赖，这样做的可以简化配置，并且当父工程中所依赖的jar包版本发生变化，所有子项目中对应的jar包版本也会跟着更新。</p><p>步骤4：优化子项目依赖版本问题</p><p>如果把所有用到的jar包都管理在父项目的pom.xml，看上去更简单些，但是这样就会导致有很多项目引入了过多自己不需要的jar包。</p><p>那针对于这种部分项目有的jar包，我们该如何管理优化呢?</p><p>在父工程mavne_01_parent的pom.xml来定义依赖管理<code>&lt;dependencyManagement&gt;</code></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义依赖管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;dependencyManagement&gt;</code>标签不真正引入jar包，而是配置可供子项目选择的jar包依赖。<font color="blue">子项目要想使用它所提供的这些jar包，需要自己添加依赖，并且不需要指定<code>&lt;version&gt;</code> </font>。</p><blockquote><p>这样做的好处就是当父工程dependencyManagement标签中的版本发生变化后，子项目中的依赖版本也会跟着发生变化。</p></blockquote><p><strong>继承总结</strong>：父工程主要是用来快速配置依赖jar包和管理项目中所使用的资源</p><p>1）将所有项目公共的jar包依赖提取到父工程的pom.xml中，子项目就可以不用重复编写，简化开发</p><p>2）将所有项目的jar包配置到父工程的dependencyManagement标签下，实现版本管理，方便维护</p><h3 id="聚合和继承的区别"><a href="#聚合和继承的区别" class="headerlink" title="聚合和继承的区别"></a>聚合和继承的区别</h3><h4 id="聚合和继承的区别-1"><a href="#聚合和继承的区别-1" class="headerlink" title="聚合和继承的区别"></a>聚合和继承的区别</h4><p>聚合用于快速构建项目，对项目进行管理；继承用于快速配置和管理子项目中所使用jar包的版本。</p><ul><li><p>聚合和继承的相同点</p><ul><li>聚合与继承的pom.xml文件打包方式均为pom，可以将两种关系制作到同一个pom文件中</li><li>聚合与继承均属于设计型模块，并无实际的模块内容</li></ul></li><li><p>聚合和继承的不同点</p><ul><li>聚合是在当前模块中配置关系<code>&lt;modules&gt;</code>，聚合可以感知到参与聚合的模块有哪些</li><li>继承是在子模块中配置关系<code>&lt;parent&gt;</code>，父模块无法感知哪些子模块继承了自己</li></ul></li></ul><h4 id="IDEA构建聚合与继承工程"><a href="#IDEA构建聚合与继承工程" class="headerlink" title="IDEA构建聚合与继承工程"></a>IDEA构建聚合与继承工程</h4><p>步骤1：创建一个空的Maven项目，可以将项目中的src目录删除掉，这个项目作为聚合工程和父工程</p><p>步骤2：创建子项目，该项目可以继承并聚合父工程。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230623101441961.png"                      alt="image-20230623101441961" style="zoom:77%;"                 ><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><p>如果我们现在想更新Spring的版本，你会发现我们依然需要更新多个jar包的版本，这样的话还是有可能出现漏改导致程序出问题，而且改起来也是比较麻烦。我们可以参考咱们java基础所学习的变量，声明一个变量，在其他地方使用该变量，当变量的值发生变化后，所有使用变量的地方，就会跟着修改。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230623120509297.png"                      alt="image-20230623120509297" style="zoom:67%;"                 ><p>步骤1：父工程中定义属性</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.24.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>步骤2：修改依赖的version</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>    </span><br></pre></td></tr></table></figure></div><p>我们只需要更新父工程中properties标签中所维护的jar包版本，所有子项目中的版本也就跟着更新。当然除了将spring相关版本进行维护，我们可以将其他的jar包版本也进行抽取，这样就可以对项目中所有jar包的版本进行统一维护。</p><h3 id="配置文件的属性加载"><a href="#配置文件的属性加载" class="headerlink" title="配置文件的属性加载"></a>配置文件的属性加载</h3><p>想让Maven对于属性的管理范围能更大些，比如我们之前项目中的jdbc.properties，这个配置文件中的属性，能不能也来让Maven进行管理呢？</p><p>步骤1：父工程定义属性</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.1.1.1:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>步骤2：jdbc.properties文件中引用属性</p><p>在jdbc.properties，将jdbc.url的值直接获取Maven配置的属性.</p><div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.url</span>=<span class="string">$&#123;jdbc.url&#125;</span></span><br></pre></td></tr></table></figure></div><p>步骤3：设置maven过滤文件范围</p><p>Maven在默认情况下是从当前项目的”src\main\resources”下读取文件进行打包。现在我们需要打包的资源文件是在maven_02_ssm下,需要我们通过配置来指定下具体的资源目录。</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置maven过滤文件范围 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>../maven_02_ssm/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置能够解析$&#123;&#125;，默认是false --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>步骤4：测试是否生效</p><p>测试的时候，只需要将maven_02_ssm项目进行打包，然后观察打包结果中最终生成的内容是否为父工程中Maven配置的内容。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230623125438205.png"                      alt="image-20230623125438205"                ></p><p>如果不只是maven_02_ssm项目需要有属性被父工程管理，如果有多个项目需要配置，该如何实现呢？</p><p>方式一：使用多个<code>&lt;resource&gt;</code>标签在下面继续配置；</p><p>方式二：<code>$&#123;project.basedir&#125;</code>，当前项目所在目录。子项目继承了父项目， 相当于所有的子项目都添加了资源目录的过滤：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 设置maven过滤文件范围 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;directory&gt;../maven_02_ssm/src/main/resources&lt;/directory&gt;--&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main.resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--设置能够解析$&#123;&#125;，默认是false --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>上面我们所使用的都是Maven的自定义属性，除了<code>$&#123;project.basedir&#125;</code>，它属于Maven的内置系统属性。</p></blockquote><h2 id="多环境配置与应用"><a href="#多环境配置与应用" class="headerlink" title="多环境配置与应用"></a>多环境配置与应用</h2><h3 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230623130112191.png"                      alt="image-20230623130112191" style="zoom:67%;"                 ><p>不同环境的配置是不相同的，如不可能让三个环境都用一个数据库，所以就会有三个数据库的url配置，要想实现不同环境之间的配置切换又该如何来实现呢？</p><p>Maven提供配置多种环境的设定，帮助开发者在使用过程中快速切换环境。</p><p>步骤1：父工程配置多个环境，并指定默认激活环境：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多开发环境配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开发环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_dep<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.1.1.1:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设定是否为默认启动环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.2.2.2:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 测试环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.3.3.3:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>虽然已经能够实现不同环境的切换，但是每次切换都是需要手动修改，如何来实现在不改变代码的前提下完成环境的切换呢?</p><p>步骤2：命令行实现环境切换（这里我反正是测试失败了。。。）</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230623132355560.png"                      alt="image-20230623132355560" style="zoom:77%;"                 ><h3 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h3><p>前面在执行install指令的时候，Maven都会按照顺序从上往下依次执行，每次都会执行test，对于test来说有它存在的意义：可以确保每次打包或者安装的时候，程序的正确性。但是有时候，功能开发过程中有部分模块还没有开发完毕，测试无法通过，但是想要把其中某一部分进行快速打包，此时由于测试环境失败就会导致打包失败。</p><p>方式一：IDEA工具</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230623132550500.png"                      alt="image-20230623132550500"                ></p><p>方式二：命令行跳过测试</p><div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn 指令 <span class="literal">-D</span> skipTests</span><br></pre></td></tr></table></figure></div><p>该命令可以不借助IDEA，直接使用cmd命令行进行跳过测试，需要注意的是cmd要在pom.xml所在目录下进行执行。</p><h2 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h2><p>公司或者团队一般会搭建自己的私服，这里暂时先不展开实践了，就简单了解一下什么是私服以及配置私服的原理。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230623132904112.png"                      alt="image-20230623132904112" style="zoom:67%;"                 ><p>Maven的中央仓库不允许私人上传自己的jar包，那么自己搭建一个类似于中央仓库的东西，把自己的内容上传上去，其他人就可以从上面下载jar包使用。私服就是公司内部搭建的用于存储Maven资源的服务器，用于解决团队内部的资源共享与资源同步问题。</p><p>搭建Maven私服的方式有很多，其中一种使用量比较大的实现方式：Nexus。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Maven就是是专门为Java项目打造的管理和构建工具，它 提供了一套标准化的项目结构、提供了一套标准化的构建流程等等。&lt;/p&gt;</summary>
    
    
    
    <category term="Maven" scheme="https://kicheng.github.io/categories/Maven/"/>
    
    
  </entry>
  
  <entry>
    <title>03-SSM整合</title>
    <link href="https://kicheng.github.io/2023/06/19/03-SSM%E6%95%B4%E5%90%88/"/>
    <id>https://kicheng.github.io/2023/06/19/03-SSM%E6%95%B4%E5%90%88/</id>
    <published>2023-06-19T03:40:18.000Z</published>
    <updated>2023-06-21T10:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面我们已经把Mybatis、Spring和SpringMVC三个框架进行了学习，今天主要的内容就是把这三个框架整合在一起完成我们的业务功能开发。                                                             </p><span id="more"></span><h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><h4 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h4><p>1、创建Maven的Web工程</p><p>2、在pom.xml中导入SSM需要的依赖jar包：</p><p>​    ① SpringMVC的核心依赖<code>spring-webmvc</code></p><p>​    ② Spring和jdbc、mybatis的依赖<code>spring-test</code>, <code>spring-jdbc</code> , <code>mybatis-spring</code>, <code>mybatis</code></p><blockquote><p>这里要注意Spring和jdk的版本兼容问题：当使用java8时，webmvc、test、jdbc保持版本一致且5.2.x以下的版本，mybatis-spring要保持2.x的版本。</p></blockquote><p>​    ③ 数据库<code>mysql</code>和数据库连接池<code>Druid</code></p><p>​    ④ Servlet（使用java8时要用4.0.1以下的版本）</p><p>​    ⑤ 其他：<code>jackson</code>自动解析json格式数据，<code>juint</code>测试依赖</p><p>3、编写Web项目的入口配置类ServletInitConfig，实现AbstractAnnotationConfigDispatcherServletInitializer并重写以下方法：</p><p>​    ① getRootConfigClasses() ：返回Spring的配置类-&gt;需要<strong>SpringConfig</strong>配置类</p><p>​    ② getServletConfigClasses() ：返回SpringMVC的配置类-&gt;需要<strong>SpringMvcConfig</strong>配置类</p><p>​    ③ getServletMappings() : 设置SpringMVC请求拦截路径规则</p><p>​    ④ getServletFilters() （这个要记住函数名因为没有快捷override方式）：设置过滤器，解决POST请求中文乱码问题</p><h4 id="SSM整合-1"><a href="#SSM整合-1" class="headerlink" title="SSM整合"></a>SSM整合</h4><p>1、SpringConfig</p><p>​    ① 标识该类为配置类 <code>@Configuration</code></p><p>​    ② 扫描Service所在的包 <code>@ComponentScan</code></p><p>​    ③ 在Service层要管理事务 <code>@EnableTransactionManagement</code></p><p>​    ④ 读取外部的properties配置文件 <code>@PropertySource</code></p><p>​    ⑤ 整合Mybatis需要引入Mybatis相关配置类 <code>@Import</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.Lijiacheng.service&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;MybatisConfig.class, JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>​        1) 第三方数据源配置类 JdbcConfig：构建DataSource数据源DruidDataSouroce，需要注入数据库连接四要素，<code>@Bean</code>和<code>@Value</code>注解。构建平台事务管理器DataSourceTransactionManager，<code>@Bean</code>注解。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建jdbc事务管理</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">platformTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        ds.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>​        2) Mybatis配置类 MybatisConfig：构建SqlSessionFactoryBean并设置别名扫描与数据源，<code>@Bean</code>注解。构建MapperScannerConfigurer并设置DAO层的包扫描，<code>@Bean</code>注解。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">&quot;com.Lijiacheng.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.Lijiacheng.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>2、SpringMvcConfig</p><p>​    ① 标识该类为配置类 <code>@Configuration</code></p><p>​    ② 扫描Controller所在的包 <code>@ComponentScan</code></p><p>​    ③ 开启SpringMVC注解支持 <code>@EnableWebMvc</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.Lijiacheng.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h4><p>1、创建数据库表</p><p>2、根据数据库表创建对应的模型类</p><p>3、通过Dao层完成数据库表的增删改查（接口+自动代理）</p><p>4、编写Service层（Service接口+实现类）：<code>@Service</code>, <code>@Transactional</code>；整合Junit对业务层进行单元测试<code>@RunWith</code>, <code>@ContextConfiguration</code>, <code>@Test</code></p><p>5、编写Controller层：<code>@RestController</code>；接收请求(<code>@RequestMapping</code>, <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>)；接收数据(<code>@RequestParam</code>, <code>@PathVariable</code>, <code>@RequestBody</code>)；转发业务层<code>@Autowired</code></p><h3 id="整合配置"><a href="#整合配置" class="headerlink" title="整合配置"></a>整合配置</h3><p>步骤1：创建项目包结构</p><p>​                                                             <img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230619215547658.png"                      alt="image-20230619215547658" style="zoom:87%;"                 >    </p><p>步骤2：创建SpringConfig配置</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.Lijiacheng.service&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;MybatisConfig.class, JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="comment">// 创建事务管理</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤3：创建JdbcConfig配置类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建jdbc事务管理</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">platformTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        ds.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤4：创建MybatisConfig配置类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">&quot;com.Lijiacheng.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.Lijiacheng.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤5：创建jdbc.properties</p><p>在resources下提供jdbc.properties，设置数据库连接四要素</p><div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_db?useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">xxxxxxx</span></span><br></pre></td></tr></table></figure></div><p>步骤6：创建SpringMvcConfig配置类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.Lijiacheng.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤7：创建Web项目入口ServletInitConfig配置类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters()&#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p><strong>总结</strong></p><p>Web项目入口配置类ServletInitConfig → SpringConfig配置类：扫描Service层、导入外部properties、导入JdbcConfig、MybatisConfig等配置类</p><p>​                                                                  → SpringMvcConfig配置类：扫描Controller层                                                         </p></blockquote><h3 id="功能模块开发"><a href="#功能模块开发" class="headerlink" title="功能模块开发"></a>功能模块开发</h3><p>步骤1：编写pojo模型类</p><p>步骤2：编写Dao接口</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_book values(null, #&#123;type&#125;, #&#123;name&#125;, #&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_book set type = #&#123;type&#125;, name = #&#123;name&#125;, description = #&#123;description&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤3：编写Service接口和实现类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** ======================================================== */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        bookDao.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.update(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>bookDao在Service中注入的会提示一个红线提示：这是因为BookDao是一个接口，没有实现类，接口是不能创建对象的，所以最终注入的应该是代理对象。而代理对象是由Spring的IOC容器来创建管理的，IOC容器又是在Web服务器启动的时候才会创建，没有找到适合的类注入所以会提示错误提示。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230619221050923.png"                      alt="image-20230619221050923"                ></p><p>不去理会当然可以正常运行程序，但作为追求完美的强迫症程序员，可以设置IDEA的错误提示级别：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230619221318810.png"                      alt="image-20230619221318810"                ></p><p>在这里取消勾选，或者将其降级为warning级别都可以：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230619221402465.png"                      alt="image-20230619221402465"                ></p><p>步骤4：编写Controller类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.update(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>对于图书模块的增删改查就已经完成了编写，接下来我们就先把业务层Service的代码使用Spring整合Junit进行单元测试：</p><p>步骤1：新建测试类</p><p>步骤2：注入Service类</p><p>步骤3：编写测试方法</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; books = bookService.getAll();</span><br><span class="line">        System.out.println(books);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Service层的代码测试成功，结果就不在这放嘞，接着往下看。</p><h3 id="PostMan测试"><a href="#PostMan测试" class="headerlink" title="PostMan测试"></a>PostMan测试</h3><p><strong>新增</strong></p><p>前端发送新增请求：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230619222757536.png"                      alt="image-20230619222757536" style="zoom:87%;"                 ><p>后台数据库：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230619223001724.png"                      alt="image-20230619223001724"                ></p><p><strong>修改</strong></p><p>前端发送修改请求：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230619222849481.png"                      alt="image-20230619222849481" style="zoom:87%;"                 ><p>后台数据库：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230619223124913.png"                      alt="image-20230619223124913"                ></p><p><strong>删除</strong></p><p>前端发送删除请求：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230619223213419.png"                      alt="image-20230619223213419" style="zoom:87%;"                 ><p>后台数据库：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230619223300861.png"                      alt="image-20230619223300861"                ></p><p><strong>查询</strong></p><p>前端发送查询请求：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230619223340795.png"                      alt="image-20230619223340795" style="zoom:67%;"                 ><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230619223400561.png"                      alt="image-20230619223400561" style="zoom:67%;"                 ><h2 id="统一结果封装"><a href="#统一结果封装" class="headerlink" title="统一结果封装"></a>统一结果封装</h2><h3 id="表现层与前端数据传输协议定义"><a href="#表现层与前端数据传输协议定义" class="headerlink" title="表现层与前端数据传输协议定义"></a>表现层与前端数据传输协议定义</h3><p>在Controller层增删改返回给前端的是boolean类型数据、在Controller层查询单个返回给前端的是对象、在Controller层查询所有返回给前端的是集合对象……对于前端来说，如果后台能够返回一个统一的数据结果，前端在解析的时候就可以按照一种方式进行解析，开发就会变得更加简单。</p><p>所以我们就想能不能将返回结果的数据进行统一，具体如何来做，大体的思路为:</p><ul><li><p>为了封装返回的结果数据：创建结果模型类，封装数据到data属性中</p></li><li><p>为了封装返回的数据是何种操作及是否操作成功：封装操作结果到code属性中</p></li><li><p>操作失败后为了封装返回的错误信息：封装特殊消息到message(msg)属性中</p></li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230621101144401.png"                      alt="image-20230621101144401" style="zoom:77%;"                 ><p>解决方案是我们可以设置统一数据返回结果类，Result类名及类中的字段并不是固定的，可以根据需要自行增减提供若干个构造方法，方便操作：</p><h3 id="表现层与前端数据传输协议实现"><a href="#表现层与前端数据传输协议实现" class="headerlink" title="表现层与前端数据传输协议实现"></a>表现层与前端数据传输协议实现</h3><p>步骤1：创建Result类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">  <span class="comment">// 描述统一格式中的数据</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">  <span class="comment">// 描述统一格式中的编码</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">  <span class="comment">// 描述统一格式中的消息，可选属性</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code, Object data, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤2：定义返回码Code类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_OK</span> <span class="operator">=</span> <span class="number">20011</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_OK</span> <span class="operator">=</span> <span class="number">20021</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_OK</span> <span class="operator">=</span> <span class="number">20031</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_OK</span> <span class="operator">=</span> <span class="number">20041</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_ERR</span> <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_ERR</span> <span class="operator">=</span> <span class="number">20020</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_ERR</span> <span class="operator">=</span> <span class="number">20030</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_ERR</span> <span class="operator">=</span> <span class="number">20040</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤3：修改Controller类的返回值为Result对象</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.save(book);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.SAVE_OK : Code.SAVE_ERR, flag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.DELETE_OK : Code.DELETE_ERR, flag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.update(book);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.UPDATE_OK : Code.UPDATE_ERR, flag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;未查询到信息，请重试&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code, book, msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Book&gt; books = bookService.getAll();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> books != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> books != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;未查询到信息，请重试&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code, books, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>至此，我们的返回结果就已经能以一种统一的格式返回给前端。前端根据返回的结果，先从中获取code，根据code判断，如果成功则取data属性的值；如果失败则取msg中的值做提示（随便举一个根据id查询的例子）：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230621102138599.png"                      alt="image-20230621102138599" style="zoom:87%;"                 ><h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><h3 id="异常处理概述"><a href="#异常处理概述" class="headerlink" title="异常处理概述"></a>异常处理概述</h3><p>当我们在表现Controller层的getById方法中手动添加一个异常，可以发现在前端发送请求时出现接收到的信息和之前约定的数据格式不一致的问题：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230620101102095.png"                      alt="image-20230620101102095" style="zoom: 77%;"                 ><p>我们在开发的过程中在任何一个位置都可能会出现异常。</p><p>框架内部抛出的异常：因使用不合规导致</p><p>数据层抛出的异常：因外部服务器故障导致（例如：服务器访问超时）</p><p>业务层抛出的异常：因业务逻辑书写错误导致（例如：遍历业务书写操作，导致索引异常等）</p><p>表现层抛出的异常：因数据收集、校验等规则导致（例如：不匹配的数据类型间导致异常）</p><p>工具类抛出的异常：因工具类书写不严谨不够健壮导致（例如：必要释放的连接长期未释放等）</p><blockquote><p>各个层级均出现异常，异常处理代码书写在哪一层？<strong>所有的异常均抛出到表现层进行处理</strong></p><p>异常的种类很多，表现层如何将所有的异常都处理到呢？<strong>异常分类</strong></p><p>表现层处理异常，每个方法中单独书写，代码书写量巨大且意义不强，如何解决？<strong>AOP</strong></p></blockquote><p>针对上述的问题，SpringMVC已经为我们提供了一套<strong>异常处理器</strong>的解决方案，集中的统一的处理项目中出现的异常。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">666</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="异常处理器的使用"><a href="#异常处理器的使用" class="headerlink" title="异常处理器的使用"></a>异常处理器的使用</h3><p>步骤1：创建异常处理器类</p><p><font color="blue">要确保SpringMvcConfig能够扫描到异常处理器类</font></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @RestControllerAdvice用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;嘿嘿，异常你往哪里跑！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤2：让程序抛出异常</p><p>步骤3：运行程序测试（异常已经被拦截并执行了doException方法）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230620102849723.png"                      alt="image-20230620102849723"                ></p><p>步骤4：异常处理器类返回结果给前端</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;嘿嘿，异常你往哪里跑！&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">666</span>, <span class="literal">null</span>, <span class="string">&quot;呵呵，异常你往哪里跑！&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230620103149866.png"                      alt="image-20230620103149866"                ></p><p>就算后台执行的过程中抛出异常，最终也能按照我们和前端约定好的数据格式返回给前端。</p><blockquote><p><code>@RestControllerAdvice</code>注解：此注解自带<code>@ResponseBody</code>注解与<code>@Component</code>注解，REST风格的(异常处理)控制器类。</p><p><code>@ExceptionHandler</code>注解：专用于异常处理的控制器<strong>方法</strong>上方，出现异常后终止原始控制器执行，并转入当前方法执行。</p></blockquote><h3 id="项目异常处理方案"><a href="#项目异常处理方案" class="headerlink" title="项目异常处理方案"></a>项目异常处理方案</h3><h4 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h4><p>因为异常的种类有很多，如果每一个异常都对应一个<code>@ExceptionHandler</code>，那得写多少个方法来处理各自的异常，所以我们在处理异常之前，需要对异常进行一个分类。</p><ul><li><p>业务异常(BusinessException)</p><p>用户在页面输入内容的时候未按照指定格式进行数据填写，如在年龄框输入的是字符串；</p><p>不规范的用户行为操作产生的异常，如用户故意传递错误数据。</p></li><li><p>系统异常(SystemException)</p></li></ul><p>​        项目运行过程中可预计但无法避免的异常，比如数据库或服务器宕机。</p><ul><li>其他异常(Exception)</li></ul><p>​        编程人员未预期到的异常，如:用到的文件不存在。</p><p>将异常分类以后，针对不同类型的异常，要提供具体的解决方案。</p><h4 id="异常解决方案"><a href="#异常解决方案" class="headerlink" title="异常解决方案"></a>异常解决方案</h4><ul><li>业务异常（BusinessException）</li></ul><p>​    发送对应消息传递给用户，提醒规范操作（大家常见的就是提示用户名已存在或密码格式不正确等）</p><ul><li>系统异常（SystemException）</li></ul><p>​    发送固定消息传递给用户，安抚用户（系统繁忙，请稍后再试）</p><p>​    发送特定消息给运维人员，提醒维护（可以发送短信、邮箱或者是公司内部通信软件）</p><p>​    记录日志（发消息和记录日志对用户来说是不可见的，属于后台程序）</p><ul><li>其他异常（Exception）</li></ul><p>​    发送固定消息传递给用户，安抚用户</p><p>​    发送特定消息给编程人员，提醒维护（纳入预期范围内）</p><p>​    记录日志（一般是程序没有考虑全，比如未做非空校验等）</p><h4 id="异常解决方案的具体实现"><a href="#异常解决方案的具体实现" class="headerlink" title="异常解决方案的具体实现"></a>异常解决方案的具体实现</h4><blockquote><p>思路：</p><ol><li><p>先通过自定义异常，完成BusinessException和SystemException的定义</p></li><li><p>将其他异常包装成自定义异常类型</p></li><li><p>在异常处理器类中对不同的异常进行处理</p></li></ol></blockquote><p>步骤1：自定义异常类（新建一个exception包目录）</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>让自定义异常类继承RuntimeException的好处是，后期在抛出这两个异常的时候，就不用try…catch…或throws了。</p><p>自定义异常类中添加code属性的原因是为了更好的区分异常是来自哪个业务的。</p></blockquote><p>步骤1.5：在Code类中再新增需要的属性</p><p>步骤2：将其他异常包装成自定义异常</p><p>具体的包装方式有两种：</p><p>方式一：try{…}catch(){…}在catch中重新throw我们自定义异常即可；</p><p>方式二：直接throw自定义异常即可；</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">//模拟业务异常，包装成自定义异常</span></span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(Code.BUSINESS_ERR, <span class="string">&quot;请不要用你的技术挑战我的饭碗！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模拟系统异常，将可能出现的异常进行包装，转换成自定义异常</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(Code.SYSTEM_TIMEOUT_ERR,<span class="string">&quot;服务器访问超时，请重试！&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;未查询到信息，请重试&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code, book, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤3：处理器类中处理自定义异常</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @RestControllerAdvice用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">// @ExceptionHandler用于设置当前处理器类对应的异常类型</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doSystemException</span><span class="params">(SystemException ex)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">// 发送消息给运维</span></span><br><span class="line">        <span class="comment">// 发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(ex.getCode(), <span class="literal">null</span>, ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doBusinessException</span><span class="params">(BusinessException ex)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(ex.getCode(), <span class="literal">null</span>, ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line">        <span class="comment">// 发送消息给运维</span></span><br><span class="line">        <span class="comment">// 发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(Code.SYSTEM_UNKNOWN_ERR, <span class="literal">null</span>, <span class="string">&quot;系统繁忙，请稍后再试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤4：进行异常测试</p><p>在根据id查询中，如果查询请求id为1报错BusinessException错，如果id不为1则报SystemException错。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230620210737395.png"                      alt="image-20230620210737395" style="zoom:77%;"                 ><p>对于异常我们就已经处理完成了。不管后台哪一层抛出异常，都会以我们与前端约定好的方式进行返回，前端只需要把信息获取到，根据返回的正确与否来展示不同的内容即可。</p><p><strong>小结</strong></p><p>项目中的异常处理方式为：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230620210909413.png"                      alt="image-20230620210909413" style="zoom:67%;"                 ><h2 id="前后台协议联调"><a href="#前后台协议联调" class="headerlink" title="前后台协议联调"></a>前后台协议联调</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230620221704513.png"                      alt="image-20230620221704513" style="zoom:87%;"                 ><p>因为添加了静态资源，SpringMVC会拦截，所以需要将静态资源进行放行：</p><blockquote><p><strong>复习一下如何将静态资源放行？</strong></p><p>1）新建SpringMvcSupport配置类，继承WebMvcConfigurationSupport，重写addResourceHandlers方法。</p><p>2）在SpringMvcConfig中扫描SpringMvcSupport</p></blockquote><p><strong>列表功能</strong></p><p>页面加载完后发送异步请求到后台获取列表数据进行展示。</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//列表</span><br><span class="line">getAll() &#123;</span><br><span class="line">    // 发送ajax请求</span><br><span class="line">    axios.get(&quot;/books&quot;).then((res)=&gt;&#123;</span><br><span class="line">      this.dataList = res.data.data;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230620230749389.png"                      alt="image-20230620230749389" style="zoom:67%;"                 ><p><strong>添加功能</strong></p><p>“新建”按钮上绑定了@click=”handleCreate()”方法；在method中找到handleCreate方法，方法中打开”新增“面板。</p><p>”确定”按钮上绑定了@click=”handleAdd()”方法；在method中找到handleAdd方法，在方法中发送请求和数据，响应成功后将新增面板关闭并重新查询数据。</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//弹出添加窗口</span><br><span class="line">handleCreate() &#123;</span><br><span class="line">    this.dialogFormVisible = true;</span><br><span class="line">&#125;,</span><br><span class="line">//添加</span><br><span class="line">handleAdd () &#123;</span><br><span class="line">    //发送ajax请求</span><br><span class="line">    // this.formData是表单中的数据，最后是一个json数据</span><br><span class="line">    axios.post(&quot;/books&quot;, this.formData).then((res)=&gt;&#123;</span><br><span class="line">        this.dialogFormVisible = false;  // 关闭弹窗</span><br><span class="line">        this.getAll();  // 刷新显示全部</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230620231613537.png"                      alt="image-20230620231613537"                ></p><p>但是我们发现在新增成功后，再次点击新增按钮会发现之前的数据还存在，这个时候就需要在新增的时候将表单内容清空。</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//弹出添加窗口</span><br><span class="line">handleCreate() &#123;</span><br><span class="line">    this.dialogFormVisible = true;</span><br><span class="line">    this.resetForm();</span><br><span class="line">&#125;,</span><br><span class="line">//重置表单</span><br><span class="line">resetForm() &#123;</span><br><span class="line">    this.formData = &#123;&#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><p><strong>添加功能状态处理</strong></p><p>新增成功是关闭面板，重新查询数据，但是我们还需要考虑新增失败的异常情况：即在handlerAdd方法中根据后台返回的数据来进行不同的处理。</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//添加</span><br><span class="line">handleAdd () &#123;</span><br><span class="line">    //发送ajax请求</span><br><span class="line">    axios.post(&quot;/books&quot;, this.formData).then((res)=&gt;&#123;</span><br><span class="line">        // 如果请求成功，则关闭弹层，显示数据</span><br><span class="line">        if(res.data.code == 20011)&#123;</span><br><span class="line">            this.dialogFormVisible = false;  // 关闭弹窗</span><br><span class="line">            this.$message.success(&quot;添加成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        // 如果请求失败，则弹窗提醒</span><br><span class="line">        else if(res.data.code == 20010)&#123;</span><br><span class="line">            this.$message.error(&quot;添加失败！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        // 其他的未知异常</span><br><span class="line">        else&#123;</span><br><span class="line">            this.$message.error(res.data.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).finally(()=&gt;&#123;</span><br><span class="line">        this.getAll();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230620235136525.png"                      alt="image-20230620235136525" style="zoom:77%;"                 ><p><strong>修改功能</strong></p><p>“编辑”按钮绑定了@click=”handleUpdate(scope.row)”；在method的handleUpdate方法中发送异步请求根据ID查询图书信息。根据后台返回的结果，判断是否查询成功：如果查询成功打开修改面板回显数据，如果失败提示错误信息。</p><p>修改完成后“确定”按钮绑定了@click=”handleEdit()”，在method的handleEdit方法中发送异步请求提交修改数据。</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//弹出编辑窗口</span><br><span class="line">handleUpdate(row) &#123;</span><br><span class="line">    axios.get(&quot;/books/&quot; + row.id).then((res)=&gt;&#123;</span><br><span class="line">        // 展示弹层，加载数据</span><br><span class="line">        if(res.data.code == 20041)&#123;</span><br><span class="line">            this.formData = res.data.data;</span><br><span class="line">            this.dialogFormVisible4Edit = true;</span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            this.$message.error(res.data.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">//编辑</span><br><span class="line">handleEdit() &#123;</span><br><span class="line">    axios.put(&quot;/books&quot;, this.formData).then((res)=&gt;&#123;</span><br><span class="line">        // 如果操作成功，关闭弹层，显示数据</span><br><span class="line">        if(res.data.code == 20031)&#123;</span><br><span class="line">            this.dialogFormVisible4Edit = false;</span><br><span class="line">            this.$message.error(&quot;修改成功！&quot;);</span><br><span class="line">        &#125; else if(res.data.code == 20030)&#123;</span><br><span class="line">            this.$message.error(&quot;修改失败！&quot;);</span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            this.$message.error(res.data.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).finally(()=&gt;&#123;</span><br><span class="line">        this.getAll();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><p><strong>删除功能</strong></p><p>”删除“按钮上绑定了@click=”handleDelete(scope.row)”，method的handleDelete方法弹出提示框。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 删除</span><br><span class="line">handleDelete(row) &#123;</span><br><span class="line">    this.$confirm(&quot;此操作永久删除当前数据，是否继续？&quot;,&quot;提示&quot;,&#123;</span><br><span class="line">        type:&#x27;info&#x27;</span><br><span class="line">    &#125;).then(()=&gt;&#123;</span><br><span class="line">        //2.做删除业务</span><br><span class="line">        axios.delete(&quot;/books/&quot;+row.id).then((res)=&gt;&#123;</span><br><span class="line">            if(res.data.code == 20021)&#123;</span><br><span class="line">                this.$message.success(&quot;删除成功&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                this.$message.error(&quot;删除失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).finally(()=&gt;&#123;</span><br><span class="line">            this.getAll();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).catch(()=&gt;&#123;</span><br><span class="line">        //3.取消删除</span><br><span class="line">        this.$message.info(&quot;取消删除操作&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="拦截器概念"><a href="#拦截器概念" class="headerlink" title="拦截器概念"></a>拦截器概念</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230621112011258.png"                      alt="image-20230621112011258" style="zoom:77%;"                 ><p>(1) 浏览器发送一个请求会先到Tomcat的web服务器；</p><p>(2) Tomcat服务器接收到请求以后，会去判断请求的是静态资源还是动态资源；</p><p>(3) 如果是静态资源，会直接到Tomcat的项目部署目录下去直接访问；</p><p>(4) 如果是动态资源，就需要交给项目的后台代码进行处理；</p><p>(5) 在找到具体的方法之前，我们可以去配置过滤器(可以配置多个)，按照顺序进行执行；</p><p>(6) 然后进入到到中央处理器(SpringMVC中的内容)，SpringMVC会根据配置的规则进行拦截；</p><p>(7) 如果满足规则，则进行处理，找到其对应的controller类中的方法进行执行，完成后返回结果；</p><p>(8) 如果不满足规则，则不进行处理；</p><p>(9) 这个时候，如果我们需要在每个Controller方法执行的前后添加业务，具体该如何来实现？——拦截器</p><p><strong>拦截器</strong>（Interceptor）是一种动态拦截方法调用的机制，在SpringMVC中动态拦截控制器方法的执行：在指定的方法调用前后执行预先设定的代码来阻止原始方法的执行。</p><blockquote><p>SpringMVC的拦截器和Servlet的过滤器的区别：</p><p>归属不同：Filter属于Servlet技术，Interceptor属于SpringMVC技术；</p><p>拦截内容不同：Filter对所有访问进行增强，Interceptor仅针对SpringMVC的访问进行增强。</p></blockquote><h3 id="拦截器入门案例"><a href="#拦截器入门案例" class="headerlink" title="拦截器入门案例"></a>拦截器入门案例</h3><p><strong>环境准备</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230621180705381.png"                      alt="image-20230621180705381" style="zoom:87%;"                 ><h4 id="拦截器开发"><a href="#拦截器开发" class="headerlink" title="拦截器开发"></a>拦截器开发</h4><p>步骤1：在controller表现层创建拦截器类</p><p>让类实现HandlerInterceptor接口，重写接口中的三个方法。<strong>同时要注意Interceptor类必须受Spring容器控制和被SpringMVC扫描到。</strong></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">// 注意当前类必须受Spring容器控制</span></span><br><span class="line"><span class="comment">// 定义拦截器类，实现HandlerInterceptor接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤2：配置拦截器类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>, <span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>自动装配前面创建的拦截器类，在Support配置中配置拦截的路径。</p><p>步骤3：SpringMvcConfig添加SpringMvcSupport包(config包下)扫描</p><blockquote><p>当拦截器拦截的路径是(“/books”)时，则发送<a class="link"   href="http://localhost/books/100%E4%BC%9A%E5%8F%91%E7%8E%B0%E6%8B%A6%E6%88%AA%E5%99%A8%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%89%A7%E8%A1%8C%EF%BC%8C" >http://localhost/books/100会发现拦截器没有被执行，<i class="fa-solid fa-up-right-from-square"></i></a> 因为没有匹配上，想要拦截则要设置”/books/*”。</p></blockquote><p>当有拦截器后，请求会先进入preHandle方法，如果方法返回true，则放行继续执行后面的handle（controller的方法）和后面的方法；如果返回false，则直接跳过后面方法的执行。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230621182504009.png"                      alt="image-20230621182504009" style="zoom:87%;"                 ><p>（可选）步骤4：简化SpringMvcSupport的编写</p><p>在SpringMvcConfig中实现WebMvcConfigurer接口后面就不用写SpringMvcSupport配置类了，但具有一定的侵入性。</p><h3 id="拦截器参数"><a href="#拦截器参数" class="headerlink" title="拦截器参数"></a>拦截器参数</h3><p><strong>前置处理方法</strong></p><p>request：请求对象</p><p>response：响应对象</p><p>handler：被调用的处理器对象，本质上是一个方法对象，对反射中的Method对象进行了再包装</p><p>使用request对象可以获取请求数据中的内容，如获取请求头的Content-Type（<font color="blue">要使用post请求</font>）：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle...&quot;</span> + contentType);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用handler参数，可以获取方法的相关信息：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">    <span class="type">HandlerMethod</span> <span class="variable">hm</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> hm.getMethod().getName();  <span class="comment">//可以获取方法的名称</span></span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle...&quot;</span> + contentType + <span class="string">&quot;, &quot;</span> + methodName);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>后置处理方法</strong></p><p>原始方法运行后运行，如果原始方法被拦截，则不执行。</p><p>modelAndView：如果处理器执行完成具有返回结果，可以读取到对应数据与页面信息，并进行调整。因为现在都是返回json数据，所以该参数的使用率不高。</p><p><strong>完成处理方法</strong></p><p>拦截器最后执行的方法，无论原始方法是否执行。</p><p>ex：如果处理器执行过程中出现异常对象，可以针对异常情况进行单独处理。因为现在已经有全局异常处理器类，所以该参数的使用率也不高。</p><p><strong>总结</strong></p><p>这三个方法中，最常用的是<strong>preHandle</strong>，在这个方法中可以通过返回值来决定是否要进行放行，我们可以把业务逻辑放在该方法中，如果满足业务则返回true放行，不满足则返回false拦截。</p><h3 id="拦截器链配置"><a href="#拦截器链配置" class="headerlink" title="拦截器链配置"></a>拦截器链配置</h3><p>步骤1：创建多个拦截器类ProjectInterceptor1、ProjectInterceptor2…</p><p>步骤2：配置拦截器链</p><p>拦截器执行的顺序是和配置顺序有关：先进后出（preHandle是与配置顺序相同，必定运行的）。</p><p>执行过程：当拦截器中出现对原始处理器的拦截，后面的拦截器均终止运行；当拦截器运行中断，仅运行配置在前面的拦截器的afterCompletion操作，见下图所示：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230621185149653.png"                      alt="image-20230621185149653" style="zoom:67%;"                 >]]></content>
    
    
    <summary type="html">&lt;p&gt;前面我们已经把Mybatis、Spring和SpringMVC三个框架进行了学习，今天主要的内容就是把这三个框架整合在一起完成我们的业务功能开发。                                                             &lt;/p&gt;</summary>
    
    
    
    <category term="SpringMVC" scheme="https://kicheng.github.io/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>02-RESTful开发</title>
    <link href="https://kicheng.github.io/2023/06/13/02-RESTful%E5%BC%80%E5%8F%91/"/>
    <id>https://kicheng.github.io/2023/06/13/02-RESTful%E5%BC%80%E5%8F%91/</id>
    <published>2023-06-13T03:18:31.000Z</published>
    <updated>2023-06-20T15:01:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>REST（Representational State Transfer），表现形式状态转换，它是一种软件架构风格，听不懂很正常。说通俗点就是用URL定位资源，用HTTP动词（GET, POST, DELETE, PUT）描述操作的一种开发方式。</p><span id="more"></span><h2 id="REST简介"><a href="#REST简介" class="headerlink" title="REST简介"></a>REST简介</h2><p>当我们想表示一个网络资源的时候，可以使用两种方式：</p><p>（1）传统风格资源描述形式</p><p>​    ① <a class="link"   href="http://localhost/user/getById?id=1" >http://localhost/user/getById?id=1<i class="fa-solid fa-up-right-from-square"></i></a> 查询id为1的用户信息</p><p>​    ② <a class="link"   href="http://localhost/user/saveUser" >http://localhost/user/saveUser<i class="fa-solid fa-up-right-from-square"></i></a> 保存用户信息</p><p>（2）REST风格描述形式</p><p>​    ① <a class="link"   href="http://localhost/users/1" >http://localhost/users/1<i class="fa-solid fa-up-right-from-square"></i></a> </p><p>​    ② <a class="link"   href="http://localhost/users" >http://localhost/users<i class="fa-solid fa-up-right-from-square"></i></a></p><p>传统方式一般是一个请求url对应一种操作，这样做不仅麻烦，也不安全，因为会程序的人读取了你的请求url地址，就大概知道该url实现的是一个什么样的操作。</p><p>所以REST的优点有:</p><ul><li><p>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</p></li><li><p>书写简化</p></li></ul><p>那么对于REST来说，一个相同的url地址即可以是新增也可以是修改或者查询，那么到底我们该如何区分该请求到底是什么操作呢?</p><p>按照REST风格访问资源时使用的<strong>行为动作</strong>（一共有8种，常用的只有以下4种）区分对资源进行了何种操作：</p><ul><li><p><a class="link"   href="http://localhost/users" >http://localhost/users<i class="fa-solid fa-up-right-from-square"></i></a> 查询全部用户信息 <code>GET</code>（查询）</p></li><li><p><a class="link"   href="http://localhost/users/1" >http://localhost/users/1<i class="fa-solid fa-up-right-from-square"></i></a> 查询指定用户信息 <code>GET</code>（查询）</p></li><li><p><a class="link"   href="http://localhost/users" >http://localhost/users<i class="fa-solid fa-up-right-from-square"></i></a> 添加用户信息 <code>POST</code>（新增/保存）</p></li><li><p><a class="link"   href="http://localhost/users" >http://localhost/users<i class="fa-solid fa-up-right-from-square"></i></a> 修改用户信息 <code>PUT</code>（修改/更新）</p></li><li><p><a class="link"   href="http://localhost/users/1" >http://localhost/users/1<i class="fa-solid fa-up-right-from-square"></i></a> 删除用户信息 <code>DELETE</code>（删除）</p></li></ul><p>按照不同的请求方式代表不同的操作类型：发送GET请求是用来做查询；发送POST请求是用来做新增；发送PUT请求是用来做修改；发送DELETE请求是用来做删除。</p><blockquote><p>REST提供了对应的架构方式，按照这种架构设计项目可以降低开发的复杂性，提高系统的可伸缩性。</p><p>上述行为是约定方式，约定不是规范，可以打破，所以称REST风格，而不是REST规范。REST中规定GET/POST/PUT/DELETE针对的是查询/新增/修改/删除，但是我们如果非要用GET请求做删除，这点在程序上运行是可以实现的，但是如果绝大多数人都遵循这种风格，你写的代码让别人读起来就有点莫名其妙了。</p></blockquote><p>根据REST风格对资源进行访问称为<strong>RESTful</strong>，所以可以说以后都是基于RESTful来进行开发的。</p><h2 id="RESTful入门案例"><a href="#RESTful入门案例" class="headerlink" title="RESTful入门案例"></a>RESTful入门案例</h2><p><strong>环境准备</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230618093614185.png"                      alt="image-20230618093614185" style="zoom:87%;"                 ><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>将之前的增删改查替换成RESTful开发方式：</p><ul><li><p>之前不同的请求有不同的路径，现在要将其修改成统一的请求路径</p><p>修改前：新增: /save ，修改: /update，删除 /delete …</p><p>修改后：增删改查: /users</p></li><li><p>根据GET查询、POST新增、PUT修改、DELETE删除对方法的请求方式进行限定</p></li></ul><h3 id="修改RESTful风格"><a href="#修改RESTful风格" class="headerlink" title="修改RESTful风格"></a>修改RESTful风格</h3><p><strong>新增</strong></p><p>请求路径更改为<code>/users</code>，并且使用method属性限定该方法的访问方式为POST：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置当前请求方法为POST，表示REST风格中的添加操作</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">  <span class="meta">@RequestMapping(value = &quot;/users&quot;, method = RequestMethod.POST)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;user save...&quot;</span> + user);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p><strong>删除</strong></p><p>对于RESTful开发，如何携带数据参数？</p><p>前端发送请求的时候使用：<a class="link"   href="http://localhost/users/1" >http://localhost/users/1<i class="fa-solid fa-up-right-from-square"></i></a> ，路径中的1就是我们想要传递的参数。</p><p>后端获取参数，需要做如下修改：① 修改<code>@RequestMapping</code>的value属性，将其中修改为<code>/users/&#123;id&#125;</code>，目的是和路径匹配；② 在方法的形参前添加<code>@PathVariable</code>注解。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前请求方法为DELETE，表示REST风格中的删除操作</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">//    public String delete(@PathVariable(&quot;id&quot;) Integer userid)&#123;</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>如果方法形参的名称和路径{}中的值不一致：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230618112603915.png"                      alt="image-20230618112603915" style="zoom:67%;"                 ><p>如果有多个参数需要传递该如何编写：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id,<span class="meta">@PathVariable</span> String name)</span></span><br></pre></td></tr></table></figure></div></blockquote><p><strong>修改</strong></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置当前请求方法为PUT，表示REST风格中的修改操作</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">  <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;user update...&quot;</span> + user);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user update&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>复习一下：<font color="red">只有在请求参数是json格式的时候，才需要在control方法的形参前加<code>@RequestBody</code>注解。</font></p></blockquote><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230618113323094.png"                      alt="image-20230618113323094" style="zoom:77%;"                 ><p><strong>根据ID查询</strong></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置当前请求方法为GET，表示REST风格中的查询操作</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">  <span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;user getById...&quot;</span> + id);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getById&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p><strong>查询全部</strong></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.GET)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;user getAll...&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h3 id="RESTful入门开发总结"><a href="#RESTful入门开发总结" class="headerlink" title="RESTful入门开发总结"></a>RESTful入门开发总结</h3><ul><li>设定Http请求动作(method动词)</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;&quot;,method = RequestMethod.POST|GET|PUT|DELETE)</span></span><br></pre></td></tr></table></figure></div><ul><li>设定请求参数(路径变量)</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/users/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="meta">@ReponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>三大接收参数<code>@RequestBody</code>、<code>@RequestParam</code>、<code>@PathVariable</code>：</strong></p><p>区别：</p><p>(1) <code>@RequestParam</code>用于接收url地址传参或表单传参；</p><p>(2) <code>@RequestBody</code>用于接收json数据；</p><p>(3) <code>@PathVariable</code>用于接收路径参数，使用参数名称描述路径参数；</p><p>应用：</p><p>(1) 如果发送非json格式数据，选用<code>@RequestParam</code>接收请求参数；</p><p>(2) 后期开发中，发送请求参数超过1个时，以json格式为主，<code>@RequestBody</code>应用较广；</p><p>(3) 采用RESTful进行开发，当参数数量较少时，例如1个，可以采用<code>@PathVariable</code>接收请求路径变量，通常用于传递id值；</p><h2 id="RESTful快速开发"><a href="#RESTful快速开发" class="headerlink" title="RESTful快速开发"></a>RESTful快速开发</h2><p>简化前面RESTful入门开发的繁琐流程：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230618150323271.png"                      alt="image-20230618150323271" style="zoom:67%;"                 ><ul><li><p>每个方法的@RequestMapping注解中都定义了访问路径/books，重复性太高：将@RequestMapping提到类上面，用来定义所有方法共同的访问路径。</p></li><li><p>每个方法的@RequestMapping注解中都要使用method属性定义请求方式，重复性太高：使用<code>@GetMapping</code> <code>@PostMapping</code> <code>@PutMapping</code> <code>@DeleteMapping</code>代替。 </p></li><li><p>每个方法响应json都需要加上@ResponseBody注解，重复性太高：将ResponseBody提到类上面，让所有的方法都有@ResponseBody的功能；使用<code>@RestController</code>注解替换@Controller与@ResponseBody注解，简化书写。</p></li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book update...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getById...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="RESTful案例"><a href="#RESTful案例" class="headerlink" title="RESTful案例"></a>RESTful案例</h2><p>此次案例的重点是在SpringMVC中如何使用RESTful实现前后台交互，所以本案例并没有和数据库进行交互，所有数据使用假数据来完成开发。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>需求一：图书列表查询，从后台返回数据，将数据展示在页面上。</p><p>需求二：新增图书，将新增图书的数据传递到后台，并在控制台打印。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230618161050752.png"                      alt="image-20230618161050752" style="zoom:77%;"                 ><h3 id="后台接口开发"><a href="#后台接口开发" class="headerlink" title="后台接口开发"></a>后台接口开发</h3><p>步骤1：编写Controller类并使用RESTful进行配置</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="comment">// 查询全部</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 不与数据库进行交互，这里使用假数据</span></span><br><span class="line">        ArrayList&lt;Book&gt; bookList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book1.setName(<span class="string">&quot;C# primer&quot;</span>);</span><br><span class="line">        book1.setType(<span class="string">&quot;编程图书&quot;</span>);</span><br><span class="line">        book1.setDescription(<span class="string">&quot;C语言入门图书&quot;</span>);</span><br><span class="line">        bookList.add(book1);</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book2.setName(<span class="string">&quot;计算机网络：自顶向下&quot;</span>);</span><br><span class="line">        book2.setType(<span class="string">&quot;计算机网络&quot;</span>);</span><br><span class="line">        book2.setDescription(<span class="string">&quot;计算机四大件之计算机网络&quot;</span>);</span><br><span class="line">        bookList.add(book2);</span><br><span class="line">        <span class="keyword">return</span> bookList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save =====&gt; &quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#x27;module&#x27;:&#x27;Book save successfully...&#x27;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤2：使用PostMan进行测试</p><ul><li>测试新增</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230618163951612.png"                      alt="image-20230618163951612" style="zoom:87%;"                 ><ul><li>测试查询全部</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230618164145531.png"                      alt="image-20230618164145531" style="zoom:87%;"                 ><h3 id="页面访问处理"><a href="#页面访问处理" class="headerlink" title="页面访问处理"></a>页面访问处理</h3><p>步骤1：拷贝静态页面</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230618165134339.png"                      alt="image-20230618165134339"                ></p><p>步骤2：访问pages目录下的books.html</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230618165232338.png"                      alt="image-20230618165232338"                ></p><p>报错的原因是：<font color="blue">SpringMVC拦截了静态资源，根据/pages/books.html去controller找对应的方法，找不到所以会报404的错误。</font></p><p>因为在ServletInitConfig配置文件中<strong>拦截了静态资源</strong>：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>所以必须将静态资源在ServletInitConfig中进行放行：创建一个新的SpringMvcSupport配置类！</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置静态资源访问过滤，当前类需要设置为配置类，并被扫描加载</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span>&#123;</span><br><span class="line">        <span class="comment">//当访问/pages/????时候，从/pages目录下查找内容</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/css/**&quot;</span>).addResourceLocations(<span class="string">&quot;/css/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/js/**&quot;</span>).addResourceLocations(<span class="string">&quot;/js/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/plugins/**&quot;</span>).addResourceLocations(<span class="string">&quot;/plugins/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>该配置类是在config目录下，SpringMVC扫描的是controller包，所以该配置类还未生效，要想生效需要将SpringMvcConfig配置类进行修改：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.Lijiacheng.controller&quot;,&quot;com.Lijiacheng.config&quot;&#125;)</span></span><br></pre></td></tr></table></figure></div><p>步骤3：修改books.html页面</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//添加</span><br><span class="line">  saveBook () &#123;</span><br><span class="line">  axios.post(&quot;/books&quot;,this.formData).then((res)=&gt;&#123;</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;,</span><br><span class="line">//主页列表查询</span><br><span class="line">  getAll() &#123;</span><br><span class="line">    axios.get(&quot;/books&quot;).then((res)=&gt;&#123;</span><br><span class="line">    this.dataList = res.data;</span><br><span class="line">    &#125;);</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230618170855805.png"                      alt="image-20230618170855805"                ></p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230618171004140.png"                      alt="image-20230618171004140" style="zoom:77%;"                 ><p>前端的新增图书请求到后端来接收：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230618171022178.png"                      alt="image-20230618171022178"                ></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;REST（Representational State Transfer），表现形式状态转换，它是一种软件架构风格，听不懂很正常。说通俗点就是用URL定位资源，用HTTP动词（GET, POST, DELETE, PUT）描述操作的一种开发方式。&lt;/p&gt;</summary>
    
    
    
    <category term="SpringMVC" scheme="https://kicheng.github.io/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>algorithm04 字符串</title>
    <link href="https://kicheng.github.io/2023/06/05/algorithm04-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://kicheng.github.io/2023/06/05/algorithm04-%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2023-06-05T12:55:33.000Z</published>
    <updated>2023-06-21T14:50:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>字符串比较简单，直接来看题目！</p><span id="more"></span><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>字符串很简单，这里我就记录一下几个字符串、数组、char类型相互转化的方法。</p><p>toCharArray()</p><p>String.ValueOf()</p><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><h3 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a><a class="link"   href="https://leetcode.cn/problems/reverse-string/" >344. 反转字符串<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm04-%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20230605205843387.png"                      alt="image-20230605205843387"                ></p><p>双指针，没什么可说的，重拳出击！</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> left=<span class="number">0</span>,right=len-<span class="number">1</span>;left&lt;right;left++,right--)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="541-反转字符串-II"><a href="#541-反转字符串-II" class="headerlink" title="541. 反转字符串 II"></a><a class="link"   href="https://leetcode.cn/problems/reverse-string-ii/" >541. 反转字符串 II<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm04-%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20230605210330082.png"                      alt="image-20230605210330082"                ></p><p>这种题目属于模拟类问题，模拟类问题要进行明确的分情况讨论：</p><p>情况①：字符串剩余字符小于k个 → 全部翻转   </p><p>情况②：字符串剩余字符大于等于k个，且少于2k个 → 翻转前k个   </p><p>情况③：字符串剩余字符大于2k个 → 正常翻转前k个</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">char</span>[] chs = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i+=<span class="number">2</span>*k)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            if(i+k &lt;= len)&#123;</span></span><br><span class="line"><span class="comment">                reverse(chs, i, i+k-1);</span></span><br><span class="line"><span class="comment">            &#125;else&#123;</span></span><br><span class="line"><span class="comment">                reverse(chs, i, len-1);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">             reverse(chs, i, Math.min(i+k-<span class="number">1</span>,len-<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(chs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span>[] chs, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chs[left];</span><br><span class="line">            chs[left] = chs[right];</span><br><span class="line">            chs[right] = temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a><a class="link"   href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/" >剑指 Offer 05. 替换空格<i class="fa-solid fa-up-right-from-square"></i></a></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm04-%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20230607113006876.png"                      alt="image-20230607113006876"                ></p><p>写一个函数实现该方法：<code>s.replace(&quot; &quot;, &quot;%20&quot;);</code>  </p><p>思路1：使用额外的空间</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String[] strs = <span class="keyword">new</span> <span class="title class_">String</span>[s.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&#x27; &#x27;</span> == s.charAt(i))&#123;</span><br><span class="line">                strs[i] = <span class="string">&quot;%20&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                strs[i] = String.valueOf(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">            ans += strs[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>思路2：如果要将这道题做到极致，就不要用额外的辅助空间了</p><p>思路是用双指针，首先使用数组扩充为每个空格填充为”%20”之后的大小（java数组在创建之后不可以改变大小，但是cpp中vector的resize可以），然后<strong>从后向前</strong>（从前向后的话每次填充”%20”后都要将后面的数组元素向后移动）替换空格，i指向新长度的末尾，j指向旧长度的末尾。</p><h3 id="151-反转字符串中的单词"><a href="#151-反转字符串中的单词" class="headerlink" title="151. 反转字符串中的单词"></a><a class="link"   href="https://leetcode.cn/problems/reverse-words-in-a-string/" >151. 反转字符串中的单词<i class="fa-solid fa-up-right-from-square"></i></a></h3><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm04-字符串/image-20230621211906665.png"                      alt="image-20230621211906665" style="zoom:87%;"                 ><p>思路：和C++语言字符串可变的特性不同，Java语言的字符串是不可变的，所以必须要开辟可变的辅助空间来完成这道题目。主要采用的思路是这样的，先去掉字符串中多余的空格，再将整个数组倒置（这时每个单词也都是倒序的），再对每个单词的字母进行倒置，就完成了题目的要求。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> trimSpaces(s);</span><br><span class="line">        reverse(sb, <span class="number">0</span> ,sb.length()-<span class="number">1</span>);</span><br><span class="line">        reverseEachWord(sb);</span><br><span class="line">        <span class="keyword">return</span> sb.toString().trim();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 去除字符串多余的空格</span></span><br><span class="line">    <span class="keyword">public</span> StringBuilder <span class="title function_">trimSpaces</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        s = s.trim();  <span class="comment">// 删除头尾的空白</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = s.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 删除中间多余的空白</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(left);</span><br><span class="line">            <span class="keyword">if</span>(c != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sb.charAt(sb.length()-<span class="number">1</span>) != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">// 将字符串倒序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(StringBuilder sb, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> sb.charAt(left);</span><br><span class="line">            sb.setCharAt(left++, sb.charAt(right));</span><br><span class="line">            sb.setCharAt(right--, temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将字符串中的每个单词倒序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseEachWord</span><span class="params">(StringBuilder sb)</span>&#123;</span><br><span class="line">        sb.append(<span class="string">&#x27; &#x27;</span>); <span class="comment">// 防止最后一个单词不被倒序</span></span><br><span class="line">        <span class="comment">// 快慢指针法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(fast = <span class="number">0</span>;fast &lt; sb.length();fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sb.charAt(fast) == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                reverse(sb, slow, fast-<span class="number">1</span>);</span><br><span class="line">                slow = fast + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这是我初次做法，感觉也不错：单独把每个单词取出来放入一个list中，再倒序遍历。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> start=<span class="number">0</span>, end=<span class="number">0</span>;</span><br><span class="line">        ArrayList&lt;String&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(end=<span class="number">0</span>;end&lt;s.length();end++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&#x27; &#x27;</span> == s.charAt(end) &amp;&amp; start == end)&#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27; &#x27;</span> == s.charAt(end) &amp;&amp; start != end)&#123;</span><br><span class="line">                lists.add(s.substring(start,end));</span><br><span class="line">                start = end + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(end == s.length()-<span class="number">1</span> &amp;&amp; s.charAt(end) != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                lists.add(s.substring(start));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += lists.get(lists.size()-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=lists.size()-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            ans = ans + <span class="string">&quot; &quot;</span> + lists.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="剑指-Offer-58-II-左旋转字符串"><a href="#剑指-Offer-58-II-左旋转字符串" class="headerlink" title="剑指 Offer 58 - II. 左旋转字符串"></a><a class="link"   href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/" >剑指 Offer 58 - II. 左旋转字符串<i class="fa-solid fa-up-right-from-square"></i></a></h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm04-%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20230621223954771.png"                      alt="image-20230621223954771"                ></p><p>法一：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseLeftWords</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">startStr</span> <span class="operator">=</span> s.substring(<span class="number">0</span>,n);</span><br><span class="line">        <span class="type">String</span> <span class="variable">endStr</span> <span class="operator">=</span> s.substring(n);</span><br><span class="line">        <span class="keyword">return</span> endStr + startStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>法二：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseLeftWords</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i&lt;s.length();i++)&#123;</span><br><span class="line">            sb.append(s.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            sb.append(s.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="字符串总结"><a href="#字符串总结" class="headerlink" title="字符串总结"></a>字符串总结</h2><p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。StringBuilder 和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="algorithm04-字符串/image-20230621223422926.png"                      alt="image-20230621223422926" style="zoom:77%;"                 ><p>StringBuilder的父类和String实现了相同的接口，所以StringBuilder可以使用String所有的方法，除此之外比较常用的有：</p><p>1）append</p><p>2）修改字符串的元素：<code>setCharAt(索引，修改的元素)</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;字符串比较简单，直接来看题目！&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://kicheng.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>01-SpringMVC入门</title>
    <link href="https://kicheng.github.io/2023/06/05/01-SpringMVC%E5%85%A5%E9%97%A8/"/>
    <id>https://kicheng.github.io/2023/06/05/01-SpringMVC%E5%85%A5%E9%97%A8/</id>
    <published>2023-06-05T02:39:50.000Z</published>
    <updated>2023-06-11T03:20:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>SpringMVC是隶属于Spring框架的一部分吗，是对Servlet进行了封装。SpringMVC是处于Web层的框架，所以其主要的作用就是用来接收前端发过来的请求和数据然后经过处理并将处理的结果响应给前端，所以如何处理请求和响应是SpringMVC中非常重要的一块内容。</p><span id="more"></span><h2 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h2><h3 id="Web架构"><a href="#Web架构" class="headerlink" title="Web架构"></a>Web架构</h3><p>现在web程序大都基于三层架构来实现：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230605105629968.png"                      alt="image-20230605105629968" style="zoom:67%;"                 ><ul><li><p>浏览器发送一个请求给后端服务器，后端服务器现在是使用Servlet来接收请求和数据；</p></li><li><p>如果所有的处理都交给Servlet来处理的话，所有的东西都耦合在一起，对后期的维护和扩展极为不利；将后端服务器Servlet拆分成三层，分别是web、service和dao；</p><ul><li>web层主要由servlet来处理，负责页面请求和数据的收集以及响应结果给前端；</li><li>service层主要负责业务逻辑的处理；</li><li>dao层主要负责连接数据库，进行数据的增删改查操作；</li></ul></li><li><p>servlet处理请求和数据的时候，存在的问题是一个servlet只能处理一个请求；针对web层进行了优化，采用了MVC设计模式，将其设计为controller、view和model：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230605110015709.png"                      alt="image-20230605110015709" style="zoom:67%;"                 ><ul><li><p>controller负责请求和数据的接收，接收后将其转发给service进行业务处理；</p></li><li><p>service根据需要调用dao对数据进行增删改查；</p></li><li><p>dao把数据处理完后将结果交给service，service再交给controller；</p></li><li><p><font color="red"><strong>同步请求：</strong></font>controller根据需求组装成Model和View，Model和View组合起来生成页面转发给前端浏览器（这样做的好处就是controller可以处理多个请求，并对请求进行分发，执行不同的业务操作）；</p><p>现在更多使用的是<font color="red"><strong>异步请求</strong></font>方式，后端不需要返回view视图，而是将数据以json格式返回</p></li></ul></li></ul><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><p>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架，相比于Servlet使用更加简单、开发更加便捷。</p><p>SpringMVC主要负责的就是：① controller如何接收请求和数据；② 如何将请求和数据转发给业务层；③ 如何将响应数据转换成json发回到前端。</p><h2 id="SpringMVC入门案例"><a href="#SpringMVC入门案例" class="headerlink" title="SpringMVC入门案例"></a>SpringMVC入门案例</h2><p>SpringMVC是一个Web框架，是用来替换Servlet的，在JavaWeb中如何使用Servlet进行开发呢？忘记的话看前面的文章【<a href="https://kicheng.github.io/2023/03/28/03-Servlet/">JavaWeb_Servlet</a>】</p><p>SpringMVC的制作流程与Servlet几乎一致：</p><p>1、创建Maven结构的web工程</p><p>2、设置tomcat服务器：tomcat插件</p><p>3、导入坐标（SpringMVC+Servlet）</p><p>4、定义处理请求的功能类（Controller）</p><p>5、设置请求映射</p><p>6、将SpringMVC设定加载到tomcat容器中</p><h3 id="SpringMVC实现流程"><a href="#SpringMVC实现流程" class="headerlink" title="SpringMVC实现流程"></a>SpringMVC实现流程</h3><p>步骤1：创建webapp内核的Maven项目</p><p>步骤2：导入依赖坐标（Servlet、SpringMVC）</p><p>​    注意导入的版本，建议使用JDK8以及5.3.0以下的SpringMVC版本配置，否则后面会出现奇奇怪怪的bug…到现在不知道如何解决jdk17不兼容的问题，后面做大项目的时候一定解决这个问题！</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果不设置默认是compile在编译、运行、测试时均有效；如果运行有效的话就会和tomcat中的servlet-api包发生冲突 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.24.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>步骤3：创建SpringMvcConfig配置类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.Lijiacheng.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤4：创建Controller类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User save...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springMVC&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>​    Controller要注意的点有如下几个：</p><p>（1）<code>@Controller</code>将其作为Bean交给Spring管理；</p><p>（2）<code>@RequestMapping(&quot;/save&quot;)</code>指定request请求访问的地址，相当于Servlet中的<code>WebServlet</code>；</p><p>（3）<code>@ResponseBody</code>指定后端返回的response响应是json数据；</p><p>步骤5：使用Servlet容器启动配置类替换web.xml</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//加载springmvc配置类</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化WebApplicationContext对象</span></span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        <span class="comment">//加载指定配置类</span></span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置由springmvc控制器处理的请求映射路径(设置为接收所有路径)</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载spring配置类</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>​    配置类要继承这个<code>AbstractDispatcherServletInitializer</code>类；并且初始化时所需的对象和前面的不同，是<code>AnnotationConfigWebApplicationContext</code>。</p><p>步骤6：配置Tomcat环境</p><p>我一般是习惯用IDEA自带的Tomcat插件，唯一的缺点是只能用Tomcat7，但是Tomcat7和JDK17已经不兼容了，所以我这里降低版本到JDK8了。</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>步骤7：运行Tomcat服务器，在浏览器访问<code>/save</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230605164950934.png"                      alt="image-20230605164950934"                ></p><h3 id="流程解析"><a href="#流程解析" class="headerlink" title="流程解析"></a>流程解析</h3><p>将SpringMVC的使用过程总共分两个阶段来分析，分别是启动服务器初始化过程和单次请求过程。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230605165432219.png"                      alt="image-20230605165432219" style="zoom: 50%;"                 ><h4 id="启动服务器初始化"><a href="#启动服务器初始化" class="headerlink" title="启动服务器初始化"></a>启动服务器初始化</h4><p>1、服务器启动，执行ServletInitConfig类，初始化web容器（功能类似于以前的web.xml）</p><p>2、执行createServletApplicationContext方法，创建了WebApplicationContext对象，加载SpringMvcConfig配置类来初始化SpringMVC的容器</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化WebApplicationContext对象</span></span><br><span class="line"><span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line"><span class="comment">//加载指定配置类</span></span><br><span class="line">ctx.register(SpringMvcConfig.class);</span><br></pre></td></tr></table></figure></div><p>3、加载SpringMvcConfig配置类，执行@ComponentScan加载对应的bean，扫描指定包及其子包下所有类上的注解，这里是<code>@Controller</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.Lijiacheng.controller&quot;)</span></span><br></pre></td></tr></table></figure></div><p>4、加载Controller类，每个@RequestMapping的名称对应一个具体的方法：建立了<code>/save</code>和save方法的对应关系</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;User save...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springMVC&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>5、执行getServletMappings方法，设定SpringMVC拦截请求的路径规则：<code>/</code>代表所拦截请求的路径规则，只有被拦截后才能交给SpringMVC来处理请求</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br></pre></td></tr></table></figure></div><h4 id="单次请求过程"><a href="#单次请求过程" class="headerlink" title="单次请求过程"></a>单次请求过程</h4><p>1、发送请求 <a class="link"   href="http://localhost:8080/springmvc_01_quickstart/save" >http://localhost:8080/springmvc_01_quickstart/save<i class="fa-solid fa-up-right-from-square"></i></a></p><p>2、web容器发现该请求满足SpringMVC拦截规则，将请求交给SpringMVC处理</p><p>3、解析请求路径<code>/save</code>，由<code>/save</code>匹配执行对应的方法save()</p><p>4、检测到有<code>@ResponseBody</code>直接将save()方法的返回值作为响应体返回给请求方</p><h3 id="Bean加载控制"><a href="#Bean加载控制" class="headerlink" title="Bean加载控制"></a>Bean加载控制</h3><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>之前我们创建过SpringConfig配置类，在MVC中也创建了SpringMvcConfig配置类，它们都需要加载资源，它们分别都加载哪些内容呢？</p><blockquote><p>我们目前写过的Config配置类有：ServletInitConfig, SpringConfig, SpringMvcConfig, JdbcConfig, MybatisConfig。</p></blockquote><p>controller目录存放的是SpringMVC的controller类、service目录存放的是service接口和实现类、dao目录存放的是dao/Mapper接口。controller、service和dao这些类都需要被容器管理成bean对象，SpringMVC加载表现层bean，也就是controller包下的类；Spring控制业务层service的bean和功能bean（DataSource, SqlSessionFactoryBean, MapperScannerConfigurer等），我们需要让Spring和SpringMVC分开加载各自的内容。</p><p>在SpringMVC的配置类SpringMvcConfig中使用注解<code>@ComponentScan</code>，我们只需要将其扫描范围设置到controller即可：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.Lijiacheng.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在Spring的配置类SpringConfig中使用注解<code>@ComponentScan </code>，当时扫描的范围中其实是已经包含了controller：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.Lijiacheng&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>因为功能不同，所以我们需要避免Spring错误加载到SpringMVC的bean。</p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230605192715499.png"                      alt="image-20230605192715499" style="zoom:67%;"                 ><h4 id="设置Bean加载控制"><a href="#设置Bean加载控制" class="headerlink" title="设置Bean加载控制"></a>设置Bean加载控制</h4><p>方式一：修改Spring配置类，设定扫描范围为精准范围</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.service&quot;,&quot;comitheima.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>上述只是通过例子说明可以精确指定让Spring扫描对应的包结构，真正在做开发的时候，因为Dao最终是交给MapperScannerConfigurer对象来进行扫描处理的，我们只需要将其扫描到service包即可。</p></blockquote><p>方式二：修改Spring配置类，排除掉controller包中的bean</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.Lijiacheng&quot;,</span></span><br><span class="line"><span class="meta">        excludeFilters = @ComponentScan.Filter(  // 设置扫描加载bean时，排除的过滤规则</span></span><br><span class="line"><span class="meta">                type = FilterType.ANNOTATION,  // 设置排除规则，当前使用按照bean定义时的注解类型进行排除</span></span><br><span class="line"><span class="meta">                classes = Controller.class  // 设置具体排除的注解类</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这样，通过getBean获取Controller类，如果获取不到就说明在SpringConfig配置类中排除成功了。</p><blockquote><p>需要把SpringMvcConfig配置类上的<code>@ComponentScan</code>注解注释掉才可以测试成功。因为SpringConfig类中扫描的包是com.Lijiacheng下除了controller包，config中的SpringMvcConfig就会被扫描到，里面又有一个<code>@ComponentScan</code>又将controller类扫描进来了。</p></blockquote><p>最后一点也很重要，有了SpringConfig配置类，要想在tomcat服务器启动将其加载，我们需要修改ServletInitConfig配置类中的最后一个函数，将Spring配置也加载进来，很简单：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">      ctx.register(SpringConfig.class);</span><br><span class="line">      <span class="keyword">return</span> ctx;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p><strong>简化ServletInitConfig配置类开发</strong>（以后用它更简单，不过上面的是老母子）</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>Bean加载控制总结</strong></p><p><code>@ComponentScan</code>有个很重要的属性：<code>excludeFilters</code>排除扫描路径中加载的bean，需要指定类别（type）和具体项（classes）；<code>includeFilter</code>相反。</p><h2 id="SpringMVC的请求与响应"><a href="#SpringMVC的请求与响应" class="headerlink" title="SpringMVC的请求与响应"></a>SpringMVC的请求与响应</h2><p>SpringMVC是web层的框架，主要的作用是接收请求、响应结果，所以这一部分是学习SpringMVC的重点内容。</p><h3 id="设置请求映射路径"><a href="#设置请求映射路径" class="headerlink" title="设置请求映射路径"></a>设置请求映射路径</h3><h4 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h4><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606101301421.png"                      alt="image-20230606101301421" style="zoom:77%;"                 ><p>开启Tomcat服务器，发生报错：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606102344014.png"                      alt="image-20230606102344014"                ></p><p>意思是<code>/save</code>已经是bookController这个bean的方法进行匹配了，而另一个UserController这个bean也有一个<code>/save</code>，出现了request请求的匹配模糊。</p><h4 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h4><p>前面说到报错，是因为两个Controller中出现了重复的请求路径：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Book save...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =====================================</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User save...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User delete...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>解决思路其实也很好想到：为不同模块设置模块名作为请求路径前缀。</p><p>对于BookController的save，将其访问路径设置 <a class="link"   href="http://localhost:8080/springmvc_03_request_mapping/book/save%EF%BC%9B%E5%AF%B9%E4%BA%8EUserController%E7%9A%84save%EF%BC%8C%E5%B0%86%E5%85%B6%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84%E8%AE%BE%E7%BD%AE" >http://localhost:8080/springmvc_03_request_mapping/book/save；对于UserController的save，将其访问路径设置<i class="fa-solid fa-up-right-from-square"></i></a> <a class="link"   href="http://localhost:8080/springmvc_03_request_mapping/User/save%E3%80%82" >http://localhost:8080/springmvc_03_request_mapping/User/save。<i class="fa-solid fa-up-right-from-square"></i></a></p><h4 id="设置映射路径"><a href="#设置映射路径" class="headerlink" title="设置映射路径"></a>设置映射路径</h4><p>类上也可以添加<code>@RequestMapping</code>注解：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Book save...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =====================================</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User save...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User delete...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606105142414.png"                      alt="image-20230606105142414"                ></p><blockquote><p><code>@RequestMapping</code>注解value属性前面加不加<code>/</code>都可以，这一点和Servlet有所不同！</p></blockquote><h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><p>请求路径设置好后，只要确保页面发送请求地址和后台Controller类中配置的路径一致，就可以接收到前端的请求，接收到请求后，如何接收页面传递的参数。请求参数的传递与接收是和请求方式有关系的，目前比较常见的两种请求方式POST和GET。</p><h4 id="环境准备-2"><a href="#环境准备-2" class="headerlink" title="环境准备"></a>环境准备</h4><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606114451105.png"                      alt="image-20230606114451105" style="zoom:77%;"                 ><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p><strong>GET发送单个参数</strong></p><p>客户端发送请求与参数：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606115900208.png"                      alt="image-20230606115900208" style="zoom:80%;"                 ><p>服务端接收参数：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commonParam&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;来自浏览器的普通参数传递 name =====&gt;&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;commonParam&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里controller方法的形参负责接收来自客户端的请求参数（<font color="blue">注意形参名要和请求参数名一致！</font>）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606120718965.png"                      alt="image-20230606120718965"                ></p><p>客户端接收到的返回数据：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606120053621.png"                      alt="image-20230606120053621"                ></p><p><strong>GET发送多个参数</strong></p><p>发送请求与参数：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606122327297.png"                      alt="image-20230606122327297" style="zoom:80%;"                 ><p>服务端接收参数：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commonParam&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(String name, Integer age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;来自浏览器的普通参数传递 name =====&gt;&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;来自浏览器的普通参数传递 age =====&gt;&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;commonParam&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606122229281.png"                      alt="image-20230606122229281"                ></p><p><strong>GET请求中文乱码问题</strong></p><p>如果我们传递的请求参数中有中文，你会发现接收到的参数会出现中文乱码问题。</p><p>出现乱码的原因相信大家都清楚（忘了的话回去看JavaWeb的博客），Tomcat8以后的版本已经处理了中文乱码的问题，但是IDEA中的Tomcat插件目前只更新到Tomcat7，所以需要修改pom.xml中<strong>tomcat插件的配置</strong>来解决<font color="red">GET请求</font>中文乱码问题。</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span>  <span class="comment">&lt;!--访问路径编解码字符集--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606122858098.png"                      alt="image-20230606122858098"                ></p><p><strong>POST发送参数</strong></p><p>发送请求与参数：post的请求参数在请求体上</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606123252732.png"                      alt="image-20230606123252732" style="zoom:80%;"                 ><p>接收参数和GET完全一致！</p><p><strong>POST请求中文乱码问题</strong></p><p>解决方案：在ServletInitConfig中配置过滤器</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 乱码处理 */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Filter[] getServletFilters()&#123;</span><br><span class="line">      <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">      filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606161430634.png"                      alt="image-20230606161430634"                ></p><blockquote><p>CharacterEncodingFilter是在spring-web包中，而spring-web包又在SpringMVC包里。</p></blockquote><h3 id="五种类型的参数传递"><a href="#五种类型的参数传递" class="headerlink" title="五种类型的参数传递"></a>五种类型的参数传递</h3><p>前面我们已经能够使用GET或POST来发送请求和数据，所携带的数据都是比较简单的数据，接下来在这个基础上，我们来研究一些比较复杂的参数传递：普通参数、POJO类型参数、嵌套POJO类型参数、数组类型参数、集合类型参数。</p><h4 id="普通参数"><a href="#普通参数" class="headerlink" title="普通参数"></a>普通参数</h4><p>普通参数：url地址传参，地址参数名与形参变量名相同，定义形参即可接收参数。</p><p>能接收到参数的前提是：这两个值必须一致！</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606162700080.png"                      alt="image-20230606162700080" style="zoom:80%;"                 ><p>那如果方法形参和请求参数名不一致怎么办？</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606163422184.png"                      alt="image-20230606163422184"                ></p><p>使用<code>@RequestParam</code>注解：写上<code>@RequestParam</code>注解框架就不需要自己去解析注入，能提升框架处理性能。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commonParam&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String username, Integer age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;来自浏览器的普通参数传递 name =====&gt;&quot;</span> + username);</span><br><span class="line">        System.out.println(<span class="string">&quot;来自浏览器的普通参数传递 age =====&gt;&quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;commonParam&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="POJO类型参数"><a href="#POJO类型参数" class="headerlink" title="POJO类型参数"></a>POJO类型参数</h4><p>简单数据类型一般处理的是参数个数比较少的请求，如果参数比较多，那么后台接收参数的时候就比较复杂，这个时候我们可以考虑使用POJO数据类型。</p><p>POJO参数：请求参数名与形参对象属性名相同，定义POJO类型形参即可接收参数（<font color="red">请求参数key的名称要和POJO中属性的名称一致，否则无法封装</font>）。</p><p>先看看前面封装的pojo类：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="comment">// ...后部分省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>发送请求和参数（<font color="red">请求参数key的名称要和POJO中属性的名称一致，否则无法封装</font>）：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606164837627.png"                      alt="image-20230606164837627" style="zoom:80%;"                 ><p>服务器接收参数：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/pojoParam&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">pojoParam</span><span class="params">(User user)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;来自浏览器的pojo参数传递 user =====&gt;&quot;</span> + user);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;,&#x27;pojoParam&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606165101676.png"                      alt="image-20230606165101676"                ></p><h4 id="嵌套POJO类型参数"><a href="#嵌套POJO类型参数" class="headerlink" title="嵌套POJO类型参数"></a>嵌套POJO类型参数</h4><p>嵌套POJO参数：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数。</p><p>发送请求和参数（<font color="red">请求参数key的名称要和POJO中属性的名称一致，否则无法封装</font>）：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606171638166.png"                      alt="image-20230606171638166" style="zoom:80%;"                 ><p>服务器接收参数：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/containPojoParam&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">containPojoParam</span><span class="params">(User user)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;来自浏览器的嵌套pojo参数传递 user =====&gt;&quot;</span> + user.toString());</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;,&#x27;pojoParam&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606171728620.png"                      alt="image-20230606171728620"                ></p><h4 id="数组类型参数"><a href="#数组类型参数" class="headerlink" title="数组类型参数"></a>数组类型参数</h4><p>数组参数：请求参数名与形参对象属性名<strong>相同</strong>且请求参数为多个，定义数组类型即可接收参数。</p><p>发送请求和参数（请求参数名必须一致才能封装到一个数组当中）：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606172710261.png"                      alt="image-20230606172710261" style="zoom:80%;"                 ><p>服务器接收参数：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] likes)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;来自浏览器的数组参数传递 likes =====&gt;&quot;</span> + Arrays.toString(likes));</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;,&#x27;arrayParam&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606172647070.png"                      alt="image-20230606172647070"                ></p><h4 id="集合类型数据"><a href="#集合类型数据" class="headerlink" title="集合类型数据"></a>集合类型数据</h4><p>发送请求和参数：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606184441837.png"                      alt="image-20230606184441837"                ></p><p>服务器接收参数：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;来自浏览器的列表参数传递 likes =====&gt;&quot;</span> + likes);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;,&#x27;arrayParam&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p>出现报错：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606184417780.png"                      alt="image-20230606184417780"                ></p><p>错误的原因是：SpringMVC将List看做是一个POJO对象来处理，将其创建一个对象并准备把前端的数据封装到对象中，但是List是一个接口无法创建对象，所以报错。</p><p>解决方案：<code>RequestParam</code>注解（对于简单数据类型使用数组会比集合更简单些）</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;来自浏览器的列表参数传递 likes =====&gt;&quot;</span> + likes);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;,&#x27;listParam&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p><strong>总结</strong></p><p><code>RequestParam</code>注解用在SpringMVC控制器方法形参定义前面：情况1——简单数据类型参数名和请求参数名不一致时进行映射；情况2——对于List列表形参前要加该注释将其标明为非POJO对象。</p><h3 id="JSON数据传输参数"><a href="#JSON数据传输参数" class="headerlink" title="JSON数据传输参数"></a>JSON数据传输参数</h3><p>前面我们说过，现在比较流行的开发方式为异步调用。前后端以异步方式进行交换，传输的数据使用的是JSON，所以前端如果发送的是JSON数据，后端该如何接收。</p><p>SpringMVC接收JSON数据的实现步骤为：</p><ul><li>导入jackson包；</li><li>客户端发送JSON数据；</li><li>开启SpringMVC注解驱动，在SpringMvcConfig配置类上添加<code>@EnableWebMvc</code>注解；</li><li>Controller方法的参数前添加<code>@RequestBody</code>注解.</li></ul><h4 id="JSON普通数组"><a href="#JSON普通数组" class="headerlink" title="JSON普通数组"></a>JSON普通数组</h4><p>步骤1：pom.xml添加依赖</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">2.15</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div><p>步骤2：PostMan发送JSON数据</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606201238403.png"                      alt="image-20230606201238403" style="zoom:80%;"                 ><p>步骤3：开启SpringMVC注解支持</p><p>​    在SpringMVC的配置类中开启SpringMVC的注解支持，这里面就包含了将JSON转换成对象的功能。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.Lijiacheng.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启json数据类型自动转换</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>步骤4：参数前添加<code>@RequestBody</code>将外部传递的json数组数据映射到形参的集合对象中作为数据</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用@RequestBody注解将外部传递的json数组数据映射到形参的集合对象中作为数据</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/listParamForJson&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">listParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;来自浏览器的JSON普通数组参数传递 likes =====&gt;&quot;</span> + likes);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;,&#x27;listParamForJson&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>因为json数据是异步请求，参数和数据在表单中，所以不能用<code>@RequestParam</code>，而用<code>@RequestBody</code>.</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606201541316.png"                      alt="image-20230606201541316"                ></p><h4 id="JSON对象数据"><a href="#JSON对象数据" class="headerlink" title="JSON对象数据"></a>JSON对象数据</h4><p>请求和数据的发送：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606202729677.png"                      alt="image-20230606202729677" style="zoom:80%;"                 ><p>后端接收数据：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/pojoForJson&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">pojoForJson</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;来自浏览器的JSON实体类对象参数传递 User =====&gt;&quot;</span> + user);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;,&#x27;pojoForJson&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p><font color="blue">这里也不要忘记在controller方法形参对象前加上<code>@RequestBody</code>进行json类型转换。</font></p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606202648795.png"                      alt="image-20230606202648795"                ></p><h4 id="JSON对象数组"><a href="#JSON对象数组" class="headerlink" title="JSON对象数组"></a>JSON对象数组</h4><p>json对象数组即为在集合中保存多个POJO。</p><p>请求和数据的发送：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606204127055.png"                      alt="image-20230606204127055" style="zoom:80%;"                 ><p>后端接收数据：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listPojoForJson&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">listPojoForJson</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; users)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;来自浏览器的JSON对象数组参数传递 users =====&gt;&quot;</span> + users);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;,&#x27;listPojoForJson&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606204104084.png"                      alt="image-20230606204104084"                ></p><blockquote><p><strong><code>@RequestBody</code>与<code>@RequestParam</code>的区别：</strong></p><p><code>@RequestParam</code>用于接收url地址传参，表单传参【application/x-www-form-urlencoded】；<code>@RequestBody</code>用于接收json数据【application/json】.</p><p>后期开发中，发送json格式数据为主，<code>@RequestBody</code>应用较广；如果发送非json格式数据，选用<code>@RequestParam</code>接收请求参数。</p></blockquote><h3 id="日期类型参数传递"><a href="#日期类型参数传递" class="headerlink" title="日期类型参数传递"></a>日期类型参数传递</h3><p>前面我们处理过简单数据类型、POJO数据类型、数组和集合数据类型以及JSON数据类型，接下来我们还得处理一种开发中比较常见的一种数据类型：日期类型。</p><p>日期的格式有N多中输入方式，比如：2088-08-18、2088/08/18、08/18/2088……这么多日期格式，SpringMVC如何接收。</p><p>步骤1：编写方法接收日期数据</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dataParam&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">dataParam</span><span class="params">(Date date,</span></span><br><span class="line"><span class="params">                          <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> Date date1,</span></span><br><span class="line"><span class="params">                          <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> Date date2)</span></span><br><span class="line">  &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;来自浏览器的日期参数传递 date =====&gt;&quot;</span> + date);</span><br><span class="line">      System.out.println(<span class="string">&quot;来自浏览器的日期参数传递 date1(YYYY-MM-dd) =====&gt;&quot;</span> + date1);</span><br><span class="line">      System.out.println(<span class="string">&quot;来自浏览器的日期参数传递 date2(YYYY-MM-dd HH:mm:ss)&quot;</span> + date2);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;,&#x27;dataParam&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p>步骤2：客户端发送请求</p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606225853557.png"                      alt="image-20230606225853557" style="zoom:80%;"                 ><blockquote><p>SpringMVC默认支持的字符串转日期的格式为yyyy/MM/dd ，而如果传递的不符合其默认格式，SpringMVC就无法进行格式转换，所以报错：<img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606205513452.png"                      alt="image-20230606205513452"                ></p><p>所以使用<code>@DateTimeFormat</code>注解的<code>pattern</code>值来解决这个问题。</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230606225051826.png"                      alt="image-20230606225051826"                ></p><h3 id="参数传递的内部实现原理"><a href="#参数传递的内部实现原理" class="headerlink" title="参数传递的内部实现原理"></a>参数传递的内部实现原理</h3><p>前端传递字符串，后端使用日期Date接收；前端传递JSON数据，后端使用对象接收；前端传递字符串，后端使用Integer接收。在数据的传递过程中存在很多类型的转换，那么谁来做这个类型转换——是<strong>SpringMVC</strong>提供的很多类型转换接口和实现类。</p><p>在框架中，有一些类型转换接口，其中有：</p><ul><li> Converter接口：convert方法就是将从页面上接收的数据(S)转换成我们想要的数据类型(T)返回，框架中有提供很多对应Converter接口的实现类，用来实现不同数据类型之间的转换，如：请求参数年龄数据（String→Integer）、日期格式转换（String → Date）。</li><li>HttpMessageConverter接口：该接口是实现对象与JSON之间的转换工作（配置<code>@EnableWebMvc</code>）。</li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>SpringMVC接收到请求和数据后，进行一些了的处理，当然这个处理可以是转发给Service，Service层再调用Dao层完成的，不管怎样，处理完以后都需要将结果告知给用户。对于响应，主要就包含两部分内容：响应页面、响应数据（文本数据、json数据），因为异步调用是目前常用的主流方式，所以我们需要更关注的就是如何返回JSON数据。</p><h4 id="环境准备-3"><a href="#环境准备-3" class="headerlink" title="环境准备"></a>环境准备</h4><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230607100531074.png"                      alt="image-20230607100531074" style="zoom:80%;"                 ><h4 id="响应页面（了解）"><a href="#响应页面（了解）" class="headerlink" title="响应页面（了解）"></a>响应页面（了解）</h4><p>响应页面时不能使用<code>@responseBody</code>注解，否则会把”page.jsp”当做字符串返回，这里需要返回页面：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不能使用@responseBody，否则会把&quot;page.jsp&quot;当做字符串返回，这里需要返回页面</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/jumpToPage&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">jumpToPage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;跳转页面&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;page.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230607101201195.png"                      alt="image-20230607101201195"                ></p><h4 id="响应文本数据"><a href="#响应文本数据" class="headerlink" title="响应文本数据"></a>响应文本数据</h4><p>响应文本时一定要使用<code>@responseBody</code>注解，返回纯文本字符串类型数据。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toText&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toText</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;返回纯文本数据&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;response text&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230607101757278.png"                      alt="image-20230607101757278" style="zoom:80%;"                 ><h4 id="响应JSON数据"><a href="#响应JSON数据" class="headerlink" title="响应JSON数据"></a>响应JSON数据</h4><p><strong>响应POJO对象</strong></p><p>返回值为实体类对象，设置返回值为实体类类型，即可实现返回对应对象的json数据，需要依赖<code>@ResponseBody</code>注解和<code>@EnableWebMvc</code>注解。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toPojoJson&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> User <span class="title function_">toPojoJson</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;返回json格式的对象类型&quot;</span>);</span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">      user.setName(<span class="string">&quot;李嘉诚123&quot;</span>);</span><br><span class="line">      user.setAge(<span class="number">22</span>);</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230607103941400.png"                      alt="image-20230607103941400" style="zoom:80%;"                 ><p><strong>响应POJO集合对象</strong></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toJsonList&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">toJsonList</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;返回json对象列表的类型&quot;</span>);</span><br><span class="line">      <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">      u1.setName(<span class="string">&quot;李嘉诚&quot;</span>);</span><br><span class="line">      u1.setAge(<span class="number">21</span>);</span><br><span class="line">      <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">      u2.setName(<span class="string">&quot;廖梓汀&quot;</span>);</span><br><span class="line">      u2.setAge(<span class="number">22</span>);</span><br><span class="line">      List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">      users.add(u1);</span><br><span class="line">      users.add(u2);</span><br><span class="line">      <span class="keyword">return</span> users;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="image-20230607104901315.png"                      alt="image-20230607104901315" style="zoom:80%;"                 ><p> <strong><code>@ResponseBody</code>总结</strong></p><p>位置：SpringMVC控制器方法定义上方和控制类上，写在类上则该类的所有方法都有该注解功能；</p><p>作用：设置当前控制器返回值作为响应体（除了返回页面之外都要加该注释）：① 方法的返回值为字符串，会将其作为文本内容直接响应给前端；② 方法的返回值为对象，会将对象转换成JSON响应给前端（通过Converter接口）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SpringMVC是隶属于Spring框架的一部分吗，是对Servlet进行了封装。SpringMVC是处于Web层的框架，所以其主要的作用就是用来接收前端发过来的请求和数据然后经过处理并将处理的结果响应给前端，所以如何处理请求和响应是SpringMVC中非常重要的一块内容。&lt;/p&gt;</summary>
    
    
    
    <category term="SpringMVC" scheme="https://kicheng.github.io/categories/SpringMVC/"/>
    
    
  </entry>
  
</feed>
